<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>粉体输送系统设计</title>
      <link href="/2023/01/05/%E7%B2%89%E4%BD%93%E8%BE%93%E9%80%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
      <url>/2023/01/05/%E7%B2%89%E4%BD%93%E8%BE%93%E9%80%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="绪论">绪论</h2><h4 id="气力输送概况">气力输送概况</h4><h4 id="气力输送基本理论">气力输送基本理论</h4><p>​ 气力输送是在一定条件下，利用空气流作为承载介质来输送颗粒及粉状物料的一门技术。目前采用最 多的气力输送方式为吸送式和压送式。它们的主要机理是建立在具有一定速度的气流对物料颗粒的作用 上。根据许多实验分析，<strong>紊流运动是空气和物料混合物的主要运动方式</strong>，即紊流作用决定了气流与物料颗粒间的整个相互作用，或者说气流在层流状态下，不可能对物料进行输送。目前无论是压送式还是吸送 式，管内气流速度一般在10 ~ 30m/s之间，管径常在50 ~ 300mm之间。这种气流条件已远远超过水力学 理论中保持层流状态的雷诺数临界值。 <em>物料上下速度不同，会产生一个浮力(上压强小，下压强大)，前后速度不同，也会导致前面的压强小于后面的压强</em></p><h4 id="气力输送的特点">气力输送的特点</h4><p><strong>气力输送的一些优点</strong></p><p>(1)物料在密闭的管道中输送，对环境不易产生粉尘污染，同时，环境对物料也不会造成污染及使其受潮等，可保证输送物料的品质。 (2)输送线路可灵活布置，占地面积少，可以充分利用空间，对于复杂的地形，以及在老厂改造中对拥挤的厂房，输送管道布置具有很大的适应性和灵活性。 (3)在物料输送的同时，可以完成多种生产工艺过程，如对物料的冷却、加热、干燥、润湿、净化等。 (4)机械传动部件少，结构简单，操作管理方便，易损件少，维修费用低。 (5)能做到定量输送，便于生产调度和管理。 (6)能进行长距离分散或集中输送。 (7)对化学不稳定的物料可采用惰性气体保护输送。</p><p><strong>气力输送的一些主要缺点</strong></p><p>(1)动力消耗较大。 (2)输送管道中与气流及物料相接触的构件磨损大，特别在输送磨琢性大的物料时，磨损更严重。 (3)对输送物料有一定条件限制，如对脆性易碎的物料，因破碎会导致质量降级或产品不合格则不能 采用气力输送；对粘性物料或易吸湿结块成团的物料，因在输送过程中易堵管而不宜采用；对于磨琢性大 的物料，因容易损环线路应慎用；对易氧化的物料要用惰性气体保护输送；而对于块度大于50mm及密度大的物料，不宜采用。 采用气力输送经济性的问题，它虽有动力消耗大的缺点，但操作人员和易损件均比其他运输方式少，所以总的维修费和每吨营运费，未必高于其他输送方式。此外，山于装卸输送量大，若能缩短装卸时间，提高车船利用率，动力费用较贵的问题就可从综合整体效益方而得到补偿。对面粉、砂糖、药物或其他食品，如用其他运输方式，必须在卫生防护方面进行特别处理，而采用气力输送则不需要。虽然气力输送动力费用较贵，但整体营运费并不贵。</p><h2 id="气力输送基本型式">气力输送基本型式</h2><ul><li>吸送式(负压)：高真空式（-10~-50 kPa）,低真空式（-10 kPa以下）</li><li>压送式(正压)：高压式（100 ~ 700 kPa）,中压式（50 ~ 100kPa），低压式（50 kPa 以下）</li></ul><h4 id="吸送式气力输送">吸送式气力输送</h4><p>​ 吸送式气力输送是依靠压力低于外界大气压力（标准大气压力等于101.325 kPa）的空气流，携带物料沿着管内流动线路进行输送。在工程设计中负压气力输送有如下特点： (1)适用于多点向一点集中输送物料。将分散的物料从各处依次地吸引输送，各点在同时进行吸引时，压力和吸气速度也能保持平衡； (2)对于堆积面广，或装在低处、深处的物料输送至高料位，有其特殊的方便之处。如装卸散存在仓 库内的物料，吸送散装在货车、船仓内的粉粒状物料； (3)对料罐或料斗下部地方狭窄，无法安设压送式供料器时，采用吸送式很方便； (4)加料点不会产生粉尘飞扬； (5)给料点可以敞开。对流动性能差的物料，敞开供料比密闭式压送式供料方便，可确保供料均匀，输送连续； (6)供料器的结构远比压送式简单； (7)由于是吸送，风机中如有油分或水分不会混人物料，这对食品类物料的输送很有益； (8)由于负压吸送，输送管道沿线不会有物料往外泄漏。 ​ 吸送式气力输送的主要缺点是输送距离不宜过长，因随着距离增加，阻力将会加大，真空度亦需要增加，真空度增加后，空气变得稀薄，物料携带能力将降低。一般真空度不宜超过-50 ~ -60kPa(0.5 ~ 0.6个大气压)。不适于作大容量、长距离输送。尾气通过鼓风机叶轮，除尘效果不好会导致叶轮很快磨损，故对尾气除尘要求很严格。 ​ 可根据不同抽气量和不同真空度，选用通风机、鼓风机、罗茨鼓风机、水环式真空泵、往复式真空泵或喷射泵等作为吸送抽气的风动设备。</p><h4 id="压送式气力输送">压送式气力输送</h4><p>​ 压送式气力输送是在高于外界大气压力的正压状态下工作。压缩气体进入管道与加人的物料形成混合物，在气体动力的作用下，沿输料管被压送至卸料处经分离器进行气固分离，物料排入料仓，气体经除尘器净化后排人大气，或回收。 压送式气力输送根据不同形式的供料器而分成多种不同型式，具有以下特点： (1)适宜于从一处向多处进行分散输送； (2)适合于大容量、长距离输送； (3)分离器和除尘器的构造比较简单，因为都是正压，物料易从排料口排出； (4)可以方便地发现漏气的位置，以便及时处理； (5)由于带粉尘气体不通过风机内部，对风机的磨损少，使用寿命长。 ​ 压送式气力输送的主要缺点是装置比较复杂，特别是被输送的物料要在常压状态下加人高压输送管道 内比较难，一面加入物料，一面要保持密封，各类供料器的维修保养工作量大。 ​ 压送式气力输送分低压式、中压式和高压式三种。空气流的最大表压不超过50kPa为低压输送。在这 种情况下，因为压损小，空气密度变化很小，在计算过程中可以把输送过程视为等容过程而不考虑空气密 度的变化。在0.05~0.lMPa表压下输送为中压输送。空气密度的变化也不大，计算中仍可忽略气体密度 的变化。但超过0.IMPa的压力输送，在计算中密度的变化就不能忽视，应按等温过程进行计算。</p><h4 id="吸送压送组合式气力输送">吸送、压送组合式气力输送</h4><h4 id="密相脉冲式气力输送">密相脉冲式气力输送</h4><p>​ 之前弄的发送罐就是用的这个原理，气体推动前面料柱，料柱再压缩前面的气体，如此脉冲进行，料柱由气刀切割形成。</p><h4 id="空气输送斜槽">空气输送斜槽</h4><p>​ 下方进去上方出气，当下方气体向上吹的时候，物料与斜槽之间的摩擦力减小，物料就可以靠重力和气吹分力斜向下滑动。</p><h2 id="气力输送设计基础">气力输送设计基础</h2><h3 id="空气管道流的基本规律">空气管道流的基本规律</h3><h4 id="空气的组成及物理性质">空气的组成及物理性质</h4><p>氮气 N<sub>2</sub> 78.09(摩尔百分率%)</p><p>氧气 O<sub>2</sub> 20.95 %</p><p>其他</p><h4 id="空气的密度">空气的密度</h4><p>​ 空气密度与压力、温度有关，在标准气压下，不同温度的空气密度可查表。 干燥空气的密度可以按下式计算： <span class="math display">\[ρ_空 = 1.293\times\dfrac{273}{273+t}\times\dfrac{P}{101.3}\quad kg/m^3\tag{3-1}\]</span></p><h4 id="空气的粘滞性">空气的粘滞性</h4><p>​ 空气在外力作用下产生相对运动，在运动状态下空气有一种内在的抗拒向前运动的特性称为粘滞性。 由于空气的粘滞性，空气流在运动时便产生了空气内摩擦阻力f，此力的大小与空气流速减慢的速度梯度成正比。令速度梯度为：</p><h4 id="理想气体状态方程">理想气体状态方程</h4><h3 id="物料的性能">物料的性能</h3><h4 id="颗粒物料的粒径">颗粒物料的粒径</h4><h4 id="颗粒物料的密度">颗粒物料的密度</h4><h4 id="粉体状物料的孔隙率">粉体状物料的孔隙率</h4><h4 id="物料的水分">物料的水分</h4><h4 id="物料的摩擦角">物料的摩擦角</h4><h4 id="物料的磨琢性">物料的磨琢性</h4><h4 id="物料的破碎">物料的破碎</h4><h4 id="物料的粘管现象">物料的粘管现象</h4><h4 id="粉尘的爆炸">粉尘的爆炸</h4><p>​ 粉尘爆炸现象是指在空气中悬浮的粉尘急剧地氧化燃烧，同时产生大量的热和高压气体。爆炸的机 理，通常认为首先是一部分粉尘被加热，产生可燃性气体，它与空气混合后，当存在一定的高温、火种或 电火花时就会很快引起燃烧。由此产生的热量又将周围的粉尘加热并产生新的可燃性气体，这样就会产生爆炸的连锁反应。 ​ 粉尘要达到一定的浓度才能发生爆炸，这一浓度界限称为爆炸的下限。它与火源的强度、粉尘的种类 和大小、湿度、通风情况、氧气浓度等因素有关。 ​ 粉尘爆炸发火时所需的最低温度称发火点。它也与上述各因素有关。粉尘粒子越细，发火点越低。具 有爆炸危险的粉尘常见的有：铝粉、镁粉、硫磺、碳、煤粉、淀粉、面粉、奶粉、染料、塑料、合成洗衣 粉、无水苯二酸等。 ​ 粉尘的浓度及粉尘粒子的细度对粉尘爆炸起主导作用。如面粉在lm³的空气中悬浮15~20g时最容易 爆炸，特别是l0pum粒子浓度为20g/m³时，爆炸的危险性最大。 ​ 粉粒状物料在输送过程中向存仓供料时会产生大量粉尘，如有火源就会产生爆炸。国外已发生多起存 仓粉尘爆炸的严重事故，爆炸的原因通常认为是由静电引起的。 ​ 除存仓外，气力输送装置、除尘装置、袋式除尘器等，也有可能引起粉尘爆炸，均必须有安全措施。</p><p>(1)、粉尘爆炸的性质 产生粉尘爆炸的难易和爆炸时的状态，与粉尘的物理、化学性质，大气条件等有很大关系。一般结论 如下： ①燃烧热越大的物质，爆炸越容易。例如煤尘、碳、硫磺等。 ②氧化速度越大的物质，爆炸越容易。例如镁、氧化亚铁、染料等。 ③粒子越小，爆炸越容易。即粒子越小，爆炸下限及最小点火能也越小，最大爆炸力及压力上升速 度越高。 ④悬浮性越大，爆炸越容易。 ⑤氧气浓度越高，则发火点越低，最大爆炸压力及压力上升速度越高，如图3-14、3-l5所示。 ⑥爆炸的粉尘浓度有一定范围，爆炸压力及压力上升速度随浓度变化而变化，如图3-l6所示。 ⑦易带电的粉尘容易爆炸。合成树脂粉末、纤维类、淀粉、面粉等这些导电性不良的物质，由于与 机器或空气摩擦产生的静电会积聚起来，当达到一定数量后就会放电，产生电火花，造成爆炸。 ⑧粒子越干燥，爆炸越容易。因水分有抑制爆炸性能的作用。水分的功能是： a.抑制粉尘的悬浮性； b.由于水分的蒸发，使点火的有效能减少； c.蒸发的水蒸气起惰性气体作用； d.抑制静电积蓄。</p><p>(2)、防止粉尘爆炸的措施 由于粉尘爆炸的难易和爆炸时的状态与粉尘的性质和大气条件有关，因此，防止爆炸的方法，在不同 场合也要有所区别。但是基本方法如下： ①选用不产生粉尘的操作方法和机器设备； ②将产生粉尘的机器，进行密闭，并设排尘系统，防止粉尘飞扬； ③将产生粉尘的车间与其他车间分开，同时在车间安置除尘装置或排风扇，使粉尘浓度低于临界值； ④室内或机器设备内不堆积粉尘； ⑤提高粉尘或大气的湿度； ⑥采用不燃性固体或N2、CO2等惰性气体操作； ⑦消除火源，具体采取以下措施： a.禁止使用或接近明火； b.不准带人火柴、打火机等； c.不准穿带铁钉的鞋，不要带入金属类工具； d.用筛子、磁铁分离器等清除物料中的异物； e.采用防爆型电机、开关等电气元件； f.尽可能避免产生静电，所有设备要接地； g.建筑物采用防爆、防火结构，与其他建筑物连接处，应安设防火门、百叶窗。</p><p>(3)、粉尘的爆炸级别 粉尘的爆炸性可以用它的爆炸级别来表示，按粉尘的起爆敏感指数和爆炸性指数将 各种粉尘的爆炸危险级别分为弱、中、强、剧烈四级。</p><p><em>粉尘粒径大于150um，爆炸危险性较小。若粒径大于420um，一般在空气中不会爆炸，但对化学性 质极不稳定的粉尘也有例外。</em></p><h3 id="气固两相流的状态及性质">气固两相流的状态及性质</h3><h4 id="物料在垂直输送管中的运动状态">物料在垂直输送管中的运动状态</h4><h4 id="物料在水平输送管中的运动状态">物料在水平输送管中的运动状态</h4><h4 id="气流速度与颗粒运动状态">气流速度与颗粒运动状态</h4><h4 id="两相流的压力损失">两相流的压力损失</h4><p><strong>两相流的压损特性</strong></p><p>​ 管道中单相空气流的压力损失，将随着气流速度的增加而增大。当物料加人后， 由于存在物料之间、粒子与管壁之间不断发生碰撞与摩擦，造成能量损失，所以物料加人后的两相流压力 损失显然要比单相的空气流大。</p><p><strong>两相流压力损失计算</strong></p><p>​ 两相流的压力损失计算是由纯空气的压力损失加上物料颗粒所引起的附加压力损失。输送管中空气与 管壁的摩擦损失和纯空气在管内流动时一样，且略去由于物料颗粒的存在迫使管道断面面积的减小因素。 两相流的压力损失由<strong>摩擦压损、加速压损、悬移压损和局部压损</strong>所组成。</p><h3 id="紊流运动与悬浮速度">紊流运动与悬浮速度</h3><p>​ 在气力输送中，无论是采用吸送式或压送式，都是建立在具有一定速度的气流对物料颗粒作用的基础上。实验证明，紊流运动是空气、物料双相流主要运动形式。目前气力输送选用的气流速度一般在10 ~ 30m/s之间，所用管径在50 ~ 300mm范围内。在这种条件下的雷诺数处于33000 ~ 400000之间，远远超过保持层流状态的雷诺数临界值2320。气流和物料颗粒间的整个相互作用，决定于紊流作用。 处于空气动力作用下的物料颗粒将被输送。对于布置不同的管子，物料颗粒能够被输送的运动条件也是不同的。在垂直管中的物料颗粒必须呈悬浮状态，我们称保持物料处于悬浮状态的气流最小速度为悬浮 速度。 对于物料颗粒直径与管径尺寸相比很小的物料颗粒，并可以忽略管壁对其运动的影响时，其悬浮状态 运动平衡方程可用下式表示：<strong>颗粒自重 - 颗粒在流体中受到的浮力 = 颗粒在流体中受到的阻力</strong></p><p>​ <em>个人理解，当有垂直向上输送的情况时，直接考虑垂直输送的速度即可，水平输送速度就没这么重要了</em></p><h2 id="气力输送设计计算">气力输送设计计算</h2><h3 id="设计条件">设计条件</h3><h4 id="输送物料的物理化学性质">输送物料的物理、化学性质</h4><p>​ 气力输送设计要了解的物料物理、化学性质是指物料的粒径、粒度分布、形状、密度、容积密度、悬 浮速度、含水量、吸湿性、摩擦角、流动性、破碎性、腐蚀性、静电效应、磨琢性、毒性、放射性等。 ​ 一般采用物料的平均粒径作为物料的粒度。但有的物料含有细粉，容易吸湿并产生粘附，促使管路阻 塞，料仓起拱；当含有大块物料时便容易产生机械事故，因此，不但要了解物料的平均粒径，还要知道粒 度分布及各级粒度所占的百分比。颗粒的形状不同，物料的流动性便有差异，一般把粒子看成圆形或球 形，用其直径表示，这主要是为了便于计算，然面绝大多数被输送的物料均为不规则的形状，例如大豆、 菜籽、稻米、尿素、树脂、矿粉等只是比较接近于球形，有的差距更大，如水泥熟料、化肥中的磷铵、氯 化钾等形状非常不规则，砂糖接近于六方体，谷氨酰胺酸钠接近于针状，相同的物料由于制造方法不同表 面形状也不一样，如氯化乙烯粉末。栖霞山化肥厂生产的尿素接近于球形，因制造时是通过造粒塔成形 的，而南化氮肥厂生产的尿素成晶粒体，因是通过蒸发结晶而成。各种物料由于形状不一，流动性就有差 别，如球粒状尿素流动性相当好，晶粒状尿素就很差。 ​ 物料的流动性好，有利于向输送系统供料、管道输送及料气分离。物料流动性的好坏，通常采用静止 角及内摩擦角的大小来表示。静止角越小，内摩擦角越小，物料流动性就越好。流动性与物料的含水量有 很大的关系，即使同样的物料，由于含水量不一样，流动性也有很大差别。有些物料还非常敏感，如尿 素、硫胺、芒硝、氯化钾等，这些物料与大气接触后，会因吸湿而产生潮解及溶化，这样不但严重影响物 料的流动，时间长了还会结成大块面无法运输。因此，在设计易吸潮结块的物料的气力输送时，应考虑大 气可能产生的最坏条件以及防止事故发生和处理事故的方法。 ​ 粒子的化学性质、密度和硬度关系到设备的磨损，必须根据其程度来选定设备的类型、结构及材质。 各种物料的密度差距极大，如一些矿石的密度在3~5t/m³左右，而炭黑的密度为0.03v/m³，如单位 时间输送量相同，其容积差距却很大，显然输送此两种物料所采用的装置尺寸、结构和所需功率电不同， 因此，采取的最合理的输送方式也不一样。 ​ 在不少情况下，需要根据粒子的破碎性和允许粒子的破碎程度来确定输送方式。一般采用机械输送或 物料装人容器输送时，粒子的破碎很少，而气力输送方式破碎就多。然面，合理地选择输送路线和距离， 选定适当的气流速度，就可减少破碎的程度。如对麦芽、纯碱这些容易破碎的粒子，采取上述措施后也可 采用适宜的气力输送。随着气力输送方式的不断改进，近年来，对谷氨酰胺酸钠和豆渣等这些非常易破碎 的物料，也已采用气力输送。 ​ 对于输送带电性显著的物料装置，要安设完善的接地线和防止带电的设置，以防产生静电。 ​ 对爆炸性的物料，除需要防止静电外，所有电气设备均采用防爆型结构。</p><h4 id="装置的输送量">装置的输送量</h4><h4 id="输送装置起点站和终点站">输送装置起点站和终点站</h4><h4 id="输送距离和线路">输送距离和线路</h4><h4 id="运转管理条件">运转管理条件</h4><h4 id="电源">电源</h4><h4 id="水源">水源</h4><h4 id="设计程序">设计程序</h4><p>(1)分析设计原始条件 根据工程设计要求，分析输送物料的物理、化学特性及建设单位提供的输送条件和有关参数，对易燃、易爆物料更要慎重、仔细。</p><p>(2)确定气力输送系统型式 根据建设单位提供的原始数据、设计条件及各种必要的设计参数，确定采用吸送式输送系统，还是压 送式输送系统或是混合式输送系统。 (3)确定输送管线布置及各主要部件结构型式，并绘制系统布置示意图。 (4)计算输送量 根据建设单位提供的年输送量、年操作日、工作班制及前后工段工艺配置情况，计算并确定系统输送 能力。 (5)选定混合比 (6)选定输送气流速度 常用物料的气流速度可参考附录A表A-2选定。或参考该表的物料悬浮速度确定。 (7)计算输送空气量 (8)计算输料管直径 (9)确定气力输送装置的主要部件结构及有关尺寸。包括： ①输料管水平长度和垂直高度、倾角、弯头数量，以及管路结构、材质和支架等。 ②分叉管和切换阀的种类、构造、材质及数量。 ③分离器和除尘器的型式、尺寸及材质、管口方位等。 (10)计算整个输送系统的压力损失。 (11)根据计算所需的输送空气量、总压损及有关设计条件等情况选定鼓风机的种类和容量。 (12)选择电动机的种类和容量。 (13)选定所需电气设备及所需附属设备。 (14)确定开停车等运转顺序，确定联锁及安全装置，选定控制操作盘的种类和容量。 (15)确定吸排气口的位置，是否加消音设备，确定除尘方式。 (16)编制安装、调试运转操作规程。 (17)编制所需易损件备品备件种类和数量。</p><h4 id="稀相气力输送的设计计算">稀相气力输送的设计计算</h4><p>​ 气力输送装置设计必须对下列主要参数进行计算与确定，这些参数的正确计算与合理选定，不但是为了确保设备的正常操作与运转，而且也体现了气力输送整体设计的合理性与先进性。这些主要参数有：生产率、混合比、风速、风量、输料管直径、压力损失、风机功率等。</p><h4 id="生产率计算">生产率计算</h4><p>​ 生产率的计算与确定是设备设计与选型的主要依据之一。根据工程要求的年度输送量、年工作日及日 工作班制进行计算。计算气力输送系统在单位时间内通过的最大输送量，一般按下式计算： <span class="math display">\[G&#39;= \dfrac{G}{D_y \times H}\tag{4-1}\]</span> G'小时生产量，kg/h G装置年需要量，kg/a D 年工作日</p><p>H 每天工作小时数（一班制取7小时，二班制取14小时，三班制取21小时）。 由公式(4-l）计算出的小时生产量，必须考虑整个气力输送装置的供料情况，来料有无中间贮仓， 后续机械检修的频繁情况，一般都要增加一定的设计裕量，即 <span class="math display">\[G_s = \alpha_0 *\;G&#39;\tag{4-2}\]</span></p><p>(4 - 2) 式中 G<sub>s</sub> 设计小时生产量，kg/h α<sub>0</sub> 裕量系数 α<sub>0</sub> 一般在1.05 ~ 1.20之间。工况条件好的取1.05，差的取1.20。</p><h4 id="混合比">混合比</h4><p>​ 混合比 μ 即气力输送中气体所含输送物料的质量浓度，是指单位时间内所输送物料质量与气体质量之 比，用下式表示。</p><p><span class="math display">\[\mu = \dfrac{G_s}{G_0}\tag{4-3}\]</span></p><p>μ 混合比，kg/kg G<sub>s</sub> 输送物料的直流流量，kg/h G<sub>0</sub> 气体质量流量，kg/h<br />混合比越大越经济，因混合比越大，有利于提高输送能力。当被输送的物料为一定量时，混合比增 大，则用来输送物料的空气量可少，从而输送管道的直径也就小，风机功率也小，气力输送装置的投资费 用降低，能量消耗下降，经济效益明显。但混合比增大后也带来一些不利影响和风险，例如混合比过大， 在悬浮状态下输送时，浓度过大，输料管容易产生堵塞，且管道压力也增加，必须采用高压风机，所以混 合比不能盲目加大。 当混合比增大后阻力损失也会增大，由于风机的功率正比于压损和空气量的乘积，当压损增加不很 大，但空气量减少很多时，采用提高混合比是合适的。</p><p><strong>混合比推荐值</strong></p><table><colgroup><col style="width: 7%" /><col style="width: 49%" /><col style="width: 43%" /></colgroup><thead><tr class="header"><th>输送方式</th><th style="text-align: left;">压 力/kPa</th><th>混合比 μ</th></tr></thead><tbody><tr class="odd"><td>负压</td><td style="text-align: left;">低真空 -10以下<br />高真空 -10 ~ -50</td><td>0.1 ~ 0.8<br />8 ~ 20</td></tr><tr class="even"><td>正压</td><td style="text-align: left;">低 压 50以下<br />中 压 50 ~ 100<br />高 压 100 ~ 700<br />流态化压送</td><td>1 ~ 10<br />10 ~ 25<br />10 ~ 40<br />40 ~ 80或者更高</td></tr></tbody></table><ol type="1"><li>输送方式</li></ol><p>​ 当采用吸送式气力输送时，由于受真空度限制，混合比不能取得太大。低真空时混合比在0.1 ~ 8之 间，高真空时混合比在8 ~ 20之间。 ​ 采用压送式输送时，可选用较高的混合比，低压输送时一般混合比不超过10，高压输送时一般混合 比不超过40。</p><h4 id="输送物料的气流速度">输送物料的气流速度</h4><p>​ 气力输送装置中空气在管道中运动，要有个最有利的经济速度。此速度首先是能确保被输送物料在，所有输送管段内畅通无阻，但速度太低，由于阻力系数增大会使摩擦压力损失增高。速度过高不但浪费能量，也会使物料颗粒对管壁的冲击、碰撞加剧而引起物料破碎加剧，同时对输料管、弯头等处的磨损增大，导致使用寿命缩短。所以，输送速度选择得恰当与否，关系到气力输送装置运转性能的好坏和经济效益。 ​ 从悬浮机理上来说，输送物料的气流速度，只要略大于悬浮速度，物料就能悬浮被吹走，实现输送。由于两相流在管道内流动，颗粒之间及颗粒与管道之间摩擦碰撞，气流在管道断面上分布不均匀及物料在各个弯头处受阻减速等，都会影响物料的输送，最终造成阻塞。因此，输送风速必须远比悬浮速度大。 ​ <strong>对于粒度均匀的物料，气流速度一般取悬浮速度的1.5 ~ 2.5倍</strong>，对物性好的取下限，物性差的取上限。 ​ 对于粒度不均匀的物料，若颗粒大的占40%以上，则按大颗粒选定气流速度，一般宜取悬浮速度的2倍。对于粉粒状物料，因容易残留附着于管壁，往往气流速度要比悬浮速度大数倍，甚至儿十倍，采用高浓度输送时，可用低的输送速度。</p><p>输送速度在无实测数据和经验数据可作依据时，可按下面经验公式估算 <span class="math display">\[\upsilon = \alpha_1 \; \sqrt{\rho_m} \; + \; \beta\ell\tag{4-4}\]</span> 字母含义解释以后补充 由于设计误差和输送条件的变化等因素，实际输送气流速度经常会有波动，故在决定供料点的风速 时，要有比理论输送气流速度高出10% ~ 20%的裕量。</p><h4 id="输送风量">输送风量</h4><p>​ 气力输送计算风量系指在常压状态下，温度20℃，相对湿度50%，输送物料所需要的有效风量，其 计算公式如下： <span class="math display">\[Q = \dfrac{G_s}{\mu\,\rho_0}\tag{4-5}\]</span> (4-5)式中 ρ 常压状态下20℃时气体密度，空气为1.2kg/m<sup>3</sup> μ 混合比 Q 常压状态下20℃时输送风量，m<sup>3</sup>/h G<sub>s</sub> 计算生产率，kg/h 在选择风机时，其风量除了应满足公式(4-5)计算的输送风量外，还应考虑输送系统的漏风量， 一般应增加10% ~ 20%的裕量，即取裕量系数，α<sub>0</sub> =1.1 ~ 1.2。</p><h4 id="输送管道直径计算">输送管道直径计算</h4><p>在计算输送管道内径时，一般应按所需空气量进行计算，不需考虑漏损系数，可按下式计算： <span class="math display">\[D = \sqrt{\dfrac{4Q}{3600\,\pi\,\upsilon}}\tag{4-6}\]</span> 式中 D 输送管内径</p><p>DFAKSJ</p><h4 id="压力损失计算">压力损失计算</h4><h3 id="密相脉冲气力输送的设计计算">密相脉冲气力输送的设计计算</h3><h4 id="参数的选择和计算">参数的选择和计算</h4><h4 id="密相脉冲气力输送设计注意事项">密相脉冲气力输送设计注意事项</h4><h3 id="空气输送斜槽的设计计算及选型">空气输送斜槽的设计计算及选型</h3><h4 id="物料的输送速度">物料的输送速度</h4><h4 id="生产能力的计算">生产能力的计算</h4><h4 id="所需要的空气">所需要的空气</h4><h4 id="多孔透气板">多孔透气板</h4><h4 id="流程布置注意事项">流程布置注意事项</h4><h4 id="空气输送斜槽的选型">空气输送斜槽的选型</h4><h3 id="符号说明">符号说明</h3><h2 id="管道气力输送故障的分析和防止措施">管道气力输送故障的分析和防止措施</h2><h3 id="堵塞问题">堵塞问题</h3><h4 id="产生堵塞的原因">产生堵塞的原因</h4><h4 id="防止堵塞的措施">防止堵塞的措施</h4><h4 id="疏通堵塞的方法">疏通堵塞的方法</h4><h3 id="磨损问题">磨损问题</h3><h4 id="磨损情况">磨损情况</h4><h4 id="影响磨损的因素">影响磨损的因素</h4><h4 id="减少磨损的措施">减少磨损的措施</h4><h2 id="管道气力输送的管道和管件">管道气力输送的管道和管件</h2><h3 id="输料管道">输料管道</h3><h3 id="输料弯管">输料弯管</h3><h3 id="法兰">法兰</h3><h3 id="换向器分路阀">换向器(分路阀)</h3><h3 id="增速器">增速器</h3><h3 id="锁气卸料器">锁气卸料器</h3><h3 id="风管">风管</h3><h2 id="供料器">供料器</h2><h3 id="吸嘴">吸嘴</h3><h4 id="吸咀设计及选用原则">吸咀设计及选用原则</h4><h4 id="吸咀的种类">吸咀的种类</h4><h4 id="吸咀内径的计算">吸咀内径的计算</h4><h4 id="吸咀使用实例">吸咀使用实例</h4><h4 id="吸咀的压力损失">吸咀的压力损失</h4><h3 id="喷射式供料器">喷射式供料器</h3><h3 id="回转叶轮式供料器">回转叶轮式供料器</h3><h3 id="螺旋式供料器">螺旋式供料器</h3><h3 id="电子流量计">电子流量计</h3><h3 id="仓式输送泵发送罐">仓式输送泵(发送罐)</h3><h4 id="特点">特点</h4><h4 id="工作过程">工作过程</h4><h4 id="平均混合比">平均混合比</h4><h4 id="仓泵的压力损失">仓泵的压力损失</h4><h2 id="气体输送与压缩机械">气体输送与压缩机械</h2><h3 id="离心式通风机和鼓风机">离心式通风机和鼓风机</h3><h3 id="罗茨鼓风机">罗茨鼓风机</h3><h3 id="水环式真空泵">水环式真空泵</h3><h4 id="水环式真空泵构造原理">水环式真空泵构造原理</h4><h4 id="水环式真空泵特点">水环式真空泵特点</h4><h3 id="压缩机">压缩机</h3><h4 id="螺杆式压缩机">螺杆式压缩机</h4><h4 id="旋板式压缩机回转滑片压缩机">旋板式压缩机(回转滑片压缩机)</h4><h2 id="分离器和除尘器">分离器和除尘器</h2><h3 id="旋风分离器和除尘器">旋风分离器和除尘器</h3><h4 id="原理与构造">原理与构造</h4><h4 id="分离性能">分离性能</h4><h4 id="压力损失">压力损失</h4><h4 id="选型与计算">选型与计算</h4><h3 id="容积式分离器">容积式分离器</h3><h3 id="袋式除尘器">袋式除尘器</h3><h4 id="袋式除尘器工作原理">袋式除尘器工作原理</h4><h4 id="过滤面积的计算">过滤面积的计算</h4><h4 id="压力损失-1">压力损失</h4><h4 id="影响袋式除尘器除尘效率的因素">影响袋式除尘器除尘效率的因素</h4><h4 id="袋式除尘器的工作条件与清理方式">袋式除尘器的工作条件与清理方式</h4><h4 id="袋式除尘器的形式">袋式除尘器的形式</h4><h3 id="电除尘器">电除尘器</h3><h4 id="电除尘工作原理">电除尘工作原理</h4><h4 id="影响电除尘除尘效率的因素">影响电除尘除尘效率的因素</h4><h2 id="粉粒体气力输送工程设计及工程建设选用产品">粉粒体气力输送工程设计及工程建设选用产品</h2><h3 id="气体输送压缩与处理设备">气体输送、压缩与处理设备</h3><h4 id="罗茨类风机及真空泵">罗茨类风机及真空泵</h4><h4 id="离心通风机">离心通风机</h4><h4 id="压缩机水环真空泵无热再生干燥器">压缩机、水环真空泵、无热再生干燥器</h4><h3 id="分离器和除尘器-1">分离器和除尘器</h3><h4 id="旋风是分离器和除尘器">旋风是分离器和除尘器</h4><h4 id="袋式及滤筒式除尘器电除尘器">袋式及滤筒式除尘器、电除尘器</h4><h3 id="供料与卸料系统设备">供料与卸料系统设备</h3><h4 id="回转叶轮式供料器-1">回转叶轮式供料器</h4><h4 id="仓式发送器螺旋泵">仓式发送器、螺旋泵</h4><h4 id="翻板锁气卸灰阀">翻板锁气卸灰阀</h4><h4 id="电子流量计-1">电子流量计</h4><h3 id="阀门管件">阀门、管件</h3><h4 id="分路阀">分路阀</h4><h4 id="其它阀门">其它阀门</h4><h4 id="增压器球形弯头球形三通">增压器、球形弯头、球形三通</h4><h3 id="电子定量包装秤电脑配料系统">电子定量包装秤、电脑配料系统</h3><h3 id="气力输送成套设备">气力输送成套设备</h3>]]></content>
      
      
      <categories>
          
          <category> 机械 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 粉体输送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非标设计</title>
      <link href="/2022/10/15/%E9%9D%9E%E6%A0%87%E8%AE%BE%E8%AE%A1/"/>
      <url>/2022/10/15/%E9%9D%9E%E6%A0%87%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="气动手指选型">气动手指选型</h2><h2 id="真空系统">真空系统</h2><h2 id="电机基础">电机基础</h2><h3 id="p3">P3</h3><p>常用公式：功率 P(KW) = 扭矩 T(N.M) * 转速 N(R/min) / 9550 = F * 直线速度 V(m/s) = 工况系数 K(1.5-3)* 负载 F * V / 效率 η (推荐0.5-0.8)</p><p>水平运动靠的是摩擦力 = 材料摩擦系数可查 * mg</p><p>怡合达网址里面有计算工具 ： https://www.yhdfa.com/</p><p>如果是直线运动可以用功率来计算，如果是旋转运动可以用扭矩来计算选电机。</p><p>加速扭矩约等于3倍匀速扭矩</p><p>如果负载偏大，速度偏快，而且是直线运动，一般用功率计算；速度偏慢，扭矩作用明显，一般通过扭矩计算。</p><p>减速机不影响电机功率，只是速度与扭矩转换。</p><p>电机级数和转速关系： 转速 n = 60 * 频率 f / 极对数</p><p>β 惯量(0.001 kg * m²)(kg* cm²) 大负载低转速场合 旋转和直线的惯性惯量计算公式不一样（找软件来通过软件计算） 东方马达辅助工具 负载惯量 / i² / 常数 20</p><p>β = ω / t ω rad/s(360° = 2π rad) β 角加速度 rad/s² = (2π * 1000 / 60) / 0.2s</p><p>加速扭矩 T = 惯量 * 角加速度</p><p>t 加速时间 s (控制电机默认0.2s, 普通电机0.5s)</p><h3 id="p4">P4</h3><p>## 螺纹的选型校核</p><h2 id="标准件常用件的选型及应用举例">标准件、常用件的选型及应用举例</h2><h2 id="链传动的选型及安装">链传动的选型及安装</h2><h2 id="v带传动的选型计算安装">V带传动的选型计算、安装</h2><h2 id="同步带同步轮的选型及安装">同步带、同步轮的选型及安装</h2><h2 id="轴承压端盖组装设备的设计及细节讲解">轴承压端盖组装设备的设计及细节讲解</h2><h2 id="带端盖轴承自动送料组装输送设备的设计细节及选型梳理">带端盖轴承自动送料、组装、输送设备的设计细节及选型梳理</h2><h2 id="齿轮的强度校核及材料的选择">齿轮的强度校核及材料的选择</h2><h2 id="滚珠丝杆的选型及品牌的介绍">滚珠丝杆的选型及品牌的介绍</h2><h3 id="滚珠丝杆的选型计算">滚珠丝杆的选型计算</h3><h2 id="发动机缸体自动翻转设备的设计">发动机缸体自动翻转设备的设计</h2><h2 id="直线导轨的选型安装">直线导轨的选型、安装</h2><h2 id="直线轴承的选型及安装形式">直线轴承的选型及安装形式</h2><h2 id="滚动轴承的选型及安装">滚动轴承的选型及安装</h2><h2 id="轴系结构二">轴系结构二</h2><h2 id="气缸参数选择及安装">气缸参数选择及安装</h2><h2 id="气缸缓冲方式接头连接及磁性开关的选型">气缸缓冲方式，接头连接及磁性开关的选型</h2><h2 id="电磁阀讲解">电磁阀讲解</h2><h2 id="气动回路讲解">气动回路讲解</h2><h2 id="三联件讲解">三联件讲解</h2><h2 id="气动回路">气动回路</h2><h2 id="气缸精讲">气缸精讲</h2><h2 id="旋转夹紧气缸选型">旋转夹紧气缸选型</h2><h2 id="旋转气缸选型">旋转气缸选型</h2><h2 id="真空系统-1">真空系统</h2><h2 id="气动手指选型-1">气动手指选型</h2><h2 id="电机理论基础">电机理论基础</h2><h2 id="普通电机功能选择">普通电机功能选择</h2><h2 id="步进电机选择">步进电机选择</h2><h2 id="伺服电机选型">伺服电机选型</h2><h2 id="间歇式运动机构">间歇式运动机构</h2><h2 id="凸轮分割器计算">凸轮分割器计算</h2><h2 id="电机综合选型">电机综合选型</h2><h2 id="机械设计辅助工具">机械设计辅助工具</h2><h2 id="零件加工方法">零件加工方法</h2><h2 id="公差与配合">公差与配合</h2><h2 id="热处理">热处理</h2><h2 id="常用的表面处理方式">常用的表面处理方式</h2><h2 id="皮带输送机设计案例">皮带输送机设计案例</h2><h2 id="材料力学">材料力学</h2><h2 id="倍速链生产线设计">倍速链生产线设计</h2><h2 id="灌装旋盖机">灌装旋盖机</h2><h2 id="滚筒输送线设计">滚筒输送线设计</h2><h2 id="链式输送机">链式输送机</h2><h2 id="纽扣电池套热缩装置">纽扣电池套热缩装置</h2><h2 id="电池套热缩">电池套热缩</h2><h2 id="润滑脂自动码垛生产线">润滑脂自动码垛生产线</h2><h2 id="发动机滚珠丝杆升降装配工装">发动机滚珠丝杆升降装配工装</h2>]]></content>
      
      
      <categories>
          
          <category> 机械 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 非标设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件快捷键</title>
      <link href="/2022/09/28/%E8%BD%AF%E4%BB%B6%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2022/09/28/%E8%BD%AF%E4%BB%B6%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="auto-cad-常用快捷键">Auto CAD 常用快捷键</h2><table><thead><tr class="header"><th style="text-align: left;"><strong>1、圆 C</strong></th><th style="text-align: left;"><strong>19、样条曲线 SPL</strong></th><th style="text-align: left;"><strong>37、正多边形 POL</strong></th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><strong>2、直线 L</strong></td><td style="text-align: left;"><strong>20、定距等分 ME</strong></td><td style="text-align: left;"><strong>38、多行文字 T</strong></td></tr><tr class="even"><td style="text-align: left;"><strong>3、椭圆 EL</strong></td><td style="text-align: left;"><strong>21、定数等分 DIV</strong></td><td style="text-align: left;"><strong>39、删除 E</strong></td></tr><tr class="odd"><td style="text-align: left;"><strong>4、圆弧 A</strong></td><td style="text-align: left;"><strong>22、多段线 PL</strong></td><td style="text-align: left;"><strong>40、偏移 O</strong></td></tr><tr class="even"><td style="text-align: left;"><strong>5、点 PO</strong></td><td style="text-align: left;"><strong>23、点样式 PT</strong></td><td style="text-align: left;"><strong>41、复制 CO</strong></td></tr><tr class="odd"><td style="text-align: left;"><strong>6、填充 H</strong></td><td style="text-align: left;"><strong>24、构造线 XL</strong></td><td style="text-align: left;"><strong>42、旋转 RO</strong></td></tr><tr class="even"><td style="text-align: left;"><strong>7、矩形 REC</strong></td><td style="text-align: left;"><strong>25、平行线 ML</strong></td><td style="text-align: left;"><strong>43、圆角 F</strong></td></tr><tr class="odd"><td style="text-align: left;"><strong>8、面域 REG</strong></td><td style="text-align: left;"><strong>26、创建块 B</strong></td><td style="text-align: left;"><strong>44、合并 J</strong></td></tr><tr class="even"><td style="text-align: left;"><strong>9、插入块 I</strong></td><td style="text-align: left;"><strong>27、创建边界 BO</strong></td><td style="text-align: left;"><strong>45、延伸 EX 两次空格</strong></td></tr><tr class="odd"><td style="text-align: left;"><strong>10、缩放 SC</strong></td><td style="text-align: left;"><strong>28、移动 M</strong></td><td style="text-align: left;"><strong>46、折弯标注 DJO</strong></td></tr><tr class="even"><td style="text-align: left;"><strong>11、倒斜角 CHA</strong></td><td style="text-align: left;"><strong>29、修剪 TR 两次空格</strong></td><td style="text-align: left;"><strong>47、连续标注 DCO</strong></td></tr><tr class="odd"><td style="text-align: left;"><strong>12、标注样式 D</strong></td><td style="text-align: left;"><strong>30、对齐 AL</strong></td><td style="text-align: left;"><strong>48、对齐标注 DAL</strong></td></tr><tr class="even"><td style="text-align: left;"><strong>13、拉伸 S</strong></td><td style="text-align: left;"><strong>31、拉长 LEN</strong></td><td style="text-align: left;"><strong>49、直径标注 DDI</strong></td></tr><tr class="odd"><td style="text-align: left;"><strong>14、镜像 MI</strong></td><td style="text-align: left;"><strong>32、打断 BR</strong></td><td style="text-align: left;"><strong>50、弧长标注 DAR</strong></td></tr><tr class="even"><td style="text-align: left;"><strong>15、阵列 AR</strong></td><td style="text-align: left;"><strong>33、文字样式 ST</strong></td><td style="text-align: left;"><strong>51、引线标注 LE</strong></td></tr><tr class="odd"><td style="text-align: left;"><strong>16、分解 X</strong></td><td style="text-align: left;"><strong>34、线性标注 DLI</strong></td><td style="text-align: left;"><strong>52、快速标注QDIM</strong></td></tr><tr class="even"><td style="text-align: left;"><strong>17、移动 M</strong></td><td style="text-align: left;"><strong>35、半径标注 DRA</strong></td><td style="text-align: left;"><strong>53、用户坐标 USC</strong></td></tr><tr class="odd"><td style="text-align: left;"><strong>18、修剪 TR</strong></td><td style="text-align: left;"><strong>36、角度标注 DAN</strong></td><td style="text-align: left;"><strong>54、填充 H</strong></td></tr></tbody></table><table><thead><tr class="header"><th style="text-align: left;">智能标注 DIM</th><th style="text-align: left;">相对位置 TK</th><th style="text-align: left;">精度设置 UN</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"></td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"></td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"></td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"></td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr></tbody></table><h2 id="solid-edge-自定义快捷键">Solid Edge 自定义快捷键</h2><table><thead><tr class="header"><th style="text-align: left;"><strong><em>打包 shift+alt+z</em></strong></th><th style="text-align: left;"><strong>激活/更新 alt+q</strong></th><th style="text-align: left;"><strong>线性标注 alt+1</strong></th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><strong>间距标注 alt+2</strong></td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"></td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"></td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"></td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装</title>
      <link href="/2022/09/03/Linux%E5%AE%89%E8%A3%85/"/>
      <url>/2022/09/03/Linux%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="系统安装以及设置">系统安装以及设置</h2><p>1、当确定按键不在界面中时，按住Alt键就可以用鼠标拖动安装界面。</p><p>2、在25G空白磁盘上安装分区</p><table><thead><tr class="header"><th>挂载点</th><th>大小</th><th>新分区的类型</th><th>新分区的位置</th><th>文件系统</th></tr></thead><tbody><tr class="odd"><td>/boot</td><td>250M</td><td>逻辑分区</td><td>空间起始位置</td><td>Ext4日志文件系统</td></tr><tr class="even"><td>交换空间</td><td>最大1.5内存</td><td>逻辑分区</td><td>空间起始位置</td><td>交换空间</td></tr><tr class="odd"><td>/home</td><td>10G</td><td>逻辑分区</td><td>空间起始位置</td><td>Ext4日志文件系统</td></tr><tr class="even"><td>/</td><td>10G</td><td>主分区</td><td>空间起始位置</td><td>Ext4日志文件系统</td></tr></tbody></table><p>3、安装完成后，先修改镜像源再修改语言，改好重启后，勾选不再询问，点击使用旧名称。</p><p>4、软件安装及卸载命令</p><ul><li>更新可用软件包列表：sudo apt update</li><li>更新已安装的包：sudo apt upgrade</li><li>安装软件：sudo apt install 软件名</li><li>卸载软件：sudo apt remove 软件名</li></ul><p>5、常用工具</p><p>python</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install ipython</span><br><span class="line">sudo apt install ipython3</span><br><span class="line">sudo apt install python-pip</span><br><span class="line">sudo apt install python3-pip</span><br></pre></td></tr></table></figure><p>C++</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install cmake</span><br><span class="line">sudo apt install qtcreator</span><br></pre></td></tr></table></figure><p>ruby</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install ruby</span><br></pre></td></tr></table></figure><p>shh服务器安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install openssh-server</span><br></pre></td></tr></table></figure><p>6、软件卸载</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">libreoffice Amazon</span></span><br><span class="line">sudo apt remove libreoffice-common</span><br><span class="line">sudo apt removw unity-webapps-common</span><br></pre></td></tr></table></figure><p><strong>deb安装格式 </strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装软件</span></span><br><span class="line">sudo dpkg -i &lt;package.deb&gt;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修复软件之间的依赖关系；当安装软件时，提示：“在处理时有错误发生”时执行以下命令修复</span></span><br><span class="line">sudo apt -f install</span><br></pre></td></tr></table></figure><p>7、谷歌浏览器</p><ol type="1"><li><p>下载地址：https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</p></li><li><p>安装命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install libappindicator1 libindicator7</span><br><span class="line">sudo dpkg –i google-chrome–stable_current_amd64.deb</span><br><span class="line">sudo apt –f install </span><br></pre></td></tr></table></figure></li></ol><p>8、安装搜狗输入法</p><p>fcitx被称为小企鹅输入法，是一个以GPL方式发布的输入法平台，可以通过安装引擎支持多种输入法。它 的优点是，短小精悍、跟程序的兼容性比较好！ 1.打开系统设置语言支持 ·将键盘输入法系统修改为fcitx 2.访问网站：http://pinyin.sogou.com/Linux/ 下载最新版本的安装文件 3.在终端中执行以下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i 搜狗安装名.deb</span><br><span class="line">sudo apt -f install</span><br></pre></td></tr></table></figure><p>9、Ubuntu 下安装 OpenSSH</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install openssh-server</span><br></pre></td></tr></table></figure><p>修改ssh默认端口</p><p>ssh - server 配置文件位于 /etc/ssh/sshd_config ，在这里可以定义SSH的服务端口，默认端口是22，可以定义为其他的，如222，然后重启SSH服务：/etc/init.d/ssh restart</p><p>加快ssh登录时间</p><p>vim /etc.ssh/sshd_config</p><p>找到 GSSAPI options 这一节，将下面两行注释掉：</p><p>GSSAPIAuthentication yes</p><p>GSSAPIDelegateCredentials no</p><p>然后重新启动 ssh 服务即可</p><p>/etc/init.d/ssh restart</p><h2 id="section"></h2><h2 id="配置脚本">配置脚本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/sh</span></span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install aptitude -y</span><br><span class="line">sudo apt install tree</span><br><span class="line">sudo apt install vim vim-gnome vim-tiny vim-athena vim-athena-py2 vim-gnome-py2 vim-gtk vim-gtk-py2 vim-gtk3 vim-gtk3-py2 vim-nox vim-nox-py2 -y </span><br><span class="line">sudo echo &quot;sudo cp vimrc /etc/vim/vimrc&quot;</span><br><span class="line">sudo cp vimrc /etc/vim/vimrc</span><br><span class="line"></span><br><span class="line">sudo apt install stardict -y</span><br><span class="line">sudo echo &quot;sudo cp dic /usr/share/stardict -r&quot;</span><br><span class="line">sudo cp dic /usr/share/stardict -r</span><br><span class="line"></span><br><span class="line">sudo apt install g++ -y</span><br><span class="line">sudo apt install vaftpd -y</span><br><span class="line">sudo apt install lftp -y</span><br><span class="line">sudo apt install nfs-kernel-server -y</span><br></pre></td></tr></table></figure><h2 id="vim插件配置脚本">vim插件配置脚本</h2><p>【vim配置推荐 - ma6174】https://github.com/ma6174/vim</p><p>1、安装脚本下载：wget 47.93.11.51:88/install_vim.sh</p><p>2、执行脚本：bash install_vim.sh</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This script will install and configure vim and zsh automatic.&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The time this takes is related to the network conditions, please wait patiently.&quot;</span></span><br><span class="line"><span class="keyword">if</span> [[ `<span class="built_in">whoami</span>` == <span class="string">&quot;root&quot;</span> ]];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[31mYou are  running this script with Root\033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[31mGenerally, we do not recommend using root for programming or directly controlling your Linux OS, especially when you are a beginner \033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[31mSo, There is no necessary for you to configure with root.&quot;</span></span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">&quot;Do you really want to do this?[N/y]&quot;</span> choice</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$&#123;choice&#125;</span> != y ]];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Bye.&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">which</span> apt-get &gt;/dev/null; <span class="keyword">then</span></span><br><span class="line">sudo apt-get install -y vim vim-gnome ctags xclip astyle python-setuptools python-dev git wget</span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">which</span> yum &gt;/dev/null; <span class="keyword">then</span></span><br><span class="line">sudo yum install -y gcc vim git ctags xclip astyle python-setuptools python-devel wget</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##Add HomeBrew support on  Mac OS</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">which</span> brew &gt;/dev/null;<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;You are using HomeBrew tool&quot;</span></span><br><span class="line">    brew install vim ctags git astyle</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">sudo easy_install -ZU autopep8 </span><br><span class="line">sudo <span class="built_in">ln</span> -s /usr/bin/ctags /usr/local/bin/ctags</span><br><span class="line"><span class="built_in">rm</span> -rf ~/vim* 2&gt;&amp;1 &gt;/dev/null</span><br><span class="line"><span class="built_in">rm</span> -rf ~/.vim* 2&gt;&amp;1 &gt;/dev/null</span><br><span class="line"><span class="built_in">mv</span> -f ~/vim ~/vim_old</span><br><span class="line"><span class="built_in">cd</span> ~/ &amp;&amp; git <span class="built_in">clone</span> https://gitee.com/suyelu/vim.git</span><br><span class="line"><span class="built_in">mv</span> -f ~/.vim ~/.vim_old 2&gt;&amp;1 &gt;/dev/null</span><br><span class="line"><span class="built_in">mv</span> -f ~/vim ~/.vim 2&gt;&amp;1 &gt;/dev/null</span><br><span class="line"><span class="built_in">mv</span> -f ~/.vimrc ~/.vimrc_old 2&gt;&amp;1 &gt;/dev/null</span><br><span class="line"><span class="built_in">mv</span> -f ~/.vim/.vimrc ~/ </span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/suyelu/vundle.git ~/.vim/bundle/vundle</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;程序正在自动安装相应插件&quot;</span> &gt; kaikeba</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;command-t插件需要等待时间较长，不要担心&quot;</span> &gt;&gt; kaikeba</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;切勿强制退出该界面，否则会导致错误，需重新配置&quot;</span> &gt;&gt; kaikeba</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;安装完毕将自动退出&quot;</span> &gt;&gt; kaikeba</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;请耐心等待&quot;</span> &gt;&gt; kaikeba</span><br><span class="line">vim kaikeba -c <span class="string">&quot;BundleInstall&quot;</span> -c <span class="string">&quot;q&quot;</span> -c <span class="string">&quot;q&quot;</span></span><br><span class="line"><span class="built_in">rm</span> kaikeba</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;安装完成&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="centos配置">centos配置</h2><h3 id="最小安装">最小安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#yum更新后面没有包名是更新所有，有包名就只更新指定的</span></span><br><span class="line">yum update -y</span><br><span class="line"><span class="comment">#安装Tab补全</span></span><br><span class="line">yum -y install bash-completion</span><br><span class="line"><span class="comment">#安装wget</span></span><br><span class="line">yum install -y wget</span><br><span class="line"><span class="comment">#安装vim</span></span><br><span class="line">yum -install -y vim-enhanced</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改主机名">修改主机名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="nfs">nfs</h3><p>1&gt; 安装nfs apt-get install nfs<em> yum install nfs</em> 2&gt; 配置 /etc/exports 添加如下一行 /filesystem <em>(rw) 3&gt; 重启nfs服务 /etc/init.d/nfs restart 4&gt; 查看配置是否成功 [root@localhost filesystem]# showmount -e 192.168.0.254 Export list for 192.168.0.254: /ken </em> /tools <em> /homework </em> /filesystem *</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统编程</title>
      <link href="/2022/08/29/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/08/29/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章">第一章</h2><p>Linux系统： “所见皆文件”</p><p>Linux系统目录：</p><pre><code>bin：存放二进制可执行文件boot：存放开机启动程序dev：存放设备文件： 字符设备、块设备home：存放普通用户etc：用户信息和系统配置文件 passwd、grouplib：库文件：libc.so.6root：管理员宿主目录（家目录）usr：用户资源管理目录</code></pre><p>Linux系统文件类型： 7/8 种</p><pre><code>普通文件：-目录文件：d字符设备文件：c块设备文件：b软连接：l管道文件：p套接字：s未知文件。</code></pre><p>软连接：快捷方式</p><pre><code>为保证软连接可以任意搬移， 创建时务必对源文件使用 绝对路径。</code></pre><p>硬链接：</p><pre><code>ln file  file.hard操作系统给每一个文件赋予唯一的 inode，当有相同inode的文件存在时，彼此同步。删除时，只将硬链接计数减一。减为0时，inode 被释放。</code></pre><p>创建用户：</p><pre><code>sudo adduser 新用户名       --- useradd</code></pre><p>修改文件所属用户：</p><pre><code>sudo chown 新用户名 待修改文件。sudo chown wangwu a.c</code></pre><p>删除用户： sudo deluser 用户名</p><p>创建用户组： sudo addgroup 新组名</p><p>修改文件所属用户组：</p><pre><code>sudo chgrp 新用户组名 待修改文件。sudo chgrp g88 a.c</code></pre><p>删除组： sudo delgroup 用户组名</p><p>使用chown 一次修改所有者和所属组：</p><pre><code>sudo chown 所有者：所属组  待操作文件。</code></pre><p>find命令：找文件</p><pre><code>-type 按文件类型搜索  d/p/s/c/b/l/ f:文件-name 按文件名搜索    find ./ -name &quot;*file*.jpg&quot;-maxdepth 指定搜索深度。应作为第一个参数出现。    find ./ -maxdepth 1 -name &quot;*file*.jpg&quot;-size 按文件大小搜索. 单位：k、M、G    find /home/itcast -size +20M -size -50M-atime、mtime、ctime 天  amin、mmin、cmin 分钟。-exec：将find搜索的结果集执行某一指定命令。    find /usr/ -name &#39;*tmp*&#39; -exec ls -ld &#123;&#125; \;-ok: 以交互式的方式 将find搜索的结果集执行某一指定命令-xargs：将find搜索的结果集执行某一指定命令。  当结果集数量过大时，可以分片映射。    find /usr/ -name &#39;*tmp*&#39; | xargs ls -ld -print0：    find /usr/ -name &#39;*tmp*&#39; -print0 | xargs  -0 ls -ld </code></pre><p>grep命令：找文件内容</p><pre><code>grep -r &#39;copy&#39; ./ -n    -n参数：:显示行号ps aux | grep &#39;cupsd&#39;  -- 检索进程结果集。</code></pre><p>软件安装：</p><pre><code>1. 联网2. 更新软件资源列表到本地。  sudo apt-get update3. 安装 sudo apt-get install 软件名4. 卸载   sudo apt-get remove 软件名5. 使用软件包（.deb） 安装：  sudo dpkg -i 安装包名。</code></pre><p>tar压缩：</p><pre><code>1. tar -zcvf 要生成的压缩包名   压缩材料。    tar zcvf  test.tar.gz  file1 dir2   使用 gzip方式压缩。    tar jcvf  test.tar.gz  file1 dir2   使用 bzip2方式压缩。</code></pre><p>tar解压：</p><pre><code>将 压缩命令中的 c --&gt; x    tar zxvf  test.tar.gz   使用 gzip方式解压缩。    tar jxvf  test.tar.gz   使用 bzip2方式解压缩。</code></pre><p>rar压缩：</p><pre><code>rar a -r  压缩包名（带.rar后缀） 压缩材料。    rar a -r testrar.rar    stdio.h test2.mp3</code></pre><p>rar解压：</p><pre><code>unrar x 压缩包名（带.rar后缀）</code></pre><p>zip压缩：</p><pre><code>zip -r 压缩包名（带.zip后缀） 压缩材料。    zip -r testzip.zip dir stdio.h test2.mp3</code></pre><p>zip解压： unzip 压缩包名（带.zip后缀）</p><pre><code>    unzip  testzip.zip </code></pre><h2 id="第二章">第二章</h2><p>跳转到指定行：</p><pre><code>1. 88G （命令模式）2. :88  (末行模式)</code></pre><p>跳转文件首：</p><pre><code>gg （命令模式）</code></pre><p>跳转文件尾：</p><pre><code>G（命令模式）</code></pre><p>自动格式化程序：</p><pre><code>gg=G（命令模式）</code></pre><p>大括号对应：</p><pre><code>% （命令模式）</code></pre><p>光标移至行首：</p><pre><code>0 （命令模式）执行结束，工作模式不变。</code></pre><p>光标移至行尾：</p><pre><code>$ （命令模式）执行结束，工作模式不变。</code></pre><p>删除单个字符：</p><pre><code>x （命令模式）执行结束，工作模式不变。</code></pre><p>替换单个字符：</p><pre><code>将待替换的字符用光标选中， r （命令模式），再按欲替换的字符</code></pre><p>删除一个单词：</p><pre><code>dw（命令模式）光标置于单词的首字母进行操作。</code></pre><p>删除光标至行尾：</p><pre><code>D 或者 d$（命令模式）</code></pre><p>删除光标至行首：</p><pre><code>d0 （命令模式）</code></pre><p>删除指定区域：</p><pre><code>按 V （命令模式）切换为 “可视模式”，使用 hjkl挪移光标来选中待删除区域。  按 d 删除该区域数据。</code></pre><p>删除指定1行：</p><pre><code>在光标所在行，按 dd （命令模式）</code></pre><p>删除指定N行：</p><pre><code>在光标所待删除首行，按 Ndd （命令模式）</code></pre><p>复制一行：</p><pre><code>yy</code></pre><p>粘贴： p：向后、P：向前。</p><p>查找： 1. 找 设想 内容：</p><pre><code>    命令模式下， 按 “/” 输入欲搜索关键字，回车。使用 n 检索下一个。2. 找 看到的内容：    命令模式下，将光标置于单词任意一个字符上，按 “*”/ “#” </code></pre><p>单行替换：</p><pre><code>将光标置于待替换行上， 进入末行模式，输入 :s /原数据/新数据</code></pre><p>通篇替换：</p><pre><code>末行模式， :%s /原数据/新数据/g   g:不加，只替换每行首个。   sed </code></pre><p>指定行的替换：</p><pre><code>末行模式， :起始行号，终止行号s /原数据/新数据/g   g:不加，只替换每行首个。    :29,35s /printf/println/g</code></pre><p>撤销、反撤销：</p><pre><code>u、ctrl+r（命令模式）</code></pre><p>分屏： sp：横屏分。 Ctrl+ww 切换。</p><pre><code>vsp：竖屏分。Ctrl+ww 切换。</code></pre><p>跳转至 man 手册：</p><pre><code>将光标置于待查看函数单词上，使用 K（命令模式）跳转。 指定卷， nK</code></pre><p>查看宏定义：</p><pre><code>将光标置于待查看宏定义单词上，使用 [d 查看定义语句。</code></pre><p>在末行模式执行shell命令：</p><pre><code>:!命令        :! ls -l </code></pre><hr /><p>gcc编译：</p><pre><code>4步骤： 预处理、编译、汇编、连接。-I： 指定头文件所在目录位置。-c： 只做预处理、编译、汇编。得到 二进制 文件！！！-g： 编译时添加调试语句。 主要支持 gdb 调试。-Wall： 显示所有警告信息。-D： 向程序中“动态”注册宏定义。   #define NAME VALUE</code></pre><p>静态库制作及使用步骤：</p><pre><code>1. 将 .c 生成 .o 文件    gcc -c add.c -o add.o2. 使用 ar 工具制作静态库    ar rcs  lib库名.a  add.o sub.o div.o3. 编译静态库到可执行文件中：    gcc test.c lib库名.a -o a.out</code></pre><p>头文件守卫：防止头文件被重复包含</p><pre><code>#ifndef _HEAD_H_#define _HEAD_H_......#endif</code></pre><p>动态库制作及使用：</p><pre><code>1.  将 .c 生成 .o 文件， （生成与位置无关的代码 -fPIC）    gcc -c add.c -o add.o -fPIC2. 使用 gcc -shared 制作动态库    gcc -shared -o lib库名.so add.o sub.o div.o3. 编译可执行程序时，指定所使用的动态库。  -l：指定库名(去掉lib前缀和.so后缀)  -L：指定库路径。    gcc test.c -o a.out -lmymath -L./lib4. 运行可以执行程序 ./a.out 出错！！！！ --- ldd a.out --&gt; &quot;not found&quot;    error while loading shared libraries: libxxx.so: cannot open shared object file: No such file or directory    原因：        链接器：    工作于链接阶段， 工作时需要 -l 和 -L        动态链接器：  工作于程序运行阶段，工作时需要提供动态库所在目录位置。    解决方式：                       【1】 通过环境变量：  export LD_LIBRARY_PATH=动态库路径            ./a.out 成功！！！  （临时生效， 终端重启环境变量失效）        【2】 永久生效： 写入 终端配置文件。  .bashrc  建议使用绝对路径。            1) vi ~/.bashrc            2) 写入 export LD_LIBRARY_PATH=动态库路径  保存            3）. .bashrc/  source .bashrc / 重启 终端  ---&gt; 让修改后的.bashrc生效            4）./a.out 成功！！！         【3】 拷贝自定义动态库 到 /lib (标准C库所在目录位置)        【4】 配置文件法            1）sudo vi /etc/ld.so.conf            2) 写入 动态库绝对路径  保存            3）sudo ldconfig -v  使配置文件生效。            4）./a.out 成功！！！--- 使用 ldd  a.out 查看</code></pre><h2 id="第三章">第三章</h2><p>gdb调试工具： 大前提：程序是你自己写的。 ---逻辑错误</p><p>基础指令： -g：使用该参数编译可以执行文件，得到调试表。</p><pre><code>gdb ./a.outlist： list 1  列出源码。根据源码指定 行号设置断点。b：  b 20    在20行位置设置断点。run/r:  运行程序n/next: 下一条指令（会越过函数）s/step: 下一条指令（会进入函数）p/print：p i  查看变量的值。continue：继续执行断点后续指令。finish：结束当前函数调用。 quit：退出gdb当前调试。</code></pre><p>其他指令：</p><pre><code>run：使用run查找段错误出现位置。set args： 设置main函数命令行参数 （在 start、run 之前）run 字串1 字串2 ...: 设置main函数命令行参数info b: 查看断点信息表b 20 if i = 5：  设置条件断点。ptype：查看变量类型。bt：列出当前程序正存活着的栈帧。frame： 根据栈帧编号，切换栈帧。display：设置跟踪变量undisplay：取消设置跟踪变量。 使用跟踪变量的编号。</code></pre><p>makefile： 管理项目。</p><pre><code>命名：makefile  Makefile  --- make 命令1 个规则：    目标：依赖条件    （一个tab缩进）命令    1. 目标的时间必须晚于依赖条件的时间，否则，更新目标    2. 依赖条件如果不存在，找寻新的规则去产生依赖条件。ALL：指定 makefile 的终极目标。2 个函数：    src = $(wildcard ./*.c): 匹配当前工作目录下的所有.c 文件。将文件名组成列表，赋值给变量 src。  src = add.c sub.c div1.c     obj = $(patsubst %.c, %.o, $(src)): 将参数3中，包含参数1的部分，替换为参数2。 obj = add.o sub.o div1.oclean:  (没有依赖)    -rm -rf $(obj) a.out    “-”：作用是，删除不存在文件时，不报错。顺序执行结束。3 个自动变量：    $@: 在规则的命令中，表示规则中的目标。    $^: 在规则的命令中，表示所有依赖条件。    $&lt;: 在规则的命令中，表示第一个依赖条件。如果将该变量应用在模式规则中，它可将依赖条件列表中的依赖依次取出，套用模式规则。模式规则：    %.o:%.c       gcc -c $&lt; -o %@静态模式规则：    $(obj):%.o:%.c       gcc -c $&lt; -o %@  伪目标：    .PHONY: clean ALL参数：    -n：模拟执行make、make clean 命令。    -f：指定文件执行 make 命令。              xxxx.mk作业：编写一个 makefile 可以将其所在目录下的所有独立 .c 文件编译生成同名可执行文件。</code></pre><h2 id="第四章">第四章</h2><p>open函数：</p><pre><code>int open(char *pathname, int flags) #include &lt;unistd.h&gt;参数：    pathname: 欲打开的文件路径名    flags：文件打开方式：   #include &lt;fcntl.h&gt;        O_RDONLY|O_WRONLY|O_RDWR    O_CREAT|O_APPEND|O_TRUNC|O_EXCL|O_NONBLOCK ....返回值：    成功： 打开文件所得到对应的 文件描述符（整数）    失败： -1， 设置errno int open(char *pathname, int flags， mode_t mode)        123  775    参数：    pathname: 欲打开的文件路径名    flags：文件打开方式：   O_RDONLY|O_WRONLY|O_RDWR    O_CREAT|O_APPEND|O_TRUNC|O_EXCL|O_NONBLOCK ....    mode: 参数3使用的前提， 参2指定了 O_CREAT。  取值8进制数，用来描述文件的 访问权限。 rwx    0664        创建文件最终权限 = mode &amp; ~umask返回值：    成功： 打开文件所得到对应的 文件描述符（整数）    失败： -1， 设置errno </code></pre><p>close函数：</p><pre><code>int close(int fd);</code></pre><p>错误处理函数： 与 errno 相关。</p><pre><code>printf(&quot;xxx error: %d\n&quot;, errno);char *strerror(int errnum);    printf(&quot;xxx error: %s\n&quot;, strerror(errno));void perror(const char *s);    perror(&quot;open error&quot;);</code></pre><p>read函数：</p><pre><code>ssize_t read(int fd, void *buf, size_t count);参数：    fd：文件描述符    buf：存数据的缓冲区    count：缓冲区大小返回值：    0：读到文件末尾。    成功； &gt; 0 读到的字节数。    失败： -1， 设置 errno    -1： 并且 errno = EAGIN 或 EWOULDBLOCK, 说明不是read失败，而是read在以非阻塞方式读一个设备文件（网络文件），并且文件无数据。</code></pre><p>write函数：</p><pre><code>ssize_t write(int fd, const void *buf, size_t count);参数：    fd：文件描述符    buf：待写出数据的缓冲区    count：数据大小返回值：    成功； 写入的字节数。    失败： -1， 设置 errno</code></pre><p>文件描述符：</p><pre><code>PCB进程控制块：本质 结构体。成员：文件描述符表。文件描述符：0/1/2/3/4。。。。/1023     表中可用的最小的。0 - STDIN_FILENO1 - STDOUT_FILENO2 - STDERR_FILENO</code></pre><p>阻塞、非阻塞： 是设备文件、网络文件的属性。</p><pre><code>产生阻塞的场景。 读设备文件。读网络文件。（读常规文件无阻塞概念。）/dev/tty -- 终端文件。open(&quot;/dev/tty&quot;, O_RDWR|O_NONBLOCK) --- 设置 /dev/tty 非阻塞状态。(默认为阻塞状态)</code></pre><p>fcntl： int (int fd, int cmd, ...)</p><pre><code>int flgs = fcntl(fd,  F_GETFL);flgs |= O_NONBLOCKfcntl(fd,  F_SETFL, flgs);获取文件状态： F_GETFL设置文件状态： F_SETFL</code></pre><p>lseek函数：</p><pre><code>off_t lseek(int fd, off_t offset, int whence);参数：    fd：文件描述符    offset： 偏移量    whence：起始偏移位置： SEEK_SET/SEEK_CUR/SEEK_END返回值：    成功：较起始位置偏移量    失败：-1 errno应用场景：       1. 文件的“读”、“写”使用同一偏移位置。    2. 使用lseek获取文件大小    3. 使用lseek拓展文件大小：要想使文件大小真正拓展，必须引起IO操作。        使用 truncate 函数，直接拓展文件。  int ret = truncate(&quot;dict.cp&quot;, 250);</code></pre><p>传入参数：</p><pre><code>1. 指针作为函数参数。2. 同常有const关键字修饰。3. 指针指向有效区域， 在函数内部做读操作。</code></pre><p>传出参数：</p><pre><code>1. 指针作为函数参数。2. 在函数调用之前，指针指向的空间可以无意义，但必须有效。3. 在函数内部，做写操作。4。函数调用结束后，充当函数返回值。</code></pre><p>传入传出参数：</p><pre><code>1. 指针作为函数参数。2. 在函数调用之前，指针指向的空间有实际意义。3. 在函数内部，先做读操作，后做写操作。4. 函数调用结束后，充当函数返回值。</code></pre><p>void aaa();</p><p>int aaa(int <em>p, struct stat </em>p2, strcut student *p3);</p><p>bbb() { aaa(); }</p><p>stat/lstat 函数：</p><pre><code>int stat(const char *path, struct stat *buf);参数：    path： 文件路径    buf：（传出参数） 存放文件属性。返回值：    成功： 0    失败： -1 errno获取文件大小： buf.st_size获取文件类型： buf.st_mode获取文件权限： buf.st_mode符号穿透：stat会。lstat不会。</code></pre><p>link/unlink:</p><pre><code>隐式回收。</code></pre><p>目录操作函数：</p><pre><code>DIR * opendir(char *name);int closedir(DIR *dp);struct dirent *readdir(DIR * dp);    struct dirent &#123;        inode        char dname[256];    &#125;</code></pre><h2 id="第五章">第五章</h2><pre><code>./a.out ls.c  /home/itcast/28_Linux  ./abc/        /home/itcast/28_Linux/testdir/</code></pre><p>递归遍历目录：ls-R.c</p><pre><code>1. 判断命令行参数，获取用户要查询的目录名。 int argc, char *argv[1]    argc == 1  --&gt; ./2. 判断用户指定的是否是目录。 stat  S_ISDIR(); --&gt; 封装函数 isFile() &#123;   &#125;3. 读目录： read_dir() &#123;     opendir（dir）    while （readdir（））&#123;        普通文件，直接打印        目录：            拼接目录访问绝对路径。sprintf(path, &quot;%s/%s&quot;, dir, d_name)             递归调用自己。--》 opendir（path） readdir closedir    &#125;    closedir（）    &#125;    read_dir() --&gt; isFile() ---&gt; read_dir()</code></pre><p>dup 和 dup2：</p><pre><code>int dup(int oldfd);     文件描述符复制。    oldfd: 已有文件描述符    返回：新文件描述符。int dup2(int oldfd, int newfd); 文件描述符复制。重定向。</code></pre><p>fcntl 函数实现 dup：</p><pre><code>int fcntl(int fd, int cmd, ....)cmd: F_DUPFD参3:     被占用的，返回最小可用的。    未被占用的， 返回=该值的文件描述符。</code></pre><p>进程： 程序：死的。只占用磁盘空间。 ——剧本。</p><pre><code>进程；活的。运行起来的程序。占用内存、cpu等系统资源。    ——戏。</code></pre><p>PCB进程控制块：</p><pre><code>进程id文件描述符表进程状态：   初始态、就绪态、运行态、挂起态、终止态。进程工作目录位置*umask掩码 信号相关信息资源。用户id和组id</code></pre><p>fork函数：</p><pre><code>pid_t fork(void)创建子进程。父子进程各自返回。父进程返回子进程pid。 子进程返回 0.getpid();getppid();循环创建N个子进程模型。 每个子进程标识自己的身份。</code></pre><p>父子进程相同：</p><pre><code>刚fork后。 data段、text段、堆、栈、环境变量、全局变量、宿主目录位置、进程工作目录位置、信号处理方式</code></pre><p>父子进程不同：</p><pre><code>进程id、返回值、各自的父进程、进程创建时间、闹钟、未决信号集</code></pre><p>父子进程共享：</p><pre><code>读时共享、写时复制。———————— 全局变量。1. 文件描述符 2. mmap映射区。</code></pre><h2 id="第六章">第六章</h2><p>gdb调试：</p><pre><code>设置父进程调试路径：set follow-fork-mode parent (默认)设置子进程调试路径：set follow-fork-mode child</code></pre><p>exec函数族：</p><pre><code>使进程执行某一程序。成功无返回值，失败返回 -1int execlp(const char *file, const char *arg, ...);     借助 PATH 环境变量找寻待执行程序    参1： 程序名    参2： argv0    参3： argv1    ...： argvN    哨兵：NULLint execl(const char *path, const char *arg, ...);      自己指定待执行程序路径。int execvp();</code></pre><p>ps ajx --&gt; pid ppid gid sid</p><p>孤儿进程：</p><pre><code>父进程先于子进终止，子进程沦为“孤儿进程”，会被 init 进程领养。</code></pre><p>僵尸进程：</p><pre><code>子进程终止，父进程尚未对子进程进行回收，在此期间，子进程为“僵尸进程”。  kill 对其无效。</code></pre><p>wait函数： 回收子进程退出资源， 阻塞回收任意一个。</p><pre><code>pid_t wait(int *status)参数：（传出） 回收进程的状态。返回值：成功： 回收进程的pid    失败： -1， errno函数作用1：  阻塞等待子进程退出函数作用2：  清理子进程残留在内核的 pcb 资源函数作用3：  通过传出参数，得到子进程结束状态</code></pre><p>​<br />​ 获取子进程正常终止值： ​<br />WIFEXITED(status) --》 为真 --》调用 WEXITSTATUS(status) --》 得到 子进程 退出值。</p><pre><code>获取导致子进程异常终止信号：    WIFSIGNALED(status) --》 为真 --》调用 WTERMSIG(status) --》 得到 导致子进程异常终止的信号编号。</code></pre><p>waitpid函数： 指定某一个进程进行回收。可以设置非阻塞。 waitpid(-1, &amp;status, 0) == wait(&amp;status);</p><pre><code>pid_t waitpid(pid_t pid, int *status, int options)参数：    pid：指定回收某一个子进程pid        &gt; 0: 待回收的子进程pid        -1：任意子进程        0：同组的子进程。    status：（传出） 回收进程的状态。    options：WNOHANG 指定回收方式为，非阻塞。返回值：    &gt; 0 : 表成功回收的子进程 pid    0 : 函数调用时， 参3 指定了WNOHANG， 并且，没有子进程结束。    -1: 失败。errno</code></pre><p>总结：</p><pre><code>wait、waitpid    一次调用，回收一个子进程。        想回收多个。while </code></pre><p>===========================</p><p>进程间通信的常用方式，特征：</p><pre><code>管道：简单信号：开销小mmap映射：非血缘关系进程间socket（本地套接字）：稳定</code></pre><p>管道：</p><pre><code>实现原理： 内核借助环形队列机制，使用内核缓冲区实现。特质； 1. 伪文件    2. 管道中的数据只能一次读取。    3. 数据在管道中，只能单向流动。局限性：1. 自己写，不能自己读。    2. 数据不可以反复读。    3. 半双工通信。    4. 血缘关系进程间可用。</code></pre><p>pipe函数： 创建，并打开管道。</p><pre><code>int pipe(int fd[2]);参数： fd[0]: 读端。    fd[1]: 写端。返回值： 成功： 0     失败： -1 errno</code></pre><p>管道的读写行为：</p><pre><code>读管道：    1. 管道有数据，read返回实际读到的字节数。    2. 管道无数据：   1）无写端，read返回0 （类似读到文件尾）            2）有写端，read阻塞等待。写管道：    1. 无读端， 异常终止。 （SIGPIPE导致的）    2. 有读端： 1） 管道已满， 阻塞等待            2） 管道未满， 返回写出的字节个数。</code></pre><h2 id="第七章">第七章</h2><p>pipe管道： 用于有血缘关系的进程间通信。 ps aux | grep ls | wc -l</p><pre><code>父子进程间通信：兄弟进程间通信：</code></pre><p>fifo管道：可以用于无血缘关系的进程间通信。</p><pre><code>命名管道：  mkfifo 无血缘关系进程间通信：    读端，open fifo O_RDONLY    写端，open fifo O_WRONLY</code></pre><p>文件实现进程间通信：</p><pre><code>打开的文件是内核中的一块缓冲区。多个无血缘关系的进程，可以同时访问该文件。</code></pre><p>共享内存映射:</p><p>void <em>mmap(void </em>addr, size_t length, int prot, int flags, int fd, off_t offset); 创建共享内存映射</p><pre><code>参数：    addr：   指定映射区的首地址。通常传NULL，表示让系统自动分配    length：共享内存映射区的大小。（&lt;= 文件的实际大小）    prot：   共享内存映射区的读写属性。PROT_READ、PROT_WRITE、PROT_READ|PROT_WRITE    flags：  标注共享内存的共享属性。MAP_SHARED、MAP_PRIVATE    fd: 用于创建共享内存映射区的那个文件的 文件描述符。    offset：默认0，表示映射文件全部。偏移位置。需是 4k 的整数倍。返回值：    成功：映射区的首地址。    失败：MAP_FAILED (void*(-1))， errno</code></pre><p>int munmap(void *addr, size_t length); 释放映射区。</p><pre><code>addr：mmap 的返回值length：大小</code></pre><p>使用注意事项：</p><pre><code>1. 用于创建映射区的文件大小为 0，实际指定非0大小创建映射区，出 “总线错误”。2. 用于创建映射区的文件大小为 0，实际制定0大小创建映射区， 出 “无效参数”。3. 用于创建映射区的文件读写属性为，只读。映射区属性为 读、写。 出 “无效参数”。4. 创建映射区，需要read权限。当访问权限指定为 “共享”MAP_SHARED是， mmap的读写权限，应该 &lt;=文件的open权限。   只写不行。5. 文件描述符fd，在mmap创建映射区完成即可关闭。后续访问文件，用 地址访问。6. offset 必须是 4096的整数倍。（MMU 映射的最小单位 4k ）7. 对申请的映射区内存，不能越界访问。 8. munmap用于释放的 地址，必须是mmap申请返回的地址。9. 映射区访问权限为 “私有”MAP_PRIVATE, 对内存所做的所有修改，只在内存有效，不会反应到物理磁盘上。10.  映射区访问权限为 “私有”MAP_PRIVATE, 只需要open文件时，有读权限，用于创建映射区即可。</code></pre><p>mmap函数的保险调用方式：</p><pre><code>1. fd = open（&quot;文件名&quot;， O_RDWR）;2. mmap(NULL, 有效文件大小， PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);</code></pre><p>父子进程使用 mmap 进程间通信：</p><pre><code>父进程 先 创建映射区。 open（ O_RDWR） mmap( MAP_SHARED );指定 MAP_SHARED 权限fork() 创建子进程。一个进程读， 另外一个进程写。</code></pre><p>无血缘关系进程间 mmap 通信： 【会写】</p><pre><code>两个进程 打开同一个文件，创建映射区。指定flags 为 MAP_SHARED。一个进程写入，另外一个进程读出。【注意】：无血缘关系进程间通信。mmap：数据可以重复读取。                fifo：数据只能一次读取。</code></pre><p>匿名映射：只能用于 血缘关系进程间通信。</p><pre><code>p = (int *)mmap(NULL, 40, PROT_READ|PROT_WRITE, MAP_SHARED|MAP_ANONYMOUS, -1, 0);</code></pre><h2 id="第八章">第八章</h2><p>信号共性：</p><pre><code>简单、不能携带大量信息、满足条件才发送。</code></pre><p>信号的特质：</p><pre><code>信号是软件层面上的“中断”。一旦信号产生，无论程序执行到什么位置，必须立即停止运行，处理信号，处理结束，再继续执行后续指令。所有信号的产生及处理全部都是由【内核】完成的。</code></pre><p>信号相关的概念：</p><pre><code>产生信号：    1. 按键产生    2. 系统调用产生    3. 软件条件产生    4. 硬件异常产生    5. 命令产生概念：    未决：产生与递达之间状态。      递达：产生并且送达到进程。直接被内核处理掉。    信号处理方式： 执行默认处理动作、忽略、捕捉（自定义）    阻塞信号集（信号屏蔽字）： 本质：位图。用来记录信号的屏蔽状态。一旦被屏蔽的信号，在解除屏蔽前，一直处于未决态。    未决信号集：本质：位图。用来记录信号的处理状态。该信号集中的信号，表示，已经产生，但尚未被处理。</code></pre><p>信号4要素：</p><pre><code>信号使用之前，应先确定其4要素，而后再用！！！编号、名称、对应事件、默认处理动作。</code></pre><p>kill命令 和 kill函数：</p><pre><code>int kill（pid_t pid, int signum）参数：    pid:    &gt; 0:发送信号给指定进程        = 0：发送信号给跟调用kill函数的那个进程处于同一进程组的进程。        &lt; -1: 取绝对值，发送信号给该绝对值所对应的进程组的所有组员。        = -1：发送信号给，有权限发送的所有进程。    signum：待发送的信号返回值：    成功： 0    失败： -1 errno</code></pre><p>alarm 函数：使用自然计时法。</p><pre><code>定时发送SIGALRM给当前进程。unsigned int alarm(unsigned int seconds);    seconds：定时秒数    返回值：上次定时剩余时间。        无错误现象。    alarm（0）； 取消闹钟。time 命令 ： 查看程序执行时间。   实际时间 = 用户时间 + 内核时间 + 等待时间。  --》 优化瓶颈 IO</code></pre><p>setitimer函数：</p><pre><code>int setitimer(int which, const struct itimerval *new_value, struct itimerval *old_value);参数：    which：  ITIMER_REAL： 采用自然计时。 ——&gt; SIGALRM        ITIMER_VIRTUAL: 采用用户空间计时  ---&gt; SIGVTALRM        ITIMER_PROF: 采用内核+用户空间计时 ---&gt; SIGPROF        new_value：定时秒数               类型：struct itimerval &#123;                        struct timeval &#123;                            time_t      tv_sec;         /* seconds */                            suseconds_t tv_usec;        /* microseconds */                    &#125;it_interval;---&gt; 周期定时秒数                         struct timeval &#123;                            time_t      tv_sec;                                     suseconds_t tv_usec;                            &#125;it_value;  ---&gt; 第一次定时秒数                   &#125;;    old_value：传出参数，上次定时剩余时间。    e.g.        struct itimerval new_t;         struct itimerval old_t;         new_t.it_interval.tv_sec = 0;        new_t.it_interval.tv_usec = 0;        new_t.it_value.tv_sec = 1;        new_t.it_value.tv_usec = 0;        int ret = setitimer(&amp;new_t, &amp;old_t);  定时1秒返回值：    成功： 0    失败： -1 errno</code></pre><p>其他几个发信号函数：</p><pre><code>int raise(int sig);void abort(void);</code></pre><p>信号集操作函数：</p><pre><code>sigset_t set;  自定义信号集。sigemptyset(sigset_t *set); 清空信号集sigfillset(sigset_t *set);  全部置1sigaddset(sigset_t *set, int signum);   将一个信号添加到集合中sigdelset(sigset_t *set, int signum);   将一个信号从集合中移除sigismember（const sigset_t *set，int signum); 判断一个信号是否在集合中。 在--》1， 不在--》0</code></pre><p>设置信号屏蔽字和解除屏蔽：</p><pre><code>int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);    how:    SIG_BLOCK:  设置阻塞        SIG_UNBLOCK:    取消阻塞        SIG_SETMASK:    用自定义set替换mask。    set：    自定义set    oldset：旧有的 mask。</code></pre><p>查看未决信号集：</p><pre><code>int sigpending(sigset_t *set);    set： 传出的 未决信号集。</code></pre><p>【信号捕捉】：</p><pre><code>signal();【sigaction();】 重点！！！</code></pre><p>​</p><p>信号捕捉特性：</p><pre><code>1. 捕捉函数执行期间，信号屏蔽字 由 mask --&gt; sa_mask , 捕捉函数执行结束。 恢复回mask2. 捕捉函数执行期间，本信号自动被屏蔽(sa_flgs = 0).3. 捕捉函数执行期间，被屏蔽信号多次发送，解除屏蔽后只处理一次！</code></pre><p>借助信号完成 子进程回收。</p><h2 id="第九章">第九章</h2><p>守护进程：</p><pre><code>daemon进程。通常运行与操作系统后台，脱离控制终端。一般不与用户直接交互。周期性的等待某个事件发生或周期性执行某一动作。不受用户登录注销影响。通常采用以d结尾的命名方式。</code></pre><p>守护进程创建步骤：</p><pre><code>1. fork子进程，让父进程终止。2. 子进程调用 setsid() 创建新会话3. 通常根据需要，改变工作目录位置 chdir()， 防止目录被卸载。4. 通常根据需要，重设umask文件权限掩码，影响新文件的创建权限。  022 -- 755 0345 --- 432   r---wx-w-   4225. 通常根据需要，关闭/重定向 文件描述符6. 守护进程 业务逻辑。while（）</code></pre><p>=============================================================</p><p>线程概念：</p><pre><code>进程：有独立的 进程地址空间。有独立的pcb。 分配资源的最小单位。线程：有独立的pcb。没有独立的进程地址空间。 最小单位的执行。ps -Lf 进程id     ---&gt; 线程号。LWP  --》cpu 执行的最小单位。</code></pre><p>线程共享：</p><pre><code>独享 栈空间（内核栈、用户栈）共享 ./text./data ./rodataa ./bsss heap  ---&gt; 共享【全局变量】（errno）</code></pre><p>线程控制原语：</p><pre><code>pthread_t pthread_self(void);   获取线程id。 线程id是在进程地址空间内部，用来标识线程身份的id号。    返回值：本线程id检查出错返回：  线程中。    fprintf(stderr, &quot;xxx error: %s\n&quot;, strerror(ret));int pthread_create(pthread_t *tid, const pthread_attr_t *attr, void *(*start_rountn)(void *), void *arg); 创建子线程。    参1：传出参数，表新创建的子线程 id    参2：线程属性。传NULL表使用默认属性。    参3：子线程回调函数。创建成功，ptherad_create函数返回时，该函数会被自动调用。        参4：参3的参数。没有的话，传NULL    返回值：成功：0        失败：errno循环创建N个子线程：    for （i = 0； i &lt; 5; i++）        pthread_create(&amp;tid, NULL, tfn, (void *)i);   // 将 int 类型 i， 强转成 void *， 传参。    void pthread_exit(void *retval);  退出当前线程。    retval：退出值。 无退出值时，NULL    exit(); 退出当前进程。    return: 返回到调用者那里去。    pthread_exit(): 退出当前线程。int pthread_join(pthread_t thread, void **retval);  阻塞 回收线程。    thread: 待回收的线程id    retval：传出参数。 回收的那个线程的退出值。        线程异常借助，值为 -1。    返回值：成功：0        失败：errnoint pthread_detach(pthread_t thread);       设置线程分离    thread: 待分离的线程id</code></pre><p>​<br />​ 返回值：成功：0 ​<br />失败：errno</p><pre><code>int pthread_cancel(pthread_t thread);       杀死一个线程。  需要到达取消点（保存点）    thread: 待杀死的线程id        返回值：成功：0        失败：errno    如果，子线程没有到达取消点， 那么 pthread_cancel 无效。    我们可以在程序中，手动添加一个取消点。使用 pthread_testcancel();    成功被 pthread_cancel() 杀死的线程，返回 -1.使用pthead_join 回收。线程控制原语                  进程控制原语pthread_create()                fork();pthread_self()                  getpid();pthread_exit()                  exit();         / return pthread_join()                  wait()/waitpid()pthread_cancel()                kill()pthread_detach()</code></pre><p>线程属性：</p><pre><code>设置分离属性。pthread_attr_t attr     创建一个线程属性结构体变量pthread_attr_init(&amp;attr);   初始化线程属性pthread_attr_setdetachstate(&amp;attr,  PTHREAD_CREATE_DETACHED);       设置线程属性为 分离态pthread_create(&amp;tid, &amp;attr, tfn, NULL); 借助修改后的 设置线程属性 创建为分离态的新线程pthread_attr_destroy(&amp;attr);    销毁线程属性</code></pre><h2 id="第十章">第十章</h2><p>线程同步：</p><pre><code>协同步调，对公共区域数据按序访问。防止数据混乱，产生与时间有关的错误。</code></pre><p>锁的使用：</p><pre><code>建议锁！对公共数据进行保护。所有线程【应该】在访问公共数据前先拿锁再访问。但，锁本身不具备强制性。</code></pre><p>使用mutex(互斥量、互斥锁)一般步骤：</p><pre><code>pthread_mutex_t 类型。 1. pthread_mutex_t lock;  创建锁2  pthread_mutex_init; 初始化      13. pthread_mutex_lock;加锁        1-- --&gt; 04. 访问共享数据（stdout)       5. pthrad_mutext_unlock();解锁        0++ --&gt; 16. pthead_mutex_destroy；销毁锁初始化互斥量：    pthread_mutex_t mutex;    1. pthread_mutex_init(&amp;mutex, NULL);            动态初始化。    2. pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;   静态初始化。注意事项：    尽量保证锁的粒度， 越小越好。（访问共享数据前，加锁。访问结束【立即】解锁。）    互斥锁，本质是结构体。 我们可以看成整数。 初值为 1。（pthread_mutex_init() 函数调用成功。）    加锁： --操作， 阻塞线程。    解锁： ++操作， 换醒阻塞在锁上的线程。    try锁：尝试加锁，成功--。失败，返回。同时设置错误号 EBUSY</code></pre><p>restrict关键字：</p><pre><code>用来限定指针变量。被该关键字限定的指针变量所指向的内存操作，必须由本指针完成。</code></pre><p>【死锁】：</p><pre><code>是使用锁不恰当导致的现象：    1. 对一个锁反复lock。    2. 两个线程，各自持有一把锁，请求另一把。</code></pre><p>读写锁：</p><pre><code>锁只有一把。以读方式给数据加锁——读锁。以写方式给数据加锁——写锁。读共享，写独占。写锁优先级高。相较于互斥量而言，当读线程多的时候，提高访问效率pthread_rwlock_t  rwlock;pthread_rwlock_init(&amp;rwlock, NULL);pthread_rwlock_rdlock(&amp;rwlock);     trypthread_rwlock_wrlock(&amp;rwlock);     trypthread_rwlock_unlock(&amp;rwlock);pthread_rwlock_destroy(&amp;rwlock);</code></pre><p>条件变量：</p><pre><code>本身不是锁！  但是通常结合锁来使用。 mutexpthread_cond_t cond;初始化条件变量：    1. pthread_cond_init(&amp;cond, NULL);              动态初始化。    2. pthread_cond_t cond = PTHREAD_COND_INITIALIZER;  静态初始化。阻塞等待条件：    pthread_cond_wait(&amp;cond, &amp;mutex);    作用： 1） 阻塞等待条件变量满足        2） 解锁已经加锁成功的信号量 （相当于 pthread_mutex_unlock(&amp;mutex)）        3)  当条件满足，函数返回时，重新加锁信号量 （相当于， pthread_mutex_lock(&amp;mutex);）pthread_cond_signal(): 唤醒阻塞在条件变量上的 (至少)一个线程。pthread_cond_broadcast()： 唤醒阻塞在条件变量上的 所有线程。【要求，能够借助条件变量，完成生成者消费者】</code></pre><p>信号量：</p><pre><code>应用于线程、进程间同步。相当于 初始化值为 N 的互斥量。  N值，表示可以同时访问共享数据区的线程数。函数：    sem_t sem;  定义类型。    int sem_init(sem_t *sem, int pshared, unsigned int value);    参数：        sem： 信号量         pshared：    0： 用于线程间同步                                1： 用于进程间同步        value：N值。（指定同时访问的线程数）    sem_destroy();    sem_wait();     一次调用，做一次-- 操作， 当信号量的值为 0 时，再次 -- 就会阻塞。 （对比 pthread_mutex_lock）    sem_post();     一次调用，做一次++ 操作. 当信号量的值为 N 时, 再次 ++ 就会阻塞。（对比 pthread_mutex_unlock）</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美国商业大亨传奇</title>
      <link href="/2022/08/24/%E7%BE%8E%E5%9B%BD%E5%95%86%E4%B8%9A%E5%A4%A7%E4%BA%A8%E4%BC%A0%E5%A5%87/"/>
      <url>/2022/08/24/%E7%BE%8E%E5%9B%BD%E5%95%86%E4%B8%9A%E5%A4%A7%E4%BA%A8%E4%BC%A0%E5%A5%87/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d544aaeb9dab63a888c3ac8b61986f3828dfce677a1d05c6475cefc39e25c74f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 纪录片 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows</title>
      <link href="/2022/08/16/Windows/"/>
      <url>/2022/08/16/Windows/</url>
      
        <content type="html"><![CDATA[<h2 id="windows基础设置">1、Windows基础设置</h2><h3 id="d盘下新建目录">1、D盘下新建目录</h3><ul><li>Program Files</li><li>Program Files (x86)</li><li>GoogleDown</li><li>InstallationPackage</li></ul><h3 id="常用软件安装">2、常用软件安装</h3><ul><li>应用商店：SoftDownloader软件，现名：三点下载器；华为应用商店；联想应用商店</li><li>软件卸载软件：HiBitUninstaller-Portable 可注册表清理，系统还原，垃圾清理</li><li>压缩软件：RAR</li><li>截图软件：Snipaste 可将截图固定在屏幕上且置于其他应用窗口之上</li><li>影视播放软件：PotPlayer 该软件可以使用电视直播源播放电视台</li><li>录屏软件：Bandicam</li><li>记事本：Notepad++ 与系统自带差不多，优势就是可以打开更多格式的文件进行编辑；也可以安装一个VScode编辑器，支持多种格式文件编辑，占用内存小</li><li>文件版本管理软件：git 下载地址： https://git-scm.com/download</li></ul><h3 id="其他推荐软件">3、其他推荐软件</h3><ul><li><p>PDF阅读器：JisuPdf</p></li><li><p>思维导图：ioDraw-v2.0.1-win32</p></li><li><p>围棋AI：KaTrain ，Lizzieyzy GitHub开源</p></li><li><p>围棋摆谱软件：MultiGo</p></li><li><p>围棋死活题软件：围棋级位测试6000题</p></li><li><p>网盘：aDrive</p></li><li><p>Markdown编辑器：Typora（这个现在收费了，需要免费使用得安装旧版本）</p></li><li><p>杀毒软件：火绒</p></li><li><p>远程控制软件：向日葵 免登陆得安装旧版</p></li><li><p>微软常见运行库安装：MSVBCRTAIO</p></li><li><p>博客搭建环境：nodejs https://www.cnblogs.com/liuqiyun/p/8133904.html</p></li><li><p>野狐围棋：下载地址：https://foxwq.com/soft.html</p></li><li><p>B站视频下载：鼠鼠下载器（高清下载，支持批量下载）下载地址：https://dmd.moyu.moe</p><p>另一个下载器：DownKyi，下载地址：https://suo.yt/J2nWUrs</p><p>项目地址：https://github.com/leiurayer/downkyi</p><p>DownKyi不仅提供了解析下载，还有一个工具箱有一些水印去除之类的功能。</p></li><li><p>百度文库下载：小叶文库下载（下文软件获取公众号中的小白资源库中有安装包提供，可以下载VIP才能阅读的文章）</p></li></ul><h3 id="软件获取公众号">4、软件获取公众号</h3><ul><li>办公软件安装管家</li><li>火耳软件管家</li><li>软件安装管家</li><li>软件目录</li><li>软件科技汇</li><li>小白资源库 ：https://mp.weixin.qq.com/s/uHPpFebNyFWnPw7g9hwc_A</li></ul><h2 id="其他软件设置">2、其他软件设置</h2><h3 id="谷歌浏览器打开报信息错误">1、谷歌浏览器打开报信息错误</h3><p>处理方式：删除C:DataData文件即可；</p><p>可写一个bat脚本作为Google启动方式进行处理</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off#执行脚本时，dos窗口不显示执行命令</span><br><span class="line">#删除Web Data文件</span><br><span class="line"><span class="built_in">del</span> /q &quot;C:\Users\HASEE\AppData\Local\Google\Chrome\User Data\Default\Web Data&quot;</span><br><span class="line">#启动谷歌浏览器</span><br><span class="line"><span class="built_in">start</span> &quot;&quot; &quot;D:\Program Files\Google\Chrome\Application\chrome.exe&quot;</span><br></pre></td></tr></table></figure><h3 id="bat关机和重启命令">2、bat关机和重启命令</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">#运行时不显示dos窗口</span><br><span class="line"><span class="keyword">if</span> &quot;%<span class="number">1</span>&quot; == &quot;h&quot; <span class="keyword">goto</span> begin</span><br><span class="line">mshta vbscript:createobject(&quot;wscript.shell&quot;).run(&quot;&quot;&quot;%~nx0&quot;&quot; h&quot;,<span class="number">0</span>)(window.close)&amp;&amp;<span class="keyword">exit</span></span><br><span class="line">:begin</span><br><span class="line">#下面是要执行的命令</span><br><span class="line">slidetoshutdown#下拉关机命令</span><br><span class="line"></span><br><span class="line">shutdown -r -t <span class="number">1</span>#重启命令</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="非常用软件安装">3、非常用软件安装</h2><h3 id="手机投屏到电脑">1、手机投屏到电脑</h3><p>1、手机投屏到电脑软件（用于投屏）</p><p>软件下载地址：https://github.com/Genymobile/scrcpy （该软件支持无线投屏）</p><p>2、调试软件（用于电脑端操作手机）</p><p>软件下载：用bing国际版搜索 platform-tools 然后下载zip</p><p>3、安装， 上面两个下载解压后就得到platform-tools和scrcpy-win64-v1.24这两个文件夹，然后将这两个文件夹放到C:Files (x86)目录下，然后再将这两个文件夹的路径添加到环境变量里面。</p><p>4、手机端的设置，打开开发者选项，打开USB设置和USB(安全设置)。如果仅仅是投屏，电脑端不操作手机端的话，USB(安装设置)不需打开。</p><p>5、连上数据线，vin+r打开运行窗口，输入cmd后回车，然后输入scrcpy，手机就可以投屏到电脑。</p><p>6、安装该软件（Bluetooth Audio Receiver）就可以通过蓝牙将手机的声音投到电脑上。bing上搜索安装，win商店自带的软件。</p><h3 id="section">2、</h3><h2 id="一些临时想用的偏门设置">4、一些临时想用的偏门设置</h2><h3 id="系统于软件上的设置">1、系统于软件上的设置</h3><p>1、清除应用软件使用后的一些默认基础设置信息，(自己用到的就是想删除鼠鼠下载器里面的下载记录） ==》 在运行窗口里面输入：%AppData% 之后回车，然后找到对应应用程序的文件夹，将其删掉就行。</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python组件</title>
      <link href="/2022/08/15/Python%E7%BB%84%E4%BB%B6/"/>
      <url>/2022/08/15/Python%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="生成6位数字随机验证码">1. 生成6位数字随机验证码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">num_code</span>(<span class="params">length=<span class="number">6</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成长度为length的数字随机验证码</span></span><br><span class="line"><span class="string">    :param length: 验证码长度</span></span><br><span class="line"><span class="string">    :return: 验证码</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(random.choice(string.digits) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, length))</span><br></pre></td></tr></table></figure><h2 id="md5加密">2.md5加密</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># md5加密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_encrypt</span>(<span class="params">en_str</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用md5二次加密生成32位的字符串</span></span><br><span class="line"><span class="string">    :param en_str: 需要加密的字符串</span></span><br><span class="line"><span class="string">    :return: 加密后的字符串</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">   </span><br><span class="line">    md5 = hashlib.md5()  <span class="comment"># 使用MD5加密模式</span></span><br><span class="line">    md5.update(en_str.encode(<span class="string">&#x27;utf-8&#x27;</span>))  <span class="comment"># 将参数字符串传入</span></span><br><span class="line">    md5.update(md5.hexdigest().encode(<span class="string">&#x27;utf-8&#x27;</span>))  <span class="comment"># md5二次加密</span></span><br><span class="line">    <span class="keyword">return</span> md5.hexdigest()</span><br></pre></td></tr></table></figure><h2 id="生成唯一token">3. 生成唯一token</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span>  hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">only_token</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用md5加密uuid生成唯一的32位token</span></span><br><span class="line"><span class="string">    :return: 加密后的字符串</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">md5 = hashlib.md5()  <span class="comment"># 使用MD5加密模式</span></span><br><span class="line">md5.update(<span class="built_in">str</span>(uuid.uuid1()).encode(<span class="string">&#x27;utf-8&#x27;</span>))  </span><br><span class="line"><span class="keyword">return</span> md5.hexdigest()</span><br></pre></td></tr></table></figure><h2 id="发送手机验证码">4、发送手机验证码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#验证码管理表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthCode</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">10</span>,default=<span class="literal">None</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>,verbose_name=<span class="string">&#x27;姓名&#x27;</span>)</span><br><span class="line">    phone = models.CharField(max_length=<span class="number">11</span>, unique=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;手机号&#x27;</span>)</span><br><span class="line">    code = models.CharField(max_length=<span class="number">6</span>,verbose_name=<span class="string">&#x27;验证码&#x27;</span>)</span><br><span class="line">    purpose = models.IntegerField(default=<span class="number">0</span>,verbose_name=<span class="string">&#x27;用途:0-&gt;注册验证 1-&gt;找回密码 2-&gt;其它&#x27;</span>)</span><br><span class="line">    sendNum = models.IntegerField(default=<span class="number">0</span>,verbose_name=<span class="string">&#x27;发送次数&#x27;</span>)</span><br><span class="line">    isCanGet = models.BooleanField(default=<span class="number">0</span>,verbose_name=<span class="string">&#x27;0-&gt;可以获取,1-&gt;不可以获取&#x27;</span>)</span><br><span class="line">    recentlySendTime = models.DateTimeField(auto_now_add=<span class="literal">True</span>,verbose_name=<span class="string">&#x27;最近一次发送时间&#x27;</span>)</span><br><span class="line">    creation_time = models.DateTimeField(auto_now=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;创建时间&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        verbose_name = <span class="string">&#x27;手机验证码&#x27;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实现逻辑">实现逻辑</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http.client</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="comment"># 使用互亿无线</span></span><br><span class="line">host = <span class="string">&quot;106.ihuyi.com&quot;</span></span><br><span class="line">sms_send_uri = <span class="string">&quot;/webservice/sms.php?method=Submit&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看用户名 登录用户中心-&gt;验证码通知短信&gt;产品总览-&gt;API接口信息-&gt;APIID</span></span><br><span class="line">account = <span class="string">&quot;你的用户名&quot;</span></span><br><span class="line"><span class="comment"># 查看密码 登录用户中心-&gt;验证码通知短信&gt;产品总览-&gt;API接口信息-&gt;APIKEY</span></span><br><span class="line">password = <span class="string">&quot;你的密码&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_sms</span>(<span class="params">text, mobile</span>):</span><br><span class="line">    text = <span class="string">f&quot;您的验证码是：<span class="subst">&#123;text&#125;</span>。请不要把验证码泄露给其他人。&quot;</span></span><br><span class="line">    params = urllib.parse.urlencode(</span><br><span class="line">        &#123;<span class="string">&#x27;account&#x27;</span>: account, <span class="string">&#x27;password&#x27;</span>: password, <span class="string">&#x27;content&#x27;</span>: text, <span class="string">&#x27;mobile&#x27;</span>: mobile, <span class="string">&#x27;format&#x27;</span>: <span class="string">&#x27;json&#x27;</span>&#125;)</span><br><span class="line">    headers = &#123;<span class="string">&quot;Content-type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>, <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/plain&quot;</span>&#125;</span><br><span class="line">    conn = http.client.HTTPConnection(host, port=<span class="number">80</span>, timeout=<span class="number">30</span>)</span><br><span class="line">    conn.request(<span class="string">&quot;POST&quot;</span>, sms_send_uri, params, headers)</span><br><span class="line">    response = conn.getresponse()</span><br><span class="line">    response_str = response.read()</span><br><span class="line">    conn.close()</span><br><span class="line">    <span class="keyword">return</span> response_str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    mobile = <span class="string">&quot;手机号&quot;</span></span><br><span class="line">    text = <span class="string">&#x27;123122&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(json.loads(send_sms(text, mobile).decode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="生成二维码">5、生成二维码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> qrcode</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maker_qrcode</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成二维码</span></span><br><span class="line"><span class="string">    :param url: 需要生成二维码的url</span></span><br><span class="line"><span class="string">    :return: 返回图片字节流</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    image = qrcode.make(url)  <span class="comment"># 创建二维码片</span></span><br><span class="line"></span><br><span class="line">    buffer = io.BytesIO()</span><br><span class="line">    <span class="comment"># 将图片内容丢入容器</span></span><br><span class="line">    image.save(buffer, <span class="string">&#x27;png&#x27;</span>)</span><br><span class="line">    <span class="comment"># 返回容器内的字节</span></span><br><span class="line">    <span class="keyword">return</span> buffer.getvalue()</span><br><span class="line">    </span><br><span class="line">或者</span><br><span class="line"><span class="keyword">from</span> .settings <span class="keyword">import</span> BASE_DIR</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_qrcode</span>(<span class="params">name, url</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成机器扫码支付二维码</span></span><br><span class="line"><span class="string">    :param name: 图片名称</span></span><br><span class="line"><span class="string">    :param url: 支付路由</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    img = qrcode.make(url, border=<span class="number">0</span>)  <span class="comment"># 创建二维码片</span></span><br><span class="line">    save_path = BASE_DIR + <span class="string">&#x27;/&#x27;</span> + name + <span class="string">&#x27;.png&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(save_path)</span><br><span class="line">    img.save(save_path)</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="微信群发">6.微信群发</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf8</span></span><br><span class="line"><span class="keyword">import</span> itchat, time</span><br><span class="line"></span><br><span class="line">itchat.auto_login(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">SINCERE_WISH = <span class="string">u&#x27;祝%s新年快乐！&#x27;</span></span><br><span class="line"></span><br><span class="line">friendList = itchat.get_friends(update=<span class="literal">True</span>)[<span class="number">35</span>:]</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>  index,friend <span class="keyword">in</span> <span class="built_in">enumerate</span>(friendList):</span><br><span class="line">    <span class="built_in">print</span>(index,friend[<span class="string">&#x27;DisplayName&#x27;</span>],friend[<span class="string">&#x27;NickName&#x27;</span>])</span><br><span class="line">    itchat.send(SINCERE_WISH % (friend[<span class="string">&#x27;DisplayName&#x27;</span>]</span><br><span class="line">                                <span class="keyword">or</span> friend[<span class="string">&#x27;NickName&#x27;</span>]), friend[<span class="string">&#x27;UserName&#x27;</span>])</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;备注名称&#x27;</span>,friend[<span class="string">&#x27;DisplayName&#x27;</span>],<span class="string">&#x27;昵称&#x27;</span>,friend[<span class="string">&#x27;NickName&#x27;</span>],<span class="string">&#x27;用户名&#x27;</span>,friend[<span class="string">&#x27;UserName&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----end----&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># 发送文本</span></span><br><span class="line"><span class="string">itchat.send(&#x27;Hello, WeChat!&#x27;)</span></span><br><span class="line"><span class="string"># 发送图片</span></span><br><span class="line"><span class="string">itchat.send_image(&#x27;my_picture.png&#x27;)</span></span><br><span class="line"><span class="string"># 发送视频</span></span><br><span class="line"><span class="string">itchat.send_video(&#x27;my_video.mov&#x27;)</span></span><br><span class="line"><span class="string"># 发送文件</span></span><br><span class="line"><span class="string">itchat.send_file(&#x27;my_file.zip&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="微信自动回复">7、微信自动回复</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> itchat</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment">#图灵机器人</span></span><br><span class="line"><span class="comment">#http://www.tuling123.com/member/robot/1380138/center/frame.jhtml?page=0&amp;child=0获取apikey</span></span><br><span class="line">KEY = <span class="string">&#x27;你的KEY&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_response</span>(<span class="params">msg</span>):</span><br><span class="line">    apiUrl = <span class="string">&#x27;http://www.tuling123.com/openapi/api&#x27;</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;key&#x27;</span>    : KEY,</span><br><span class="line">        <span class="string">&#x27;info&#x27;</span>   : msg,</span><br><span class="line">        <span class="string">&#x27;userid&#x27;</span> : <span class="string">&#x27;wechat-robot&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.post(apiUrl, data=data).json()</span><br><span class="line">        <span class="keyword">return</span> r.get(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@itchat.msg_register(<span class="params">itchat.content.TEXT</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tuling_reply</span>(<span class="params">msg</span>):</span><br><span class="line">    defaultReply = <span class="string">&#x27;I received: &#x27;</span> + msg[<span class="string">&#x27;Text&#x27;</span>]</span><br><span class="line">    robots=[<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>]</span><br><span class="line">    reply = get_response(msg[<span class="string">&#x27;Text&#x27;</span>])+random.choice(robots)</span><br><span class="line">    <span class="keyword">return</span> reply <span class="keyword">or</span> defaultReply</span><br><span class="line"></span><br><span class="line">itchat.auto_login(enableCmdQR=<span class="literal">False</span>)</span><br><span class="line">itchat.run()</span><br></pre></td></tr></table></figure><h2 id="提取django中model中的字段名变成字典列表">8、提取Django中model中的字段名变成字典、列表</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">t = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    goods_id = models.IntegerField(verbose_name=&#x27;商品编号&#x27;)</span></span><br><span class="line"><span class="string">    label_code = models.CharField(max_length=20, verbose_name=&#x27;商品标签&#x27;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 字典</span></span><br><span class="line"><span class="built_in">print</span>(&#123;k:<span class="literal">None</span> <span class="keyword">for</span> k <span class="keyword">in</span> re.findall(<span class="string">&#x27;([a-z_A-Z]+)\s=\s&#x27;</span>,t)&#125;)</span><br><span class="line"><span class="comment"># 列表</span></span><br><span class="line"><span class="comment"># print([k for k in re.findall(&#x27;([a-z_A-Z]+)\s=\s&#x27;,t)])</span></span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">&#123;<span class="string">&#x27;goods_id&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;lable_code&#x27;</span>: <span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="数据库中给表创建数据">9、数据库中给表创建数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">createData</span>(<span class="params">dataDict,tableName</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    给数据表创建数据</span></span><br><span class="line"><span class="string">    :param dataDict: 字典</span></span><br><span class="line"><span class="string">    :param tableName: 表名</span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment">#连接数据库</span></span><br><span class="line">    conn = pymysql.connect(</span><br><span class="line">        host=<span class="string">&#x27;192.168.0.188&#x27;</span>, <span class="comment">#数据库所在地址URL</span></span><br><span class="line">        user=<span class="string">&#x27;root&#x27;</span>, <span class="comment">#用户名</span></span><br><span class="line">        password=<span class="string">&#x27;123456&#x27;</span>, <span class="comment">#密码</span></span><br><span class="line">        database=<span class="string">&#x27;名称&#x27;</span>, <span class="comment">#数据库名称</span></span><br><span class="line">        port=<span class="number">3306</span>,  <span class="comment">#端口号</span></span><br><span class="line">        charset=<span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment">#拿到查询游标</span></span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    clos,value = <span class="built_in">zip</span>(*dataDict.items())</span><br><span class="line">    sql = <span class="string">&quot;INSERT INTO `%s`(%s) VALUES (%s)&quot;</span> % (tableName,</span><br><span class="line">                                                <span class="string">&#x27;,&#x27;</span>.join(clos),</span><br><span class="line">                                                <span class="string">&#x27;,&#x27;</span>.join([<span class="string">&#x27;%s&#x27;</span>] * <span class="built_in">len</span>(value))</span><br><span class="line">                                                )</span><br><span class="line">    <span class="built_in">print</span>(sql)</span><br><span class="line">    cursor.execute(sql, value)</span><br><span class="line">    conn.commit()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Done&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="捕捉异常">10.捕捉异常</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> 异常类型 <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">异常类型</span><br><span class="line">Exception  全部异常</span><br><span class="line">AttributeError 试图访问一个对象没有的属性，比如foo.x，但是foo没有属性x</span><br><span class="line">IOError 输入/输出异常；基本上是无法打开文件</span><br><span class="line">ImportError 无法引入模块或包；基本上是路径问题或名称错误</span><br><span class="line">IndentationError 语法错误（的子类） ；代码没有正确对齐</span><br><span class="line">IndexError 下标索引超出序列边界，比如当x只有三个元素，却试图访问x[<span class="number">5</span>]</span><br><span class="line">KeyError 试图访问字典里不存在的键</span><br><span class="line">KeyboardInterrupt Ctrl+C被按下</span><br><span class="line">NameError 使用一个还未被赋予对象的变量</span><br><span class="line">SyntaxError Python代码非法，代码不能编译(个人认为这是语法错误，写错了）</span><br><span class="line">TypeError 传入对象类型与要求的不符合</span><br><span class="line">UnboundLocalError 试图访问一个还未被设置的局部变量，基本上是由于另有一个同名的全局变量，导致你以为正在访问它</span><br><span class="line">ValueError 传入一个调用者不期望的值，即使值的类型是正确的</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="获取当前时间">11、获取当前时间</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">current_time = <span class="built_in">str</span>(datetime.datetime.now())[:<span class="number">19</span>]</span><br><span class="line"><span class="built_in">print</span>(current_time)</span><br><span class="line"></span><br><span class="line">输出格式如：<span class="number">2018</span>-<span class="number">10</span>-<span class="number">20</span> <span class="number">10</span>:01:<span class="number">43</span></span><br><span class="line">local_time = time.strftime(<span class="string">&#x27;%Y%m%d%H%M%S&#x27;</span>, time.localtime(time.time()))</span><br><span class="line"><span class="built_in">print</span>(local_time)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="订单编号">12、订单编号</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_str</span>(<span class="params">randomlength=<span class="number">8</span></span>):</span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    chars = <span class="string">&#x27;AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789&#x27;</span></span><br><span class="line">    length = <span class="built_in">len</span>(chars) - <span class="number">1</span></span><br><span class="line">    random = Random()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(randomlength):</span><br><span class="line">        <span class="built_in">str</span>+=chars[random.randint(<span class="number">0</span>, length)]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">order_num</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成付款订单号</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    local_time = time.strftime(<span class="string">&#x27;%Y%m%d%H%M%S&#x27;</span>, time.localtime(time.time()))</span><br><span class="line">    result = local_time + random_str(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(order_num())</span><br></pre></td></tr></table></figure><h2 id="mysql自动填写当前时间">13、mysql自动填写当前时间</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CURRENT_TIMESTAMP</span><br></pre></td></tr></table></figure><figure><img src="https://img-blog.csdnimg.cn/20190312172747658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">为表添加索引</span><br><span class="line"></span><br><span class="line">ALTER table tableName ADD INDEX indexName(columnName)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="drf动态过滤查询">14、drf动态过滤查询</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># page.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserPagination</span>(<span class="title class_ inherited__">PageNumberPagination</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;用户分页器&quot;&quot;&quot;</span></span><br><span class="line">    page_size = <span class="number">10</span>  <span class="comment"># 默认的页面数据数量</span></span><br><span class="line">    page_query_param = <span class="string">&#x27;page&#x27;</span>  <span class="comment"># 定制取数据页码key </span></span><br><span class="line">    page_size_query_param = <span class="string">&#x27;page_size&#x27;</span>  <span class="comment"># 默认取数据页码key </span></span><br><span class="line">    max_page_size = <span class="number">15</span>   <span class="comment"># 数据每页取值的最大上限</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># serializers.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> user.models <span class="keyword">import</span> UserInfo</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserSerializers</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;用户收货地址&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = UserInfo</span><br><span class="line">    <span class="comment"># 所有字段</span></span><br><span class="line">        <span class="comment">#fields = &#x27;__all__&#x27;</span></span><br><span class="line">        fields = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;title&#x27;</span>,  <span class="string">&#x27;province&#x27;</span>, <span class="string">&#x27;city&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;quxian&#x27;</span>, <span class="string">&#x27;address&#x27;</span>, <span class="string">&#x27;code__gte&#x27;</span>, <span class="string">&#x27;code__lte&#x27;</span>]</span><br><span class="line">        <span class="comment"># 显示外键</span></span><br><span class="line">        depth = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MachineViews</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 从前端获取出来的过滤参数，解析成字典传进filter()函数中</span></span><br><span class="line">        <span class="comment"># 动态过滤，</span></span><br><span class="line">        kwargs = &#123;&#125;</span><br><span class="line">        <span class="comment"># 表中的字段名</span></span><br><span class="line">        columns = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;title&#x27;</span>,  <span class="string">&#x27;province&#x27;</span>, <span class="string">&#x27;city&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;quxian&#x27;</span>, <span class="string">&#x27;address&#x27;</span>, <span class="string">&#x27;code__gte&#x27;</span>, <span class="string">&#x27;code__lte&#x27;</span>]</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> request.query_params.items():</span><br><span class="line">            <span class="keyword">if</span> k <span class="keyword">not</span> <span class="keyword">in</span> columns:</span><br><span class="line">                <span class="keyword">return</span> Response(<span class="string">&#x27;参数不对&#x27;</span>, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"><span class="keyword">if</span> v:</span><br><span class="line">            kwargs[k] = v</span><br><span class="line"></span><br><span class="line">        users = UserInfo.objects.<span class="built_in">filter</span>(**kwargs)</span><br><span class="line">        page = UserPagination()</span><br><span class="line">        page_goods_list = page.paginate_queryset(users, self.request, self)</span><br><span class="line">        ser = UserSerializers(page_goods_list, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> page.get_paginated_response(ser.data)</span><br><span class="line">        </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="linux后台运行python程序">15、linux后台运行python程序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nohup /home/project_venv/user/<span class="built_in">bin</span>/python3 -u /home/user/user_server.py &gt;&gt; /home/user/user.log <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;   </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="追加外键">16、追加外键</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ALTER TABLE tb_commentPhoto ADD CONSTRAINT FK_comment_phone</span><br><span class="line">FOREIGN KEY tb_goodsComment(<span class="built_in">id</span>) REFERENCES tb_commentPhoto(comment_id);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="写读csv文件查看是否存在若存在就从csv中删除">17、写/读CSV文件，查看是否存在，若存在就从csv中删除</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_invite_code</span>(<span class="params">random_code_pool=<span class="literal">None</span>, length=<span class="number">6</span>, num=<span class="number">10</span>, is_append=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    创建随机邀请码,并写入txt文件</span></span><br><span class="line"><span class="string">    :param: random_code_pool 随机邀请码</span></span><br><span class="line"><span class="string">    :param: length 邀请码长度</span></span><br><span class="line"><span class="string">    :param: num 邀请码个数</span></span><br><span class="line"><span class="string">    :param: is_append True追加,False 覆盖</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> random_code_pool:</span><br><span class="line">        code_pool = string.ascii_uppercase + string.digits</span><br><span class="line">        random_code_pool = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">            s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">                s += random.choice(code_pool)</span><br><span class="line">            <span class="keyword">if</span> s <span class="keyword">and</span> s <span class="keyword">not</span> <span class="keyword">in</span> random_code_pool:</span><br><span class="line">                random_code_pool.append(s)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入方法。是追加还是覆盖</span></span><br><span class="line">    write_method = <span class="string">&#x27;a+&#x27;</span> <span class="keyword">if</span> is_append <span class="keyword">else</span> <span class="string">&#x27;w&#x27;</span></span><br><span class="line">    <span class="comment"># 写入文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./invite_code.csv&#x27;</span>, write_method, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        writer = csv.writer(f)</span><br><span class="line">        <span class="keyword">for</span> rowData <span class="keyword">in</span> random_code_pool:</span><br><span class="line">            <span class="comment"># 按行写入</span></span><br><span class="line">            writer.writerow((rowData,))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_invite_code</span>(<span class="params">code</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    查看邀请码是否存在txt文件中，</span></span><br><span class="line"><span class="string">    若存在就返回True，并在txt文件中删除</span></span><br><span class="line"><span class="string">    若不存在就返回False</span></span><br><span class="line"><span class="string">    :param code:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    code_pool = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./invite_code.csv&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>,errors=<span class="string">&#x27;ignore&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        allFileInfo = csv.reader(f)</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> allFileInfo:</span><br><span class="line">            code_pool.append(row[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> code <span class="keyword">in</span> code_pool:</span><br><span class="line">        <span class="comment"># 删除查询的code</span></span><br><span class="line">        code_pool.pop(code_pool.index(code))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 重新写入文件</span></span><br><span class="line">        create_invite_code(code_pool,is_append=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># create_invite_code(length=9,num=100)</span></span><br><span class="line">    <span class="built_in">print</span>(check_invite_code(<span class="string">&#x27;WJ4PSTJG2&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="django中从request获取访问路径">18、django中从request获取访问路径</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;获取相对路径&#x27;</span>, request.get_full_path())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;获取绝对路径&#x27;</span>, request.build_absolute_uri())</span><br><span class="line"><span class="built_in">print</span>(request.build_absolute_uri(<span class="string">&#x27;?&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(request.build_absolute_uri(<span class="string">&#x27;/&#x27;</span>)[:-<span class="number">1</span>].strip(<span class="string">&quot;/&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(request.build_absolute_uri(<span class="string">&#x27;/&#x27;</span>).strip(<span class="string">&quot;/&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(request.build_absolute_uri(<span class="string">&#x27;/&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(request.META[<span class="string">&#x27;HTTP_HOST&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(request.META[<span class="string">&#x27;PATH_INFO&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(request.META[<span class="string">&#x27;QUERY_STRING&#x27;</span>])</span><br><span class="line">iphost = request.META.get(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>, <span class="string">&#x27;&#x27;</span>)  <span class="comment"># 获取访问来源IP</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如：</span></span><br><span class="line">获取相对路径 /QRcode/?d=<span class="number">1</span></span><br><span class="line">获取绝对路径 http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/QRcode/?d=<span class="number">1</span></span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/QRcode/</span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span></span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span></span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/</span><br><span class="line">----------</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span></span><br><span class="line">/QRcode/</span><br><span class="line">d=<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="django收集静态文件">19、Django收集静态文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">先在项目根目录下创建一个static文件夹</span><br><span class="line">然后在settings.py中设置</span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">&#x27;static&#x27;</span>)</span><br><span class="line">最后执行下面的命令：</span><br><span class="line">python manage.py collectstatic</span><br></pre></td></tr></table></figure><h2 id="xadmin插件">20、xadmin插件</h2><p>https://www.cnblogs.com/lanqie/p/8340215.html</p><h2 id="uwsgi自动重启">21、uwsgi自动重启</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"><span class="comment"># 使用nginx连接时 使用</span></span><br><span class="line">socket=<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">2019</span></span><br><span class="line"><span class="comment"># 直接作为web服务器使用</span></span><br><span class="line"><span class="comment">#http=0.0.0.1:8000</span></span><br><span class="line"><span class="comment"># 配置工程目录</span></span><br><span class="line">chdir=/home/user</span><br><span class="line"><span class="comment"># 配置项目的wsgi目录。相对于工程目录</span></span><br><span class="line">wsgi-file=user/wsgi.py</span><br><span class="line">virtualenv=/home/project_venv/user</span><br><span class="line"><span class="comment">#配置进程，线程信息</span></span><br><span class="line">processes=<span class="number">1</span></span><br><span class="line">threads=<span class="number">1</span></span><br><span class="line">enable-threads=<span class="literal">True</span></span><br><span class="line">master=<span class="literal">True</span></span><br><span class="line">pidfile=uwsgi.pid</span><br><span class="line">daemonize=uwsgi.log</span><br><span class="line"><span class="comment">#启动uwsgi的用户名和用户组</span></span><br><span class="line">uid=root</span><br><span class="line">gid=root</span><br><span class="line"><span class="comment">#uwsgi自动重启</span></span><br><span class="line">py-autoreload=<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="谷歌浏览器快捷键">22、谷歌浏览器快捷键</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">浏览器缓存</span><br><span class="line"></span><br><span class="line">Ctrl+Shift+Del  清除Google浏览器缓存的快捷键</span><br><span class="line"></span><br><span class="line">Ctrl+Shift+R  重新加载当前网页而不使用缓存内容</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="git克隆分支">23、git克隆分支</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b dev 地址 </span><br></pre></td></tr></table></figure><h2 id="mysql更新语句新增列删除列">24、mysql更新语句、新增列、删除列</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">update user <span class="built_in">set</span> name=<span class="string">&#x27;张三&#x27;</span> where <span class="built_in">id</span>=<span class="number">111</span></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">DELETE FROM table_name [WHERE Clause]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加字段</span></span><br><span class="line">alter table 表名 add column 列名 类型;</span><br><span class="line"><span class="comment"># 删除字段</span></span><br><span class="line">alter table 表名 dropcolumn 列名 ;</span><br></pre></td></tr></table></figure><h2 id="删除指定格式的文件">25、删除指定格式的文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_specified_format_file</span>(<span class="params">file_dir, format_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    删除指定格式的文件</span></span><br><span class="line"><span class="string">    :param file_dir: 文件根目录</span></span><br><span class="line"><span class="string">    :param format_name: 格式</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(file_dir):</span><br><span class="line">        <span class="comment"># print(root) #当前目录路径</span></span><br><span class="line">        <span class="comment"># print(dirs) #当前路径下所有子目录</span></span><br><span class="line">        <span class="comment"># print(files) #当前路径下所有非目录子文件</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> re.<span class="keyword">match</span>(format_name, file):</span><br><span class="line">                <span class="built_in">print</span>(os.path.join(root, file))</span><br><span class="line">                os.remove(os.path.join(root, file))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">remove_specified_format_file(<span class="string">r&#x27;D:\学习\LDC\java&#x27;</span>, <span class="string">r&#x27;\._*&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="计算文件总数">26、计算文件总数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file_count</span>(<span class="params">file_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :param file_dir: 文件根目录</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(file_dir):</span><br><span class="line">        <span class="comment"># print(root) #当前目录路径</span></span><br><span class="line">        <span class="comment"># print(dirs) #当前路径下所有子目录</span></span><br><span class="line">        <span class="comment"># print(files) #当前路径下所有非目录子文件</span></span><br><span class="line">        count += <span class="built_in">len</span>(files)</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(file_count(<span class="string">r&#x27;D:\学习\LDC\java\Java学习\newEstore\estore\js&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="计算文件夹大小">27、计算文件夹大小</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file_size</span>(<span class="params">file_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    删除指定格式的文件</span></span><br><span class="line"><span class="string">    :param file_dir: 文件根目录</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    size = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(file_dir):</span><br><span class="line">        <span class="comment"># print(root) #当前目录路径</span></span><br><span class="line">        <span class="comment"># print(dirs) #当前路径下所有子目录</span></span><br><span class="line">        <span class="comment"># print(files) #当前路径下所有非目录子文件</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            size += os.path.getsize(os.path.join(root, file))</span><br><span class="line"><span class="comment"># M为单位</span></span><br><span class="line">    <span class="keyword">return</span> size / <span class="number">1024</span> / <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file_name = <span class="string">r&#x27;D:\学习&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(file_size(file_name))</span><br></pre></td></tr></table></figure><h2 id="django实现jsonp跨域">28、Django实现jsonp跨域</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># html</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">                    url: <span class="string">&#x27;请求路由&#x27;</span>,</span><br><span class="line">                    <span class="built_in">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">                    dataType: <span class="string">&#x27;JSONP&#x27;</span>,</span><br><span class="line">                    data:&#123;</span><br><span class="line">                      code: <span class="string">&#x27;yes&#x27;</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    jsonp: <span class="string">&#x27;callback&#x27;</span>,</span><br><span class="line">                    success: function(res) &#123;</span><br><span class="line">                       var selectData = $.parseJSON(res);</span><br><span class="line">                       alert(selectData);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    error: function(err) &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        code = request.GET.get(<span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="comment"># 跨域请求</span></span><br><span class="line">        callback = request.GET.get(<span class="string">&#x27;callback&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;%s(&#x27;%s&#x27;)&quot;</span> % (callback, json.dumps(&#123;<span class="string">&#x27;code&#x27;</span>: code&#125;)), status=status.HTTP_200_OK)</span><br><span class="line">                    </span><br><span class="line">cors解决跨域</span><br><span class="line"></span><br><span class="line">https://www.cnblogs.com/wxiaoyu/p/<span class="number">9578848.</span>html</span><br></pre></td></tr></table></figure><h2 id="微信获取用户信息">29、微信获取用户信息</h2><p>参考：https://blog.csdn.net/weixin_39735923/article/details/79202563</p><h2 id="uwsgi初始配置问题">30、uwsgi初始配置问题</h2><p>https://blog.csdn.net/weixin_39735923/article/details/79202563</p><h2 id="django中drf序列化">31、django中drf序列化</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 序列化器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MsgSerializers</span>(serializers.ModelSerializer):</span><br><span class="line">    addtime = serializers.DateTimeField(read_only=<span class="literal">True</span>, <span class="built_in">format</span>=<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">    hasread = serializers.CharField(source=<span class="string">&#x27;get_hasread_display&#x27;</span>)</span><br><span class="line">    msgtype = serializers.CharField(source=<span class="string">&#x27;get_msgtype_display&#x27;</span>)</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = MallMsg</span><br><span class="line">        <span class="comment"># 可以混合使用</span></span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span>  <span class="comment"># &#x27;__all__&#x27; 所有字段</span></span><br><span class="line">        <span class="comment"># 数据库层级控制（序列化链表操作）</span></span><br><span class="line">        <span class="comment"># depth = 1  # 外键层级</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#分页器</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLimitOffsetPagination</span>(<span class="title class_ inherited__">PageNumberPagination</span>):</span><br><span class="line"></span><br><span class="line">    page_size = <span class="number">3</span>  <span class="comment"># 默认的页面数据数量</span></span><br><span class="line">    page_query_param = <span class="string">&#x27;page&#x27;</span>  <span class="comment"># 定制取数据页码key ？</span></span><br><span class="line">    page_size_query_param = <span class="string">&#x27;page_size&#x27;</span>  <span class="comment"># 默认取数据页码key &amp;</span></span><br><span class="line">    max_page_size = <span class="number">15</span>  <span class="comment"># 数据每页取值的最大上限</span></span><br></pre></td></tr></table></figure><h2 id="第三方库">32、第三方库</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">安装openssl</span><br><span class="line"> pip3 install pyOpenSSL</span><br></pre></td></tr></table></figure><h2 id="requests请求https携带ca证书">33、requests请求https携带CA证书</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> OpenSSL</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib3.contrib.pyopenssl</span><br><span class="line"></span><br><span class="line">urllib3.contrib.pyopenssl.inject_into_urllib3()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">p12_to_pem</span>(<span class="params">certname, pwd</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从.p12文件中提取pem</span></span><br><span class="line"><span class="string">    :param certname:</span></span><br><span class="line"><span class="string">    :param pwd:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    pem_name = certname + <span class="string">&quot;.pem&quot;</span></span><br><span class="line">    f_pem = <span class="built_in">open</span>(pem_name, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    p12file = certname + <span class="string">&quot;.p12&quot;</span></span><br><span class="line">    p12 = OpenSSL.crypto.load_pkcs12(<span class="built_in">open</span>(p12file, <span class="string">&#x27;rb&#x27;</span>).read(), pwd)</span><br><span class="line">    f_pem.write(OpenSSL.crypto.dump_privatekey(OpenSSL.crypto.FILETYPE_PEM, p12.get_privatekey()))</span><br><span class="line">    f_pem.write(OpenSSL.crypto.dump_certificate(OpenSSL.crypto.FILETYPE_PEM, p12.get_certificate()))</span><br><span class="line">    ca = p12.get_ca_certificates()</span><br><span class="line">    <span class="keyword">if</span> ca <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">for</span> cert <span class="keyword">in</span> ca:</span><br><span class="line">            f_pem.write(OpenSSL.crypto.dump_certificate(OpenSSL.crypto.FILETYPE_PEM, cert))</span><br><span class="line">    f_pem.close()</span><br><span class="line">    <span class="keyword">return</span> pem_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">post_cert_request</span>(<span class="params">url, data,header, certname, pwd</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用证书发起https请求</span></span><br><span class="line"><span class="string">    :param url:</span></span><br><span class="line"><span class="string">    :param data:</span></span><br><span class="line"><span class="string">    :param certname:</span></span><br><span class="line"><span class="string">    :param pwd:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> (certname != <span class="string">&quot;&quot;</span>):</span><br><span class="line">        cert = p12_to_pem(certname, pwd)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cert = <span class="literal">None</span></span><br><span class="line">    r = requests.post(url, header=header, data=data, cert=cert)</span><br><span class="line">    <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure><h2 id="django创建缓存命令">34、django创建缓存命令</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py createcachetable 缓存表名</span><br></pre></td></tr></table></figure><h2 id="django-更改超级用户密码">35、Django 更改超级用户密码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在工程文件目录下敲入：</span><br><span class="line">python manage.py shell</span><br><span class="line"></span><br><span class="line">再在python交互界面输入：</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line">user = User.objects.get(username = <span class="string">&#x27;用户名&#x27;</span>)</span><br><span class="line">user.set_password(<span class="string">&#x27;密码&#x27;</span>)</span><br><span class="line">user.save()</span><br></pre></td></tr></table></figure><h2 id="restframe使用缓存">36、restframe使用缓存</h2><p>https://blog.csdn.net/Odyssues_lee/article/details/80872586</p><h2 id="数据库">37、数据库</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">select * <span class="keyword">from</span> user  where ISNULL(code)</span><br><span class="line">update user <span class="built_in">set</span> code=<span class="string">&#x27;111&#x27;</span>,info=<span class="string">&#x27;微信&#x27;</span> where ISNULL(code)</span><br></pre></td></tr></table></figure><h2 id="linux常用命令">38、linux常用命令</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tail -f 日志名  实时监控日志</span><br><span class="line">tail -f 80_v10.log</span><br><span class="line"></span><br><span class="line">netstat -na|grep <span class="number">80</span>  查看端口tcp连接数</span><br><span class="line">netstat -na|grep <span class="number">80</span> | wc -l 计算端口tcp连接数</span><br><span class="line"></span><br><span class="line">ps -ef|grep python  查看有多少python程序在运行</span><br><span class="line"></span><br><span class="line">gunzip <span class="number">2015.</span>csv.gz   <span class="comment"># 解压</span></span><br><span class="line">unzip <span class="number">19.</span><span class="built_in">zip</span> <span class="comment"># 解压zip</span></span><br><span class="line">wc -l <span class="number">2015.</span>csv   <span class="comment"># 查看行数</span></span><br><span class="line">apt install lrzsz  <span class="comment"># 安装</span></span><br><span class="line">sz 文件名  <span class="comment"># 下载文件</span></span><br><span class="line"></span><br><span class="line">查找文件</span><br><span class="line">find / -name 文件名</span><br><span class="line"></span><br><span class="line">匹配执行过的以find为开头的命令</span><br><span class="line">history | grep find</span><br></pre></td></tr></table></figure><h2 id="xadmin禁止增加删除">39、xadmin禁止增加、删除</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"><span class="comment"># 用户管理</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserManage</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">&#x27;用户名&#x27;</span>)</span><br><span class="line">    phone = models.CharField(max_length=<span class="number">11</span>, unique=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;手机号&#x27;</span>)</span><br><span class="line">    code = models.CharField(max_length=<span class="number">11</span>, unique=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;编号&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    user = models.ForeignKey(User, on_delete=models.CASCADE, editable=<span class="literal">False</span>, null=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;管理员&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># adminx.py</span></span><br><span class="line"><span class="comment"># 用户列表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserAdmin</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    list_display = [ <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>, <span class="string">&#x27;name&#x27;</span>,]</span><br><span class="line">    search_fields = [<span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>]</span><br><span class="line">    list_filter = [<span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>]</span><br><span class="line">    list_editable = [<span class="string">&#x27;name&#x27;</span>]  <span class="comment"># 数据即时编辑</span></span><br><span class="line">    readonly_fields = [<span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>, <span class="string">&#x27;name&#x27;</span>]  <span class="comment"># 只读字段，不能编辑</span></span><br><span class="line">    model_icon = <span class="string">&#x27;fa fa-square&#x27;</span></span><br><span class="line">    model = UserInfo</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_delete_permission</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">    <span class="comment"># 禁止删除</span></span><br><span class="line">        <span class="keyword">if</span> args:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">has_add_permission</span>(<span class="params">self,*args,**kwargs</span>):</span><br><span class="line"><span class="comment"># 禁止增加</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_models</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># 用户级别设置</span></span><br><span class="line">        self.new_obj.user = self.request.user</span><br><span class="line">        flag = self.org_obj <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="string">&#x27;create&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;change&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> flag == <span class="string">&#x27;create&#x27;</span>:</span><br><span class="line">        <span class="comment"># 对密码字段进行加密</span></span><br><span class="line">            self.new_obj.password = encrypt_oracle(self.new_obj.password)</span><br><span class="line">        <span class="keyword">elif</span> flag == <span class="string">&#x27;change&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">in</span> self.change_message():</span><br><span class="line">                self.new_obj.password = encrypt_oracle(self.new_obj.password)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        <span class="built_in">super</span>().save_models()</span><br><span class="line"></span><br><span class="line">xadmin.site.register(UserInfo, UserAdmin)</span><br></pre></td></tr></table></figure><h2 id="时间格式字符串相减">40、时间格式字符串相减</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = <span class="built_in">str</span>(datetime.datetime.now())[:<span class="number">19</span>]</span><br><span class="line">time.sleep(<span class="number">60</span>)</span><br><span class="line">end = <span class="built_in">str</span>(datetime.datetime.now())[:<span class="number">19</span>]</span><br><span class="line"><span class="built_in">print</span>(start,end)</span><br><span class="line">link_start = datetime.datetime.strptime(start, <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">link_end = datetime.datetime.strptime(end, <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">link_min = <span class="built_in">round</span>((link_end - link_start).seconds / <span class="number">60</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(link_min,<span class="string">&#x27;分钟&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="显示循环进度条">41、显示循环进度条</h2><p>参考：https://blog.csdn.net/zejianli/article/details/77915751</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm,trange</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">text = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> tqdm([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>]):</span><br><span class="line">    text = text + char</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_bar</span>(<span class="params">percent, index, total,start_time, start_str=<span class="string">&#x27;&#x27;</span>, end_str=<span class="string">&#x27;&#x27;</span>, total_length=<span class="number">100</span></span>):</span><br><span class="line">    <span class="comment"># 进度条</span></span><br><span class="line">    percent_length = <span class="built_in">int</span>(percent)</span><br><span class="line">    bar = <span class="string">&#x27;\r&#x27;</span> + start_str + (<span class="string">&#x27;\033[1;31;41m \033[0m&#x27;</span> * percent_length + <span class="string">&#x27;\033[1;37;47m \033[0m&#x27;</span> * (</span><br><span class="line">                total_length - percent_length)) + <span class="string">f&#x27;  <span class="subst">&#123;<span class="built_in">round</span>(index / total * <span class="number">100</span>, <span class="number">2</span>)&#125;</span>%  &#x27;</span> + <span class="string">f&#x27; <span class="subst">&#123;index&#125;</span>|<span class="subst">&#123;end_str&#125;</span>&#x27;</span>+ <span class="string">f&#x27;   |已进行时间: <span class="subst">&#123;<span class="built_in">round</span>(time.time() - start_time, <span class="number">2</span>)&#125;</span>秒&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(bar, end=<span class="string">&#x27;&#x27;</span>, flush=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    data_set = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">23</span>)]</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    total = <span class="built_in">len</span>(data_set)</span><br><span class="line">    end_str = <span class="string">&#x27;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(total)</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> data_set:</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        process_bar(i * <span class="number">100</span> / total, i, total, start_time, start_str=<span class="string">&#x27;&#x27;</span>, end_str=end_str, total_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式三</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">d = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(d)):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    sys.stdout.write(<span class="string">&#x27;\r&gt;&gt; Downloading  %.2f%%&#x27;</span> % (<span class="built_in">float</span>(i) / <span class="built_in">float</span>(<span class="built_in">len</span>(d)) * <span class="number">100.0</span>))</span><br><span class="line">sys.stdout.flush()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="把列表中的字典转成csv文件">42、把列表中的字典转成csv文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">lists = [&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;,&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">3</span>&#125;]</span><br><span class="line">df = pd.DataFrame(lists)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line">df.to_csv(<span class="string">&#x27;result2.csv&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="windows添加右键新建markdown文件">43、windows添加右键新建MarkDown文件</h2><p>在网上下载Typora软件安装后 1、在桌面上新建一个txt文件，输入以下内容：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version <span class="number">5.00</span></span><br><span class="line">[HKEY_CLASSES_ROOT\.md\ShellNew]</span><br><span class="line"><span class="string">&quot;NullFile&quot;</span>=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;FileName&quot;</span>=<span class="string">&quot;template.md&quot;</span></span><br></pre></td></tr></table></figure><p>2、另存为，改后缀为.reg，保存类型为.txt，编码为Unicode</p><figure><img src="https://img-blog.csdnimg.cn/20200526232015169.png" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><p>3、双击运行，确定，重启电脑，此时在桌面右键就有了新建md文件</p><h2 id="redis设置值定时过期">44、redis设置值定时过期</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">redis_client = redis.Redis(</span><br><span class="line">    host=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    port=<span class="number">6379</span>,</span><br><span class="line">    db=<span class="number">0</span>,</span><br><span class="line">    password=<span class="string">&#x27;123456&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">redis_set</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    redis设置值定时过期</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> redis_client</span><br><span class="line"></span><br><span class="line">    redis_client.<span class="built_in">set</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;ldc&#x27;</span>)</span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line">    <span class="comment"># 设置‘name’50秒过期</span></span><br><span class="line">    expire_time = now + datetime.timedelta(hours=<span class="number">0</span>, minutes=<span class="number">0</span>, seconds=<span class="number">50</span>)</span><br><span class="line">    redis_client.expireat(<span class="string">&#x27;name&#x27;</span>, expire_time)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    redis_set()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="linux根据端口杀进程">45、linux根据端口杀进程</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">killport</span>(<span class="params">port</span>):</span><br><span class="line">    command = <span class="string">&#x27;&#x27;&#x27;kill -9 $(netstat -nlp | grep :&#x27;&#x27;&#x27;</span> + <span class="built_in">str</span>(port) + <span class="string">&#x27;&#x27;&#x27; | awk &#x27;&#123;print $7&#125;&#x27; | awk -F&quot;/&quot; &#x27;&#123; print $1 &#125;&#x27;)&#x27;&#x27;&#x27;</span></span><br><span class="line">    os.system(command)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始执行</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    port = <span class="number">4237</span></span><br><span class="line">    killport(port)</span><br></pre></td></tr></table></figure><h2 id="监控linux网络流量">46、监控linux网络流量</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">iftop -n -N -i eth0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nethogs eth0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vim +/字符串 文件</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="win10添加右键打开cmd">47、win10添加右键打开cmd</h2><p>通过添加注册表项实现</p><p>win + r 输入 regedit</p><p>找到注册表位置：HKEY_CLASSES_ROOT<br /></p><p>右键“shel”l,新建“项”，命名为“以管理员身份打开cmd”，</p><p>右键“以管理员身份打开cmd”，新建“DWORD(32位)值”，命名为&quot;ShowBasedOnVelocityId&quot;,值为“639bc8”</p><p>右键“以管理员身份打开cmd”，新建“项”，命名为“command”</p><p>右键“command”，点击“默认”，点击“修改”，填写数值为 cmd.exe /s /k pushd “%V”</p><h2 id="xadmin后台无法显示下拉框完整内容">48、xadmin后台无法显示下拉框完整内容</h2><p>解决方案 在根目录中找到/static/xadmin/vendor/selectize/selectize.bootstrap3.css 在331行后加入 position: static;</p><figure><img src="https://img-blog.csdnimg.cn/20190704184201572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><h2 id="xadmin单点登录">49、xadmin单点登录</h2><p>使用中间件实现。</p><p>新建一个utils.py文件，存放以下代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.sessions.models <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XadminMiddleware</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;xadmin后台单点登录&quot;&quot;&quot;</span></span><br><span class="line">        PATH_INFO = request.META.get(<span class="string">&#x27;PATH_INFO&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> PATH_INFO <span class="keyword">and</span> <span class="string">&#x27;xadmin&#x27;</span> <span class="keyword">in</span> PATH_INFO:</span><br><span class="line">            request.session.clear_expired()   <span class="comment"># 清除过期的key</span></span><br><span class="line">            session_key = request.session.session_key</span><br><span class="line">            <span class="keyword">for</span> session <span class="keyword">in</span> Session.objects.<span class="built_in">filter</span>(~Q(session_key=session_key), expire_date__gte=timezone.now()):</span><br><span class="line">                data = session.get_decoded()</span><br><span class="line">                <span class="keyword">if</span> data.get(<span class="string">&#x27;_auth_user_id&#x27;</span>, <span class="literal">None</span>) == <span class="built_in">str</span>(request.user.<span class="built_in">id</span>):</span><br><span class="line">                    session.delete()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在urls.py中设置：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">...</span><br><span class="line">re_path(<span class="string">&#x27;^xadmin/&#x27;</span>, xadmin.site.urls),</span><br><span class="line">...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>然后在settings.py中注册中间件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">   MIDDLEWARE = [</span><br><span class="line">   ...</span><br><span class="line">   </span><br><span class="line">   <span class="string">&#x27;utils.xadminauth.XadminMiddleware&#x27;</span>,</span><br><span class="line">   ...</span><br><span class="line">   ]</span><br><span class="line">SESSION_COOKIE_AGE = <span class="number">1209600</span>  <span class="comment"># 设置过期时间</span></span><br><span class="line">   SESSION_SAVE_EVERY_REQUEST = Ture  <span class="comment"># 每次请求都更新</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>【参考】 https://blog.csdn.net/Python_anning</p><h2 id="django-restful-多个models数据表序列化合并返回一次请求返回多个序列化器数据">50、Django restful 多个models数据表序列化合并返回（一次请求返回多个序列化器数据）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入第三方包</span></span><br><span class="line">pip install django-crispy-forms==<span class="number">1.7</span><span class="number">.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在settings.py中添加应用</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">...</span><br><span class="line"><span class="string">&#x27;drf_multiple_model&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">...</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在views.py中使用</span></span><br><span class="line">    <span class="keyword">from</span> drf_multiple_model.pagination <span class="keyword">import</span> MultipleModelLimitOffsetPagination</span><br><span class="line">    <span class="keyword">from</span> drf_multiple_model.views <span class="keyword">import</span> ObjectMultipleModelAPIView</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">LimitPagination</span>(<span class="title class_ inherited__">MultipleModelLimitOffsetPagination</span>):</span><br><span class="line">        <span class="comment"># 多个models数据表联合查询，分页，每页限制数据10条</span></span><br><span class="line">        default_limit = <span class="number">10</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">StudentSerializers</span>(serializers.ModelSerializer):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;学生表序列化器&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># merchant = MerchantSerializers()</span></span><br><span class="line">        </span><br><span class="line">        register_time = serializers.DateTimeField(read_only=<span class="literal">True</span>, <span class="built_in">format</span>=<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">            model = Student</span><br><span class="line">            fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ClassesSerializers</span>(serializers.ModelSerializer):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;班级表序列化器&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># merchant = MerchantSerializers()</span></span><br><span class="line">        </span><br><span class="line">        add_time = serializers.DateTimeField(read_only=<span class="literal">True</span>, <span class="built_in">format</span>=<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">            model = Classes</span><br><span class="line">            fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">SchoolSerializers</span>(serializers.ModelSerializer):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;学校表序列化器&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># merchant = MerchantSerializers()</span></span><br><span class="line">        </span><br><span class="line">        add_time = serializers.DateTimeField(read_only=<span class="literal">True</span>, <span class="built_in">format</span>=<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">            model = School</span><br><span class="line">            fields = <span class="string">&#x27;__all__&#x27;</span>      </span><br><span class="line">            </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">StudentInfo</span>(<span class="title class_ inherited__">ObjectMultipleModelAPIView</span>):</span><br><span class="line">        <span class="comment"># 获取学生信息，班级信息，学校信息</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">            uid = request.GET.get(<span class="string">&#x27;uid&#x27;</span>, <span class="string">&#x27;&#x27;</span>)  <span class="comment"># 学生id</span></span><br><span class="line">            cid = request.GET.get(<span class="string">&#x27;cid&#x27;</span>, <span class="string">&#x27;&#x27;</span>)  <span class="comment"># 班级id</span></span><br><span class="line">            sid = request.GET.get(<span class="string">&#x27;sid&#x27;</span>, <span class="string">&#x27;&#x27;</span>)  <span class="comment"># 学校id</span></span><br><span class="line">            </span><br><span class="line">            self.querylist = [</span><br><span class="line">                &#123;<span class="string">&#x27;queryset&#x27;</span>: Student.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=uid).order_by(<span class="string">&#x27;-id&#x27;</span>),</span><br><span class="line">                    <span class="string">&#x27;serializer_class&#x27;</span>:  StudentSerializers, <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;student&#x27;</span>, &#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;queryset&#x27;</span>: Classes.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=cid).order_by(<span class="string">&#x27;-id&#x27;</span>),</span><br><span class="line">                    <span class="string">&#x27;serializer_class&#x27;</span>:  ClassesSerializers, <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;classes&#x27;</span>, &#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;queryset&#x27;</span>: School.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=sid).order_by(<span class="string">&#x27;-id&#x27;</span>),</span><br><span class="line">                    <span class="string">&#x27;serializer_class&#x27;</span>:  SchoolSerializers, <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;school&#x27;</span>, &#125;,</span><br><span class="line">            ]</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">return</span> self.<span class="built_in">list</span>(request, *args, **kwargs)</span><br><span class="line">    </span><br><span class="line">        pagination_class = LimitPagination</span><br></pre></td></tr></table></figure><h2 id="django序列化器返回外键关联数据">51、 Django序列化器返回外键关联数据</h2><p>通过 related_name='goods_price’把两个表关联起来，当返回Goods的信息时也会返回相应的GoodsPrice信息</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GoodsPriceSerializers</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;商品价格表序列化器&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = GoodsPrice</span><br><span class="line">        fields = [<span class="string">&#x27;price&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoodsSerializers</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;商品表序列化器&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    goods_price = GoodsPriceSerializers(many=<span class="literal">True</span>, read_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Goods</span><br><span class="line">        fields = [<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;goods_price&#x27;</span>]</span><br><span class="line">        depth = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Goods</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;商品表&quot;&quot;&quot;</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">&#x27;商品名称&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;goods&#x27;</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;商品信息表&#x27;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoodsPrice</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;商品价格表,通过外键关联商品信息表&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>, default=<span class="number">0</span>, verbose_name=<span class="string">&#x27;售价&#x27;</span>)</span><br><span class="line">    goods = models.ForeignKey(to=<span class="string">&#x27;Goods&#x27;</span>, related_name=<span class="string">&#x27;goods_price&#x27;</span>, on_delete=models.SET_NULL, blank=<span class="literal">True</span>, null=<span class="literal">True</span>,verbose_name=<span class="string">&#x27;商品&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(self.price)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        managed = <span class="literal">True</span></span><br><span class="line">        db_table = <span class="string">&#x27;goodsPrice&#x27;</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;商品售价&#x27;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure><h2 id="python-django通过user-agent判断请求来源是微信扫一扫或者是支付宝扫一扫">52、python Django通过User Agent判断请求来源是微信扫一扫或者是支付宝扫一扫</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Footest</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">     <span class="comment"># print(request.META)</span></span><br><span class="line">     <span class="keyword">if</span> <span class="string">&#x27;MicroMessenger&#x27;</span> <span class="keyword">in</span> request.META[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>]:</span><br><span class="line">         <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;访问来源是微信&#x27;</span>&#125;)</span><br><span class="line">     <span class="keyword">elif</span> <span class="string">&#x27;AlipayClient&#x27;</span> <span class="keyword">in</span> request.META[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>]:</span><br><span class="line">         <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;访问来源是支付宝&#x27;</span>&#125;)</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;访问来源是其他&#x27;</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>User Agent中文名为用户代理，简称 UA，它是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。</p><p>浏览器的 UA 字串</p><p>标准格式为： 浏览器标识 (操作系统标识; 加密等级标识; 浏览器语言) 渲染引擎标识 版本信息</p><p>获取user-Agent 之后， 通过识别MicroMessenger或者AlipayClient这样的关键字应该就可以判断是微信还是支付宝 【参考文章】 https://blog.csdn.net/fly910905/article/details/82498813?utm_source=blogxgwz4</p><h2 id="xadmin后台集成导入插件导入excel文件">53、xadmin后台集成’导入‘插件，导入excel文件</h2><p>效果图：</p><figure><img src="https://img-blog.csdnimg.cn/20190426190357134.png" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><p>1、添加</p><p>在虚拟环境根目录-packages.py文件</p><figure><img src="https://img-blog.csdnimg.cn/20190426190440451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> xadmin.views <span class="keyword">import</span> BaseAdminPlugin, ListAdminView</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader</span><br><span class="line"><span class="keyword">import</span> xadmin</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListExcelImportPlugin</span>(<span class="title class_ inherited__">BaseAdminPlugin</span>):</span><br><span class="line">    <span class="comment"># 重写init_request</span></span><br><span class="line">    import_excel = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_request</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> self.import_excel</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">block_top_toolbar</span>(<span class="params">self, context, nodes</span>):</span><br><span class="line">        <span class="comment"># 这里 xadmin/excel/model_list.top_toolbar.import.html 是自己写的html文件</span></span><br><span class="line">      nodes.append(loader.render_to_string(<span class="string">&quot;xadmin/excel/model_list.top_toolbar.import.html&quot;</span>))</span><br><span class="line"></span><br><span class="line">xadmin.site.register_plugin(ListExcelImportPlugin, ListAdminView)</span><br></pre></td></tr></table></figure><p>在虚拟环境根目录-packages<strong>init</strong>.py中</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PLUGINS = (</span><br><span class="line">...</span><br><span class="line">    <span class="string">&#x27;excel&#x27;</span>,</span><br><span class="line">...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>2、添加html文件</p><figure><img src="https://img-blog.csdnimg.cn/20190426190455263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><p>在虚拟环境根目录-packages,在文件夹中添加model_list.top_toolbar.import.html文件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    &#123;% load i18n %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group export&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle btn btn-default btn-sm&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon-share&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 导入数据 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span> <span class="attr">role</span>=<span class="string">&quot;menu&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;dLabel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#export-modal-import-excel&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon-circle-arrow-down&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 导入</span><br><span class="line">            Excel<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;export-modal-import-excel&quot;</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--&#123;% csrf_token %&#125;--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span>×<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span>&gt;</span>导入 Excel<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;fileChange(this)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;excel&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit_upload&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>&#123;% trans &quot;Close&quot; %&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit_upload_b&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon-share&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 导入</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal-content --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal-dalog --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fileChange</span>(<span class="params">target</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//检测上传文件的类型</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> imgName = <span class="variable language_">document</span>.<span class="property">all</span>.<span class="property">submit_upload</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ext, idx;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (imgName == <span class="string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">all</span>.<span class="property">submit_upload_b</span>.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;请选择需要上传的 xls 文件!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            idx = imgName.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (idx != -<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                ext = imgName.<span class="title function_">substr</span>(idx + <span class="number">1</span>).<span class="title function_">toUpperCase</span>();</span></span><br><span class="line"><span class="language-javascript">                ext = ext.<span class="title function_">toLowerCase</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (ext != <span class="string">&#x27;xls&#x27;</span> &amp;&amp; ext != <span class="string">&#x27;xlsx&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">document</span>.<span class="property">all</span>.<span class="property">submit_upload_b</span>.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;只能上传 .xls 类型的文件!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="property">all</span>.<span class="property">submit_upload_b</span>.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;只能上传 .xls 类型的文件!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#submit_upload_b&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> form_data = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> file_info = $(<span class="string">&#x27;#submit_upload&#x27;</span>)[<span class="number">0</span>].<span class="property">files</span>[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">            form_data.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, file_info);</span></span><br><span class="line"><span class="language-javascript">            form_data.<span class="title function_">append</span>(<span class="string">&#x27;file_source&#x27;</span>, $(<span class="string">&#x27;.breadcrumb li&#x27;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">text</span>().<span class="title function_">trim</span>());</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> url = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">protocol</span> + <span class="string">&#x27;//&#x27;</span> + <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">host</span> + <span class="string">&#x27;/importkdorderno/&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: url,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: form_data,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">beforeSend</span>: <span class="keyword">function</span> (<span class="params">xhr</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;X-CSRFToken&quot;</span>, $.<span class="title function_">getCookie</span>(<span class="string">&quot;csrftoken&quot;</span>))</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">processData</span>: <span class="literal">false</span>,  <span class="comment">// tell jquery not to process the data</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">contentType</span>: <span class="literal">false</span>, <span class="comment">// tell jquery not to set contentType</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(res.<span class="property">msg</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">reload</span>();</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、在views.py处理上传的excel文件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ImportKDOrderNo</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        file = request.FILES.get(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">        <span class="comment"># read = InMemoryUploadedFile().open()</span></span><br><span class="line">        data = pd.read_excel(file)  <span class="comment"># 使用pandas处理excel文件</span></span><br><span class="line">file_source = request.POST.get(<span class="string">&#x27;file_source&#x27;</span>, <span class="string">&#x27;&#x27;</span>)  <span class="comment"># 文件来源</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;订单号&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;物流单号&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;文件格式有误，第一行第一列应该为【订单号】，第一行第二列应该为【物流单号】&#x27;</span>&#125;)</span><br><span class="line">        ordernos = data[<span class="string">&#x27;订单号&#x27;</span>]</span><br><span class="line">        logistics = data[<span class="string">&#x27;物流单号&#x27;</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ordernos)):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;订单号&#x27;</span>, ordernos[i], <span class="string">&#x27;物流单号&#x27;</span>, logistics[i])</span><br><span class="line">          </span><br><span class="line">        <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;上传成功&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p>4、在urls.py中添加访问路由</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> 你的应用名称 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">&#x27;你的应用名称&#x27;</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 其他路由</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># 导入物流单号</span></span><br><span class="line">    path(<span class="string">&#x27;importkdorderno/&#x27;</span>, views.ImportKDOrderNo.as_view(), name=<span class="string">&#x27;importkdorderno&#x27;</span>),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="django中查找今天进账金额">54、Django中查找今天进账金额</h2><p>views.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CountFee</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line"><span class="comment"># 获取当前时间的年月日，然后使用聚合函数添加fee字段的值</span></span><br><span class="line">    year = datetime.now().year</span><br><span class="line">        month = datetime.now().month</span><br><span class="line">        day = datetime.now().day</span><br><span class="line">        count_fees = FeeDetail.objects.<span class="built_in">filter</span>(addtime__year=year, addtime__month=month, addtime__day=day).aggregate(Sum(<span class="string">&#x27;fee&#x27;</span>))</span><br><span class="line">        all_fee = count_fees[<span class="string">&#x27;fee__sum&#x27;</span>] <span class="keyword">if</span> count_fees[<span class="string">&#x27;fee__sum&#x27;</span>] <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="built_in">print</span>(all_fee)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: &#123;<span class="string">&#x27;all_fee&#x27;</span>: all_fee&#125;&#125;)</span><br></pre></td></tr></table></figure><h2 id="判断是什么系统">55、判断是什么系统</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> platform</span><br><span class="line">PlATFORM = platform.system()</span><br><span class="line"><span class="keyword">if</span> PlATFORM == <span class="string">&quot;Linux&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;其他&#x27;</span>) </span><br></pre></td></tr></table></figure><h2 id="sql查询">56、sql查询</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 联合更新</span></span><br><span class="line">update malluser <span class="built_in">set</span> master_master_id=<span class="number">3</span> where master_id <span class="keyword">in</span> (select a.<span class="built_in">id</span> <span class="keyword">from</span> (select <span class="built_in">id</span> <span class="keyword">from</span>  malluser where <span class="built_in">id</span> like <span class="string">&#x27;15%&#x27;</span>)a) </span><br><span class="line"><span class="comment"># 统计某字段重复数据</span></span><br><span class="line">SELECT phone, COUNT(*) AS sumCount FROM malluser GROUP BY phone HAVING sumCount &gt; <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="xadmin后台删除数据出现错误">57、 xadmin后台删除数据出现错误</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">`get_deleted_objects() takes <span class="number">3</span> positional arguments but <span class="number">5</span> were given`</span><br></pre></td></tr></table></figure><p>这是由于Django2.1版本和xadmin不兼容导致的</p><p>知道虚拟环境-packages.py</p><p>修改93行，</p><p>把</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">deletable_objects, model_count, perms_needed, protected = get_deleted_objects(</span><br><span class="line">            queryset, self.opts, self.user, self.admin_site, using)</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">deletable_objects, model_count, perms_needed, protected = get_deleted_objects(</span><br><span class="line">            queryset, self.user, self.admin_site)</span><br></pre></td></tr></table></figure><p>然后在adminx.py文件中对应的模型类中允许删除</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MaterialAdmin</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;素材库分类&quot;&quot;&quot;</span></span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;class_id&#x27;</span>, <span class="string">&#x27;is_delete&#x27;</span>, <span class="string">&#x27;addtime&#x27;</span>]</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_delete_permission</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="xdamin限制用户点击">58、xdamin限制用户点击</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//如果登录z=xadmin后台的账号不是【root】的就不能点击更新操作</span><br><span class="line">    var master_name = $(<span class="string">&#x27;#top-nav&#x27;</span>).find(<span class="string">&#x27;strong&#x27;</span>).text();</span><br><span class="line">        master_name =  master_name.substring(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span>(master_name != <span class="string">&#x27;root&#x27;</span>)&#123;</span><br><span class="line">            $(<span class="string">&quot;.grid-item a&quot;</span>).each(function(index, element) &#123;</span><br><span class="line">                $(this).attr(<span class="string">&#x27;href&#x27;</span>,<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="获取公众号关注url">59、获取公众号关注url</h2><p>在微信网页版，打开公众号，点击右上角“…”，在弹框中选择右下角中间的“查看历史记录”，然后在弹框中选择左上角倒数第一个，“用默认浏览器打开”，就可以在打开的浏览器中获取该公众号的关注url，当把这个url发给好友时，好友点开的就是去关注公众号的页面。</p><h2 id="xadmin后台用户操作表权限">60、xadmin后台用户操作表权限</h2><p>虚拟环境根目录-packages.py</p><p>可以找到：</p><figure><img src="https://img-blog.csdnimg.cn/20190627140512311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><p>在项目子应用下的adminx.py中使用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xadmin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> machine.models <span class="keyword">import</span> Machine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MachineAdmin</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    list_display = [<span class="string">&#x27;code&#x27;</span>,]  <span class="comment"># 显示的字段</span></span><br><span class="line"></span><br><span class="line">    search_fields = [<span class="string">&#x27;code&#x27;</span>]  <span class="comment"># 搜索的字段</span></span><br><span class="line">    list_filter = [<span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;is_delete&#x27;</span>] <span class="comment"># 过滤的字段</span></span><br><span class="line">    ordering = (<span class="string">&#x27;-id&#x27;</span>,) <span class="comment"># 按id降序排序</span></span><br><span class="line">    list_editable = [<span class="string">&#x27;is_delete&#x27;</span>, ]  <span class="comment"># 数据即时编辑</span></span><br><span class="line">    list_per_page = <span class="number">30</span>  <span class="comment"># 每页显示数据数量</span></span><br><span class="line">    model_icon = <span class="string">&#x27;fa fa-cog fa-spin&#x27;</span>  <span class="comment"># 左侧显示的小图标</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_delete_permission</span>(<span class="params">self, *args, **kwargs</span>): </span><br><span class="line">        <span class="comment"># 删除权限</span></span><br><span class="line">        <span class="keyword">if</span> self.request.user.is_superuser:  <span class="comment"># 管理员才能增加</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_add_permission</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> self.request.user.is_superuser:  <span class="comment"># 管理员才能增加</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_change_permission</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> self.request.user.is_superuser: <span class="comment"># 管理员才能修改</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">queryset</span>(<span class="params">self</span>):</span><br><span class="line">        qs = <span class="built_in">super</span>(MachineAdmin, self).queryset()</span><br><span class="line">        <span class="keyword">if</span> self.request.user.is_superuser:  <span class="comment"># 管理员可以查看所有</span></span><br><span class="line">            <span class="keyword">return</span> qs</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 登录用户只能看到自己修改的数据</span></span><br><span class="line">            <span class="keyword">return</span> qs.<span class="built_in">filter</span>(master_id=self.request.user.last_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(MallMachine, MallMachineAdmin)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用nginx部署项目">61、使用nginx部署项目</h2><p>先在/etc/nginx/sites-available中创建一个配置文件，文件名为test(注意没有后缀):</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设定虚拟主机配置</span></span><br><span class="line">    server &#123;</span><br><span class="line">        <span class="comment">#侦听80端口</span></span><br><span class="line">        listen <span class="number">80</span>;</span><br><span class="line">        listen <span class="number">443</span> ssl;</span><br><span class="line">        <span class="comment">#定义使用 www.nginx.cn访问</span></span><br><span class="line"><span class="comment">#ssl on;</span></span><br><span class="line">        server_name  xxx.xxx.com;</span><br><span class="line">        <span class="comment">#定义服务器的默认网站根目录位置</span></span><br><span class="line">        root /root/项目名称;</span><br><span class="line">ssl_session_timeout 5m; </span><br><span class="line">        ssl_certificate   /etc/nginx/cert/xxx.pem;</span><br><span class="line">        ssl_certificate_key  /etc/nginx/cert/xxx.key;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1<span class="number">.1</span> TLSv1<span class="number">.2</span>;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        <span class="comment">#设定本虚拟主机的访问日志</span></span><br><span class="line">        <span class="comment">#access_log  logs/nginx.access.log  main;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">#默认请求</span></span><br><span class="line">        location / &#123;</span><br><span class="line">            <span class="comment">#倒入了uwsgi的配置</span></span><br><span class="line">            include uwsgi_params; </span><br><span class="line">    client_max_body_size50m;</span><br><span class="line">            <span class="comment">#连接uwsgi的超时时间</span></span><br><span class="line">           <span class="comment"># uwsgi_connect_timeout 30; </span></span><br><span class="line">     <span class="comment">#设定了uwsig服务器位置</span></span><br><span class="line">     uwsgi_pass <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8002</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        location /static&#123;</span><br><span class="line">      alias /root/项目名称/static;</span><br><span class="line">        &#125;</span><br><span class="line">location /media &#123;</span><br><span class="line">alias /root/项目名称/media;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中xxx.xxx.com表示域名.如果没有https，就使用#把ssl注释掉就可以了。</p><p>然后把test映射到/etc/nginx/sites-enabled</p><p>命令</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ln -s /etc/nginx/sites-available/test /etc/nginx/sites-enabled/test</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>即可 注意： uwsgi中配置listen=1024时，启动uwsgi时可能会报错：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">django + uwsgi + nginx 日志Listen queue size <span class="keyword">is</span> greater than the system <span class="built_in">max</span> net.core.somaxconn (<span class="number">128</span>).</span><br></pre></td></tr></table></figure><p>解决方法:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">修改系统参数</span><br><span class="line"></span><br><span class="line">/proc/sys/net/ipv4/tcp_max_syn_backlog  原来<span class="number">2048</span>    改为<span class="number">8192</span></span><br><span class="line">/proc/sys/net/core/somaxconn原来<span class="number">128</span>     改为<span class="number">262144</span></span><br></pre></td></tr></table></figure><p>重启nginx</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="xadmin后台发送邮件找回密码">62、xadmin后台发送邮件找回密码</h2><figure><img src="https://img-blog.csdnimg.cn/20190710230444358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><p>输入你用户绑定的邮箱</p><figure><img src="https://img-blog.csdnimg.cn/20190710230454725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><p>想要发送邮件，需要在settings.py中设置邮件发送器</p><p>settings.py最下面增加</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ------------------------邮箱配置-----------------------------------------</span></span><br><span class="line">EMAIL_BACKEND = <span class="string">&#x27;django.core.mail.backends.smtp.EmailBackend&#x27;</span> <span class="comment">#把要发送的邮件显示再控制台上，方便调试</span></span><br><span class="line">EMAIL_USE_SSL = <span class="literal">True</span></span><br><span class="line">EMAIL_HOST = <span class="string">&#x27;smtp.qq.com&#x27;</span>  <span class="comment"># 如果是 163 改成 smtp.163.com</span></span><br><span class="line">EMAIL_PORT = <span class="number">465</span></span><br><span class="line">EMAIL_HOST_USER = <span class="string">&#x27;邮箱账号&#x27;</span> <span class="comment"># 帐号</span></span><br><span class="line">EMAIL_HOST_PASSWORD = <span class="string">&#x27;授权码&#x27;</span>  <span class="comment"># 到邮箱里开通</span></span><br><span class="line">DEFAULT_FROM_EMAIL = EMAIL_HOST_USER</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于django2与xadmin有些地方不兼容，需要修改源码：</p><p>找到虚拟环境根目录-packages.py</p><p>在passwords.py文件中大概79行，修改为</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> password_reset_confirm(request=request, uidb36=uidb36, token=token,</span><br><span class="line">                                      template_name=self.password_reset_confirm_template,</span><br><span class="line">                                      token_generator=self.password_reset_token_generator,</span><br><span class="line">                                      set_password_form=self.password_reset_set_form,</span><br><span class="line">                                      post_reset_redirect=self.get_admin_url(<span class="string">&#x27;xadmin_password_reset_complete&#x27;</span>),</span><br><span class="line">                                      current_app=self.admin_site.name, extra_context=context).dispatch(request=request,</span><br><span class="line">                                                                                                        uidb64=uidb36,token=token)</span><br><span class="line">             </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>找到虚拟环境根目录Lib-packages.py</p><p>在views.py文件中大概258行，增加：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 成功后跳转路由,根据自己实际来定</span></span><br><span class="line">self.success_url = self.request.build_absolute_uri(<span class="string">&#x27;/&#x27;</span>) + <span class="string">&#x27;xadmin/&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure><img src="https://img-blog.csdnimg.cn/2020052620533440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><h2 id="xadmin外键下拉框添加过滤">63、xadmin外键下拉框添加过滤</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MallGoodsAdmin</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;商品管理&quot;&quot;&quot;</span></span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;show_photo&#x27;</span>, <span class="string">&#x27;nickname&#x27;</span>, <span class="string">&#x27;merchant&#x27;</span>, <span class="string">&#x27;goods_class&#x27;</span>, <span class="string">&#x27;label&#x27;</span>,]</span><br><span class="line">    search_fields = [<span class="string">&#x27;nickname&#x27;</span>]</span><br><span class="line">    list_filter = [<span class="string">&#x27;goods_class&#x27;</span>, <span class="string">&#x27;label&#x27;</span>,]</span><br><span class="line">    model_icon = <span class="string">&#x27;fa fa-bars&#x27;</span></span><br><span class="line">    list_editable = [<span class="string">&#x27;goods_class&#x27;</span>, ]</span><br><span class="line">    <span class="comment">#,重写虚拟环境根目录下\Lib\site-packages\xadmin\views\edit.py中的formfield_for_dbfield</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">formfield_for_dbfield</span>(<span class="params">self, db_field, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 对MallGoodsClass这个表项的下拉框选择进行过滤</span></span><br><span class="line">        <span class="comment"># MallGoods中有一个goods_class商品分类外键MallGoodsClass，过滤掉外键MallGoodsClass中 </span></span><br><span class="line">        <span class="comment"># master_class为空的值</span></span><br><span class="line">        <span class="keyword">if</span> db_field.name == <span class="string">&quot;goods_class&quot;</span>:</span><br><span class="line">            kwargs[<span class="string">&quot;queryset&quot;</span>] = MallGoodsClass.objects.<span class="built_in">filter</span>(master_class__isnull=<span class="literal">False</span>)</span><br><span class="line">            <span class="comment"># 对assigned_recipient这个表项的下拉选择进行过滤</span></span><br><span class="line">        <span class="keyword">return</span> db_field.formfield(**<span class="built_in">dict</span>(**kwargs))</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().formfield_for_dbfield(db_field, **kwargs)</span><br><span class="line"></span><br><span class="line">xadmin.site.register(models.MallGoods, MallGoodsAdmin)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="xadmin即时编辑器去掉空标签">64、xadmin即时编辑器去掉空标签</h2><figure><img src="https://img-blog.csdnimg.cn/20190716151440115.png" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><p>虚拟环境根目录下-packages.py，在大概</p><p>129行增加：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">form.fields[fields[<span class="number">0</span>]].empty_label = <span class="literal">None</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure><img src="https://img-blog.csdnimg.cn/20190716151459680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><h2 id="用户增加的小组件让其他用户可见">65、用户增加的小组件，让其他用户可见</h2><p>找到虚拟环境根目录-packages.py</p><p>在548行、554行</p><figure><img src="https://img-blog.csdnimg.cn/20190723175537371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><p>改为：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@filter_hook</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_widgets</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.widget_customiz:</span><br><span class="line">            portal_pos = UserSettings.objects.<span class="built_in">filter</span>(</span><br><span class="line">               key=self.get_portal_key())</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(portal_pos):</span><br><span class="line">                portal_pos = portal_pos[<span class="number">0</span>].value</span><br><span class="line">                widgets = []</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> portal_pos:</span><br><span class="line">                    user_widgets = <span class="built_in">dict</span>([(uw.<span class="built_in">id</span>, uw) <span class="keyword">for</span> uw <span class="keyword">in</span> UserWidget.objects.<span class="built_in">filter</span>(page_id=self.get_page_id())])</span><br><span class="line">                    <span class="keyword">for</span> col <span class="keyword">in</span> portal_pos.split(<span class="string">&#x27;|&#x27;</span>):</span><br><span class="line">                        ws = []</span><br><span class="line">                        <span class="keyword">for</span> wid <span class="keyword">in</span> col.split(<span class="string">&#x27;,&#x27;</span>):</span><br><span class="line">                            <span class="keyword">try</span>:</span><br><span class="line">                                widget = user_widgets.get(<span class="built_in">int</span>(wid))</span><br><span class="line">                                <span class="keyword">if</span> widget:</span><br><span class="line">                                    ws.append(self.get_widget(widget))</span><br><span class="line">                            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                                <span class="keyword">import</span> logging</span><br><span class="line">                                logging.error(e, exc_info=<span class="literal">True</span>)</span><br><span class="line">                        widgets.append(ws)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> widgets</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.get_init_widget()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="pip-install-uwsgi出错">66、pip install uwsgi出错</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plugins/python/uwsgi_python.h:<span class="number">2</span>:<span class="number">20</span>: fatal error: Python.h: No such file <span class="keyword">or</span> directory</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先安装python3环境</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install python3-dev</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后再虚拟环境中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure><h2 id="xadmin后台加载数据慢解决方案">66、xadmin后台加载数据慢，解决方案</h2><p>list_filter: 过滤器要慎用，不要使用类似id这些数据量大的字段</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MallUserAdmin</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;用户管理&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;tp_icon&#x27;</span>, <span class="string">&#x27;nickname&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>, <span class="string">&#x27;level&#x27;</span>, <span class="string">&#x27;balance&#x27;</span>, <span class="string">&#x27;province&#x27;</span>, <span class="string">&#x27;city&#x27;</span>, <span class="string">&#x27;quxian&#x27;</span>]  <span class="comment"># 显示字段</span></span><br><span class="line">    search_fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;nickname&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>]  <span class="comment"># 搜索</span></span><br><span class="line">    list_filter = [<span class="string">&#x27;level&#x27;</span>, <span class="string">&#x27;province&#x27;</span>, <span class="string">&#x27;city&#x27;</span>, <span class="string">&#x27;quxian&#x27;</span>]  <span class="comment"># 过滤器</span></span><br><span class="line">    <span class="comment"># list_filter = [&#x27;id&#x27;, &#x27;level&#x27;, &#x27;province&#x27;, &#x27;city&#x27;, &#x27;quxian&#x27;]  # 如果加id，xadmin加载回来的数据就会很慢，所以不要在过滤器上使用id</span></span><br><span class="line">    list_per_page = <span class="number">30</span>  <span class="comment"># 默认每页数量</span></span><br><span class="line">    model_icon = <span class="string">&#x27;fa fa-users&#x27;</span>  <span class="comment"># 左侧图标</span></span><br><span class="line">    ordering = [<span class="string">&#x27;-id&#x27;</span>]  <span class="comment"># 排序</span></span><br><span class="line">    readonly_fields = [<span class="string">&#x27;subscribe&#x27;</span>, <span class="string">&#x27;wx_openid&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>]  <span class="comment"># 只读字段</span></span><br><span class="line">    is_addbalance = <span class="literal">True</span>   <span class="comment"># 加载自定义的插件</span></span><br><span class="line">    relfield_style = <span class="string">&#x27;fk-ajax&#x27;</span>  <span class="comment"># 其他表如果外键到用户表就做ajax搜索查询，不一次性加载数据</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="xadmin导出插件处理增加导出勾选数据项">67 、xadmin导出插件处理，增加导出勾选数据项</h2><p>常规的导出只有两个选择【导出表头】、【导出全部数据】</p><figure><img src="https://img-blog.csdnimg.cn/20190917141511283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><p>现在想要做的是增加一个选择，即【导出表头】、【导出全部数据】、【导出勾选数据】，如下图：</p><figure><img src="https://img-blog.csdnimg.cn/20190917141839822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><p>需要修改xadmin源代码，具体如下</p><h4 id="加载js文件">1、加载js文件</h4><p>找到虚拟环境-packages.py，在607行增加’xadmin.plugin.importexport.js’，如下图所示</p><figure><img src="https://img-blog.csdnimg.cn/20190917141853832.png" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><h4 id="修改export.py后端处理下载文件">2、修改export.py，后端处理下载文件</h4><p>找到虚拟环境-packages.py</p><p>在84行把rows = context[‘results’]修改成如下函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新增导出所选数据</span></span><br><span class="line"><span class="comment"># rows = context[&#x27;results&#x27;]  </span></span><br><span class="line">rows = []</span><br><span class="line">select_across = self.request.GET.get(<span class="string">&#x27;_select_across&#x27;</span>, <span class="literal">False</span>) == <span class="string">&#x27;1&#x27;</span></span><br><span class="line">selected = self.request.GET.get(<span class="string">&#x27;_selected_actions&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> self.request.GET.get(<span class="string">&#x27;selected&#x27;</span>, <span class="string">&#x27;off&#x27;</span>) == <span class="string">&#x27;on&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> select_across:</span><br><span class="line">        selected_pk = selected.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> context[<span class="string">&#x27;results&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span>(i[<span class="string">&#x27;object&#x27;</span>].<span class="built_in">id</span>) <span class="keyword">in</span> selected_pk:</span><br><span class="line">                rows.append(i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rows = context[<span class="string">&#x27;results&#x27;</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    rows = context[<span class="string">&#x27;results&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure><img src="https://img-blog.csdnimg.cn/2019091714200418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><p>3、 修改model_list.top_toolbar.exports.html 找到虚拟环境-packages_list.top_toolbar.exports.html</p><p>使用以下代码覆盖原文件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% load i18n %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group export&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;export-menu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle btn btn-default btn-sm&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-share&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> &#123;% trans &quot;Export&quot; %&#125; <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span> <span class="attr">role</span>=<span class="string">&quot;menu&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;dLabel&quot;</span>&gt;</span></span><br><span class="line">        &#123;% for et in export_types %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#export-modal-&#123;&#123;et.type&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-arrow-circle-down&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">i</span>&gt;</span> &#123;% trans &quot;Export&quot; %&#125; &#123;&#123;et.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;% for et in export_types %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;export-modal-&#123;&#123;et.type&#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span>&gt;</span>&#123;% trans &quot;Export&quot; %&#125; &#123;&#123;et.name&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">                        &#123;&#123; form_params|safe &#125;&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;export_type&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123;et.type&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 增加 导出所选数据 一栏 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_selected_actions&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_select_across&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">                            &#123;% if et.type == &quot;xlsx&quot; %&#125;</span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;export_xlsx_header&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;on&quot;</span>&gt;</span></span><br><span class="line">                            &#123;% trans &quot;Export with table header.&quot; %&#125;</span><br><span class="line">                            &#123;% endif %&#125;</span><br><span class="line">                            &#123;% if et.type == &quot;xls&quot; %&#125;</span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;export_xls_header&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;on&quot;</span>&gt;</span></span><br><span class="line">                            &#123;% trans &quot;Export with table header.&quot; %&#125;</span><br><span class="line">                            &#123;% endif %&#125;</span><br><span class="line">                            &#123;% if et.type == &quot;csv&quot; %&#125;</span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;export_csv_header&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;on&quot;</span>&gt;</span></span><br><span class="line">                            &#123;% trans &quot;Export with table header.&quot; %&#125;</span><br><span class="line">                            &#123;% endif %&#125;</span><br><span class="line">                            &#123;% if et.type == &quot;xml&quot; %&#125;</span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;export_xml_format&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;on&quot;</span>&gt;</span></span><br><span class="line">                            &#123;% trans &quot;Export with format.&quot; %&#125;</span><br><span class="line">                            &#123;% endif %&#125;</span><br><span class="line">                            &#123;% if et.type == &quot;json&quot; %&#125;</span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;export_json_format&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;on&quot;</span>&gt;</span></span><br><span class="line">                            &#123;% trans &quot;Export with format.&quot; %&#125;</span><br><span class="line">                            &#123;% endif %&#125;</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;all&quot;</span> <span class="attr">value</span>=<span class="string">&quot;on&quot;</span>&gt;</span> &#123;% trans &quot;Export all data.&quot; %&#125;</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 增加 导出所选数据 一栏 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;selected&quot;</span> <span class="attr">value</span>=<span class="string">&quot;on&quot;</span>&gt;</span> 导出勾选数据</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>&#123;% trans &quot;Close&quot; %&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success myexport  glyphicon glyphicon-export &quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">class</span>=<span class="string">&quot;fa fa-share&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> &#123;% trans &quot;Export&quot; %&#125;</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal-content --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal-dalog --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal --&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 如果是订单导出，把待出货订单设置成待收货订单</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;.myexport&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 当把订单导出时，需要修改订单状态为待收货状态</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> url = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">protocol</span> + <span class="string">&#x27;//&#x27;</span> + <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">host</span> + <span class="string">&quot;/exportorder/&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;input[name=&#x27;_select_across&#x27;]&quot;</span>).<span class="title function_">val</span>($(<span class="string">&quot;input[name=&#x27;select_across&#x27;]&quot;</span>).<span class="title function_">val</span>());</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> ($(<span class="string">&quot;input[name=&#x27;selected&#x27;]&quot;</span>).<span class="title function_">is</span>(<span class="string">&#x27;:checked&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> arr = [];</span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">each</span>($(<span class="string">&#x27;.action-select&#x27;</span>), <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (<span class="literal">true</span> == $(<span class="variable language_">this</span>).<span class="title function_">prop</span>(<span class="string">&#x27;checked&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">                        arr.<span class="title function_">push</span>($(<span class="variable language_">this</span>).<span class="title function_">val</span>());</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(arr.<span class="property">length</span> == <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&#x27;请先勾选导出数据&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> arr = []</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> order_type = $(<span class="string">&#x27;.breadcrumb li&#x27;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">text</span>().<span class="title function_">trim</span>()</span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&#x27;.grid-item&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params">index, el</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    arr.<span class="title function_">push</span>($(el).<span class="title function_">find</span>(<span class="string">&#x27;td&#x27;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">text</span>().<span class="title function_">trim</span>())</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (($(<span class="string">&#x27;.breadcrumb &gt; li&#x27;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">text</span>()).<span class="title function_">indexOf</span>(<span class="string">&#x27;订单&#x27;</span>) != -<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 5秒后执行</span></span></span><br><span class="line"><span class="language-javascript">                <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">url</span>: url,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">data</span>: &#123;<span class="string">&#x27;orderlist&#x27;</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arr), <span class="string">&#x27;order_type&#x27;</span>: order_type,&#125;,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">beforeSend</span>: <span class="keyword">function</span> (<span class="params">xhr</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                            xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;X-CSRFToken&quot;</span>, $.<span class="title function_">getCookie</span>(<span class="string">&quot;csrftoken&quot;</span>))</span></span><br><span class="line"><span class="language-javascript">                        &#125;,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">reload</span>();</span></span><br><span class="line"><span class="language-javascript">                        &#125;,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">xhr</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="title function_">alert</span>(<span class="string">&quot;出现未知错误&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">reload</span>();</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                &#125;, <span class="number">5000</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用f查询更新用户重要数据">68、使用F查询更新用户重要数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line"><span class="comment"># 使用F查询更新用户余额</span></span><br><span class="line">balance = <span class="number">5</span>  </span><br><span class="line">MallUser.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">1</span>).update(balance=F(<span class="string">&#x27;balance&#x27;</span>) + balance)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相当于sql的</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">update Malluser <span class="built_in">set</span> balance=balance + <span class="number">5</span> where <span class="built_in">id</span>=<span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="日志输出模块">69、日志输出模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"><span class="comment"># 全局函数</span></span><br><span class="line">PlATFORM = platform.system()</span><br><span class="line"><span class="keyword">if</span> (PlATFORM == <span class="string">&quot;Linux&quot;</span>):</span><br><span class="line">    <span class="comment"># linux系统,文件保存在var下</span></span><br><span class="line">    SERVER_LOG_PATH = <span class="string">&#x27;/var/mylog.log&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># windows系统,文件保存在D盘下</span></span><br><span class="line">    SERVER_LOG_PATH = <span class="string">&#x27;D:\mylog.log&#x27;</span></span><br><span class="line"><span class="comment"># 定义一个logging的对象，命名为mylog</span></span><br><span class="line">LOGGER = logging.getLogger(<span class="string">&#x27;mylog&#x27;</span>)</span><br><span class="line"><span class="comment"># 设置级别为WARNING</span></span><br><span class="line">LOGGER.setLevel(logging.WARNING)</span><br><span class="line"><span class="comment"># 创建一个handler，用于写入日志文件</span></span><br><span class="line">fh = logging.FileHandler(SERVER_LOG_PATH, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">fh.setLevel(logging.WARNING)</span><br><span class="line"><span class="comment"># 定义handler的输出格式</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>, datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">fh.setFormatter(formatter)</span><br><span class="line"><span class="comment"># 给Logger添加handler</span></span><br><span class="line">LOGGER.addHandler(fh)</span><br><span class="line"><span class="comment"># 不在控制台显示</span></span><br><span class="line">LOGGER.propagate = <span class="literal">False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="字典排序">70、字典排序</h2><p>字典在内存中发布是无序的，当想对键值或者键名进行排序时可以先把字典转成元组，这可以达到排序的目的。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score = &#123;<span class="string">&#x27;小明&#x27;</span>: &#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">90</span>, &#125;,</span><br><span class="line">     <span class="string">&#x27;小红&#x27;</span>: &#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">60</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">60</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">61</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">59</span>, &#125;,</span><br><span class="line">     <span class="string">&#x27;小黑&#x27;</span>: &#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">70</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">65</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">70</span>, &#125;,</span><br><span class="line">     <span class="string">&#x27;小白&#x27;</span>: &#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">80</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">65</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">80</span>, &#125;,</span><br><span class="line">     &#125;</span><br><span class="line"><span class="comment"># 对姓名进行排序，即对键名进行排序</span></span><br><span class="line">b = <span class="built_in">sorted</span>(score.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">show_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> info <span class="keyword">in</span> b:</span><br><span class="line">    <span class="comment"># print(info)</span></span><br><span class="line">    key, value = info[<span class="number">0</span>], info[<span class="number">1</span>]</span><br><span class="line">    show_str += <span class="string">&#x27;姓名：&#123;&#125;,平均分：&#123;&#125;，成绩：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(key,value[<span class="string">&#x27;avg_score&#x27;</span>], value) + <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;对姓名进行排序&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(show_str)</span><br><span class="line"><span class="comment"># 对平均分进行排序</span></span><br><span class="line">b = <span class="built_in">sorted</span>(score.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>][<span class="string">&#x27;avg_score&#x27;</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">show_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> info <span class="keyword">in</span> b:</span><br><span class="line">    <span class="comment"># print(info)</span></span><br><span class="line">    key, value = info[<span class="number">0</span>], info[<span class="number">1</span>]</span><br><span class="line">    show_str += <span class="string">&#x27;姓名：&#123;&#125;,平均分：&#123;&#125;，成绩：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(key,value[<span class="string">&#x27;avg_score&#x27;</span>], value) + <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;对平均分进行排序&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(show_str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对英语成绩进行排序</span></span><br><span class="line">b = <span class="built_in">sorted</span>(score.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>][<span class="string">&#x27;English&#x27;</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">show_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> info <span class="keyword">in</span> b:</span><br><span class="line">    <span class="comment"># print(info)</span></span><br><span class="line">    key, value = info[<span class="number">0</span>], info[<span class="number">1</span>]</span><br><span class="line">    show_str += <span class="string">&#x27;姓名：&#123;&#125;,平均分：&#123;&#125;，成绩：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(key,value[<span class="string">&#x27;avg_score&#x27;</span>], value) + <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;对英语成绩进行排序&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(show_str)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">对姓名进行排序</span><br><span class="line">姓名：小黑,平均分：<span class="number">70</span>，成绩：&#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">70</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">65</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">70</span>&#125;</span><br><span class="line">姓名：小红,平均分：<span class="number">60</span>，成绩：&#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">60</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">60</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">61</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">59</span>&#125;</span><br><span class="line">姓名：小白,平均分：<span class="number">80</span>，成绩：&#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">80</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">65</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">80</span>&#125;</span><br><span class="line">姓名：小明,平均分：<span class="number">90</span>，成绩：&#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">90</span>&#125;</span><br><span class="line"></span><br><span class="line">对平均分进行排序</span><br><span class="line">姓名：小明,平均分：<span class="number">90</span>，成绩：&#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">90</span>&#125;</span><br><span class="line">姓名：小白,平均分：<span class="number">80</span>，成绩：&#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">80</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">65</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">80</span>&#125;</span><br><span class="line">姓名：小黑,平均分：<span class="number">70</span>，成绩：&#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">70</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">65</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">70</span>&#125;</span><br><span class="line">姓名：小红,平均分：<span class="number">60</span>，成绩：&#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">60</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">60</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">61</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">59</span>&#125;</span><br><span class="line"></span><br><span class="line">对英语成绩进行排序</span><br><span class="line">姓名：小白,平均分：<span class="number">80</span>，成绩：&#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">80</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">65</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">80</span>&#125;</span><br><span class="line">姓名：小明,平均分：<span class="number">90</span>，成绩：&#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">90</span>&#125;</span><br><span class="line">姓名：小黑,平均分：<span class="number">70</span>，成绩：&#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">70</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">65</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">70</span>&#125;</span><br><span class="line">姓名：小红,平均分：<span class="number">60</span>，成绩：&#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">60</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">60</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">61</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">59</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="对列表中字典按多个键值排序">对列表中字典按多个键值排序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line">data = [</span><br><span class="line">    &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">300</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">255</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">256</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">455</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">322</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">676</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;,</span><br><span class="line">]</span><br><span class="line">data = <span class="built_in">sorted</span>(data, key=itemgetter(<span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;position&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">300</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;, </span><br><span class="line">&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">322</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;, </span><br><span class="line">&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;, </span><br><span class="line">&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">255</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;, </span><br><span class="line">&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">256</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;, </span><br><span class="line">&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">455</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;, </span><br><span class="line">&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">676</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;]</span><br></pre></td></tr></table></figure><h2 id="时间格式与字符串互转比较大小">71、时间格式与字符串互转、比较大小</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前时间转字符串</span></span><br><span class="line">now = datetime.datetime.strftime(datetime.datetime.now(), <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line"><span class="comment"># 字符串转时间格式</span></span><br><span class="line">now = datetime.datetime.strptime(now, <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">a = now + datetime.timedelta(minutes=-<span class="number">15</span>)</span><br><span class="line"><span class="comment"># 时间比较大小</span></span><br><span class="line"><span class="keyword">if</span> a &lt; now:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;yes&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="python把开头的字符串转中文">72、python把’开头的字符串转中文</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_data = <span class="string">&#x27;\\u7528\\u6237 ID \\u6216\\u5bc6\\u7801\\u9519\\u8bef&#x27;</span></span><br><span class="line"><span class="comment"># 字符串.encode(&#x27;utf-8&#x27;).decode(&#x27;unicode_escape&#x27;)</span></span><br><span class="line">str_data_to_zh = str_data.encode(<span class="string">&#x27;utf-8&#x27;</span>).decode(<span class="string">&#x27;unicode_escape&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(str_data_to_zh)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">用户 ID 或密码错误</span><br></pre></td></tr></table></figure><h2 id="django进行数据迁移时出现no-changes-detected解决方案">73、django进行数据迁移时出现No changes detected解决方案</h2><p>原因：可能是由于app下面没有migrations文件夹 所以需要创建这个文件夹，命令</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations --empty 你的app名称</span><br></pre></td></tr></table></figure><h2 id="ubuntu下载文件到windows桌面">74、ubuntu下载文件到windows桌面</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">apt install lrzsz</span><br><span class="line">sz <span class="number">123.</span>txt</span><br></pre></td></tr></table></figure><h2 id="git查看提交日志">75、git查看提交日志</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git log --author=<span class="string">&quot;ldc&quot;</span></span><br></pre></td></tr></table></figure><h2 id="python翻译模块">76、python翻译模块</h2><p>可以把英文翻译成中文，也可以把中文翻译成英文</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install  translate</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> translate <span class="keyword">import</span> Translator</span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;giant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca&#x27;</span></span><br><span class="line">translator = Translator(to_lang=<span class="string">&quot;chinese&quot;</span>)</span><br><span class="line">translation = translator.translate(name)</span><br><span class="line"><span class="built_in">print</span>(translation)</span><br><span class="line"></span><br><span class="line">translator= Translator(from_lang=<span class="string">&quot;chinese&quot;</span>,to_lang=<span class="string">&quot;english&quot;</span>)</span><br><span class="line">translation = translator.translate(<span class="string">&quot;我想你&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(translation)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">大熊猫，熊猫，熊猫熊，浣熊，大熊猫</span><br><span class="line">I missed you.</span><br></pre></td></tr></table></figure><h2 id="python实现字符串转字典">77、python实现字符串转字典</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">target_str = <span class="string">&#x27;&#123;&quot;h&quot;: 1, &quot;e&quot;: 2, &quot;l&quot;: 3, &quot;l&quot;: 4, &quot;o&quot;: 5&#125;&#x27;</span></span><br><span class="line">target_str2 = <span class="string">&quot;&#123;&#x27;h&#x27;: 1, &#x27;e&#x27;: 2, &#x27;l&#x27;: 3, &#x27;l&#x27;: 4, &#x27;o&#x27;: 5&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式1：使用json，缺点，字符串中不能出现单引号</span></span><br><span class="line"><span class="comment"># 由于 json 语法规定 数组或对象之中的字符串必须使用双引号，不能使用单引号</span></span><br><span class="line"><span class="comment"># 官网https://www.json.org/json-en.html上有一段描述是</span></span><br><span class="line"><span class="comment"># A string is a sequence of zero or more Unicode characters, wrapped in double quotes, using backslash escapes</span></span><br><span class="line"><span class="built_in">print</span>(json.loads(target_str))</span><br><span class="line"><span class="comment"># print(json.loads(target_str2))   # 使用json转这个字符串会报错 Expecting property name enclosed in double quotes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2：使用eval函数，缺点，不安全</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(target_str))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(target_str2))</span><br><span class="line"><span class="comment"># print(eval(&quot;__import__(&#x27;os&#x27;).system(&#x27;dir&#x27;)&quot;))  # 会列出当前的目录文件，如果字符串是一些删除命令，则可以把整个目录清空！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式3，使用ast.literal_eval，没有json与eval的缺点，推荐使用这个</span></span><br><span class="line"><span class="built_in">print</span>(ast.literal_eval(target_str))</span><br><span class="line"><span class="built_in">print</span>(ast.literal_eval(target_str2))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;h&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;l&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;h&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;l&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;h&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;l&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;h&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;l&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;h&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;l&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="django-app-如何在后台显示中文名">78、django app 如何在后台显示中文名</h2><p>1.在app (这里以user为例)下面的__init__.py文件中</p><p>添加:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">default_app_config = <span class="string">&#x27;user.apps.UserConfig&#x27;</span></span><br></pre></td></tr></table></figure><p>2.在apps.py中</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.apps <span class="keyword">import</span> AppConfig</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserConfig</span>(<span class="title class_ inherited__">AppConfig</span>):</span><br><span class="line">    name = <span class="string">&#x27;user&#x27;</span></span><br><span class="line">    verbose_name = <span class="string">&#x27;用户&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="使用python给excel指定行添加数据">79、使用python给Excel指定行添加数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl, sys</span><br><span class="line"></span><br><span class="line">wb = openpyxl.load_workbook(<span class="string">&#x27;b.xlsx&#x27;</span>)</span><br><span class="line">sheet = wb[<span class="string">&#x27;Sheet1&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在excel表格第二行添加新数据</span></span><br><span class="line">addrow = <span class="number">1</span>   <span class="comment"># 增加一行</span></span><br><span class="line">row = <span class="number">2</span>  <span class="comment"># 在第二行新增一行</span></span><br><span class="line">name = <span class="string">&#x27;b-back.xlsx&#x27;</span> <span class="comment"># 新的表名</span></span><br><span class="line"></span><br><span class="line">wb1 = openpyxl.Workbook()</span><br><span class="line">sheet1 = wb1[<span class="string">&#x27;Sheet&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制前row行</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, row):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, sheet.max_column + <span class="number">1</span>):</span><br><span class="line">        sheet1.cell(row=i, column=j).value = sheet.cell(row=i, column=j).value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制后row行</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row, sheet.max_row + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, sheet.max_column + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i == row:</span><br><span class="line">            <span class="comment"># 给第row行添加新的数据</span></span><br><span class="line">            sheet1.cell(row=row, column=j).value = <span class="string">&#x27;新增&#x27;</span></span><br><span class="line">        sheet1.cell(row=i + addrow, column=j).value = sheet.cell(row=i, column=j).value</span><br><span class="line"></span><br><span class="line">wb1.save(name)</span><br></pre></td></tr></table></figure><figure><img src="https://img-blog.csdnimg.cn/20200526120005871.png" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><h2 id="python中的format格式拼接字符串">80、python中的format格式拼接字符串</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;a&#125;,&#123;b&#125;&#x27;</span>.<span class="built_in">format</span>(**d))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125;,&#123;1&#125;,&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;d[<span class="string">&#x27;a&#x27;</span>]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>,<span class="number">2</span></span><br><span class="line">a,b,a</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="数据库inner-joinfull-joinleft-joinunionunion-all区别">81、数据库inner join、full join、left join、union、union all区别</h2><p>表a_test</p><figure><img src="https://img-blog.csdnimg.cn/20200529102527295.png#pic_center" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><p>表b_test</p><figure><img src="https://img-blog.csdnimg.cn/20200529102549669.png#pic_center" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><p>INNER JOIN</p><p>是A和B的交集</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SELECT * FROM a_test INNER JOIN b_test ON a_test.name = b_test.namesa</span><br><span class="line"></span><br><span class="line">Inner join 产生的结果集中，是A和B的交集。</span><br></pre></td></tr></table></figure><figure><img src="https://img-blog.csdnimg.cn/20200529102631494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><p>FULL OUTER JOIN</p><p>产生A和B的并集</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SELECT * FROM a_test FULL OUTER JOIN b_test ON a_test.name = b_test.name </span><br><span class="line"></span><br><span class="line">Full outer join 产生A和B的并集。</span><br><span class="line">但是需要注意的是，对于没有匹配的记录，则会以null做为值。</span><br><span class="line">可以使用IF NULL判断。</span><br></pre></td></tr></table></figure><figure><img src="https://img-blog.csdnimg.cn/20200529102702865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SELECT * FROM a_test FULL OUTER JOIN b_test ON a_test.name = b_test.name</span><br><span class="line">WHERE a_test.<span class="built_in">id</span> IS null OR b_test.<span class="built_in">id</span> IS null</span><br><span class="line"></span><br><span class="line">产生A表和B表没有交集的数据集。</span><br></pre></td></tr></table></figure><figure><img src="https://img-blog.csdnimg.cn/20200529102724731.png#pic_center" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><p>LEFT [OUTER] JOIN</p><p>产生表A的完全集，而B表中匹配的则有值，没有匹配的则以null值取代</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SELECT * FROM a_test LEFT OUTER JOIN b_test ON a_test.name = b_test.name</span><br><span class="line">有些数据库可以不要OUTER</span><br><span class="line">SELECT * FROM a_test LEFT  JOIN b_test ON a_test.name = b_test.name</span><br><span class="line">Left outer join 产生表A的完全集，而B表中匹配的则有值，没有匹配的则以null值取代。</span><br></pre></td></tr></table></figure><figure><img src="https://img-blog.csdnimg.cn/20200529102808618.png#pic_center" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SELECT * FROM a_test LEFT OUTER JOIN b_test ON a_test.name = b_test.name </span><br><span class="line">WHERE b_test.<span class="built_in">id</span> IS null</span><br><span class="line"></span><br><span class="line">产生在A表中有而在B表中没有的集合。</span><br></pre></td></tr></table></figure><figure><img src="https://img-blog.csdnimg.cn/20200529102828846.png#pic_center" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><p>RIGHT [OUTER] JOIN</p><p>RIGHT OUTER JOIN 是后面的表为基础，与LEFT OUTER JOIN用法类似。</p><p>UNION 与 UNION ALL</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">UNION 操作符用于合并两个或多个 SELECT 语句的结果集。</span><br><span class="line">请注意，UNION 内部的 SELECT 语句必须拥有相同数量的列。</span><br><span class="line">列也必须拥有相似的数据类型。</span><br><span class="line">同时，每条 SELECT 语句中的列的顺序必须相同。</span><br><span class="line">UNION 只选取记录，而UNION ALL会列出所有记录。</span><br><span class="line"></span><br><span class="line">SELECT name FROM a_test UNION SELECT name FROM b_test</span><br><span class="line"></span><br><span class="line">选取不同值</span><br></pre></td></tr></table></figure><figure><img src="https://img-blog.csdnimg.cn/20200529102855430.png#pic_center" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SELECT a_test.<span class="built_in">id</span>,a_test.name  FROM a_test </span><br><span class="line">UNION </span><br><span class="line">SELECT b_test.<span class="built_in">id</span>,b_test.name FROM b_test</span><br><span class="line"></span><br><span class="line">由于 <span class="built_in">id</span> <span class="number">51</span> xh   与 <span class="built_in">id</span> <span class="number">4</span> xh 并不相同，不合并</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure><img src="https://img-blog.csdnimg.cn/20200529102917488.png#pic_center" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SELECT name FROM a_test UNION ALL SELECT name FROM b_test</span><br><span class="line"></span><br><span class="line">全部列出来</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure><img src="https://img-blog.csdnimg.cn/20200529102937801.png#pic_center" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><p>还需要注意的是我们还有一个是“交差集” cross join, 这种Join没有办法用文式图表示，因为其就是把表A和表B的数据进行一个N*M的组合，即笛卡尔积。</p><p>表达式如下：SELECT * FROM a_test CROSS JOIN b_test</p><p>这个笛卡尔乘积会产生 4 x 4 = 16 条记录，一般来说，我们很少用到这个语法。但是我们得小心，如果不是使用嵌套的select语句，一般系统都会产生笛卡尔乘积然再做过滤。这是对于性能来说是非常危险的，尤其是表很大的时候。</p><h2 id="windows电脑查看端口使用情况">82、windows电脑查看端口使用情况</h2><p>找出8000端口对应的PID进程，命令为：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">netstat -ano|findstr <span class="number">8000</span></span><br></pre></td></tr></table></figure><p>进程信息如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TCP    <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8000</span>           <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">0</span>              LISTENING       <span class="number">1620</span></span><br><span class="line">UDP    <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8000</span>           *:*                                    <span class="number">1620</span></span><br></pre></td></tr></table></figure><p>找出进程对应的详细信息：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tasklist |findstr <span class="number">1620</span></span><br><span class="line"></span><br><span class="line">KGService.exe                 <span class="number">1620</span> Console                    <span class="number">1</span>     <span class="number">18</span>,<span class="number">696</span> K</span><br></pre></td></tr></table></figure><p>关进程：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">taskkill /pid <span class="number">1620</span> /F</span><br></pre></td></tr></table></figure><p>查看程序占用内存 比如查看python占用运行内存</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tasklist  /fi <span class="string">&quot;imagename eq python.exe&quot;</span></span><br></pre></td></tr></table></figure><figure><img src="https://img-blog.csdnimg.cn/a61afd069e964e6f9d755c5c1884ca6f.png" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><h2 id="django生成表和反向生成model">83、Django生成表和反向生成Model</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">正向生成：</span><br><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br><span class="line"></span><br><span class="line">反向：</span><br><span class="line">会根据设置的数据库中的表在自动生成对应的Model代码，并打印出来</span><br><span class="line">python manage.py inspectdb</span><br><span class="line"></span><br><span class="line">以直接将打印的代码直接导入到指定的Model文件中</span><br><span class="line">python manage.py inspectdb &gt; models.py</span><br></pre></td></tr></table></figure><h2 id="windows的hosts文件位置">84、windows的hosts文件位置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\drivers\etc\hosts</span><br></pre></td></tr></table></figure><h2 id="postgresql数据库">85、postgresql数据库</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果表存在就先删除</span></span><br><span class="line">drop table <span class="keyword">if</span> exists student;</span><br><span class="line"><span class="comment"># 创建学生表</span></span><br><span class="line"><span class="comment"># id      serial not null  表示id自增</span></span><br><span class="line"><span class="comment"># id      integer not null  表示id不自增</span></span><br><span class="line">create table student</span><br><span class="line">(</span><br><span class="line">    <span class="built_in">id</span>                    serial <span class="keyword">not</span> null</span><br><span class="line">        constraint student_pk</span><br><span class="line">            primary key,</span><br><span class="line">    name                  varchar,</span><br><span class="line">    class_id              integer,</span><br><span class="line">    height                numeric,</span><br><span class="line">    weight                numeric,</span><br><span class="line">    write_date            timestamp</span><br><span class="line">    </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">comment on table student <span class="keyword">is</span> <span class="string">&#x27;学生表&#x27;</span>;</span><br><span class="line"></span><br><span class="line">comment on column student.name <span class="keyword">is</span> <span class="string">&#x27;名称&#x27;</span>;</span><br><span class="line"></span><br><span class="line">comment on column student.class_id <span class="keyword">is</span> <span class="string">&#x27;班级ID&#x27;</span>;</span><br><span class="line"></span><br><span class="line">comment on column student.height <span class="keyword">is</span> <span class="string">&#x27;身高&#x27;</span>;</span><br><span class="line"></span><br><span class="line">comment on column student.weight <span class="keyword">is</span> <span class="string">&#x27;体重&#x27;</span>;</span><br><span class="line"></span><br><span class="line">comment on column student.write_date <span class="keyword">is</span> <span class="string">&#x27;修改时间&#x27;</span>;</span><br><span class="line"></span><br><span class="line">alter table student</span><br><span class="line">    owner to odoo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">update user <span class="built_in">set</span> name=<span class="string">&#x27;张三&#x27;</span> where <span class="built_in">id</span>=<span class="number">111</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新表a的字段为表b的值</span></span><br><span class="line">update account_invoice </span><br><span class="line"><span class="built_in">set</span> sale_order_id=so.<span class="built_in">id</span> </span><br><span class="line"><span class="keyword">from</span> sale_order so </span><br><span class="line">where account_invoice.origin=so.name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增</span></span><br><span class="line">insert into <span class="string">&quot;user&quot;</span> (name,sex) values (<span class="string">&#x27;小明&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;小红&#x27;</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment"># 新增或更新</span></span><br><span class="line">如果<span class="built_in">id</span>冲突就更新</span><br><span class="line">INSERT INTO  student(<span class="built_in">id</span>, name)</span><br><span class="line">   VALUES(<span class="number">12</span>, <span class="string">&#x27;小明&#x27;</span>),(<span class="number">13</span>, <span class="string">&#x27;小红&#x27;</span>)</span><br><span class="line">   ON conflict(<span class="built_in">id</span>) DO UPDATE</span><br><span class="line">   SET name =<span class="string">&#x27;未知&#x27;</span>;</span><br><span class="line">如果<span class="built_in">id</span>冲突就什么也不做</span><br><span class="line">INSERT INTO  student(<span class="built_in">id</span>, name)</span><br><span class="line">   VALUES(<span class="number">12</span>, <span class="string">&#x27;小明&#x27;</span>),(<span class="number">13</span>, <span class="string">&#x27;小红&#x27;</span>)</span><br><span class="line">   ON conflict(<span class="built_in">id</span>) DO NOTHING;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把一个表中的数据插入到另一个表中</span></span><br><span class="line">insert into 目标表名 (column1,column2,columnn) select value1,value2,valuen <span class="keyword">from</span>  源表名</span><br><span class="line">比如：</span><br><span class="line">insert into student (name, classs_name,create_date) select  student_name <span class="keyword">as</span> name, class_name, now() <span class="keyword">from</span> class_table;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前时间</span></span><br><span class="line">now()</span><br><span class="line">select now()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">DELETE FROM table_name [WHERE Clause]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加字段</span></span><br><span class="line">alter table 表名 add column 列名 类型;</span><br><span class="line"><span class="comment"># 删除字段</span></span><br><span class="line">alter table 表名 dropcolumn 列名 ;</span><br><span class="line"></span><br><span class="line"><span class="comment"># postgresql数据库查看表所有字段</span></span><br><span class="line">select * <span class="keyword">from</span> information_schema.columns where table_schema=<span class="string">&#x27;public&#x27;</span> <span class="keyword">and</span> table_name=<span class="string">&#x27;表名&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># postgresql获取所有表名</span></span><br><span class="line">select tablename <span class="keyword">from</span> pg_tables where schemaname=<span class="string">&#x27;public&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对查询结果按id降序显示</span></span><br><span class="line">select * <span class="keyword">from</span> table_name order by <span class="built_in">id</span> desc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对查询结果按id升序显示</span></span><br><span class="line">select * <span class="keyword">from</span> table_name order by <span class="built_in">id</span> asc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转义字符, 查找name中包含单引号的记录</span></span><br><span class="line">select * <span class="keyword">from</span> student where name like  E<span class="string">&#x27;%\&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看表记录总数</span></span><br><span class="line">select relname <span class="keyword">as</span> TABLE_NAME, reltuples <span class="keyword">as</span> rowCounts <span class="keyword">from</span> pg_class where relkind = <span class="string">&#x27;r&#x27;</span> <span class="keyword">and</span> relnamespace = (select oid <span class="keyword">from</span> pg_namespace where nspname=<span class="string">&#x27;public&#x27;</span>) order by rowCounts desc;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将结果转换为数组</span></span><br><span class="line">SELECT array(SELECT <span class="string">&quot;name&quot;</span> FROM sale_order);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数组合并为字符串</span></span><br><span class="line">select array_to_string(array[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 联合子集更新，把sale_order_line的name连接换行符，然后按id更新到表a_test中对应的name</span></span><br><span class="line">update a_test <span class="built_in">set</span> name=array_to_string(array(select name <span class="keyword">from</span> sale_order_line where order_id=a_test.<span class="built_in">id</span>),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># PostgreSQL合并查询同一列的多条记录，针对一对多，多对多字段</span></span><br><span class="line">比如表：</span><br><span class="line"></span><br><span class="line"><span class="built_in">id</span>   name                  </span><br><span class="line"><span class="number">1</span>    小明                   </span><br><span class="line"><span class="number">1</span>    小红                     <span class="built_in">id</span>   name</span><br><span class="line"><span class="number">1</span>    小亮        --&gt;          <span class="number">1</span>    小明，小亮，小红</span><br><span class="line"><span class="number">2</span>    小强                     <span class="number">2</span>    小强，小王</span><br><span class="line"><span class="number">2</span>    小王</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">    <span class="built_in">id</span>, array_to_string(ARRAY(SELECT unnest(array_agg(name order by name desc))),<span class="string">&#x27;,&#x27;</span>) AS all_name</span><br><span class="line">FROM  </span><br><span class="line">    student</span><br><span class="line">GROUP BY <span class="built_in">id</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># case语句</span></span><br><span class="line"><span class="keyword">case</span> var</span><br><span class="line">when condition1 then statement1</span><br><span class="line">when condition2 then statement2</span><br><span class="line"><span class="keyword">else</span> statementn</span><br><span class="line">end <span class="keyword">as</span> new_name</span><br><span class="line"></span><br><span class="line">比如：</span><br><span class="line">select <span class="keyword">case</span> name</span><br><span class="line">when <span class="string">&#x27;小明&#x27;</span> then <span class="string">&#x27;xm&#x27;</span></span><br><span class="line">when <span class="string">&#x27;小红&#x27;</span> then <span class="string">&#x27;xh&#x27;</span></span><br><span class="line">when <span class="string">&#x27;小刚&#x27;</span> then <span class="string">&#x27;xg&#x27;</span></span><br><span class="line"><span class="keyword">else</span> <span class="string">&#x27;xw&#x27;</span></span><br><span class="line">end <span class="keyword">as</span> short_name</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时表、字符串合并、类型转换、时间格式转换、当前时间</span></span><br><span class="line">WITH TEMP AS ( </span><br><span class="line">SELECT CAST ( concat ( bam.account_period_code, <span class="string">&#x27;-01&#x27;</span> ) AS TIMESTAMP ) </span><br><span class="line">   AS account_period_time </span><br><span class="line"> FROM bi_account_move AS bam ) </span><br><span class="line">SELECT</span><br><span class="line">account_period_time,</span><br><span class="line">to_char(CURRENT_DATE,<span class="string">&#x27;yyyy-MM-dd hh24:MI:ss&#x27;</span>) <span class="keyword">as</span> current_date,</span><br><span class="line">to_char( account_period_time, <span class="string">&#x27;yyyy&#x27;</span> ) <span class="keyword">as</span> year,</span><br><span class="line">to_char( account_period_time, <span class="string">&#x27;MM&#x27;</span> ) <span class="keyword">as</span> month,</span><br><span class="line">to_char( account_period_time, <span class="string">&#x27;dd&#x27;</span> ) <span class="keyword">as</span> day </span><br><span class="line">FROM TEMP</span><br><span class="line"></span><br><span class="line">比如：</span><br><span class="line">account_period_timecurrent_date    yearmonthday</span><br><span class="line"><span class="number">2019</span>-06-01 <span class="number">0</span>:<span class="number">00</span>:<span class="number">00</span><span class="number">2020</span>-06-<span class="number">24</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span><span class="number">2019</span> 06     01</span><br><span class="line"><span class="number">2019</span>-06-01 <span class="number">0</span>:<span class="number">00</span>:<span class="number">00</span><span class="number">2020</span>-06-<span class="number">24</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span><span class="number">2019</span> 06     01</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个字符串拼接</span></span><br><span class="line">select </span><br><span class="line">concat(<span class="string">&#x27;payment_&#x27;</span>, CAST(ap.<span class="built_in">id</span> <span class="keyword">as</span> varchar)) <span class="keyword">as</span> line_key</span><br><span class="line"><span class="keyword">from</span> ap</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将查询所得结果集的某一字段拼接成字符串，默认的是逗号</span></span><br><span class="line">select GROUP_CONCAT(<span class="built_in">id</span>) <span class="keyword">from</span> test where <span class="built_in">id</span>&gt;<span class="number">5</span>;</span><br><span class="line">结果为：</span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span></span><br><span class="line"><span class="comment"># 使用其他分隔符拼接</span></span><br><span class="line">select GROUP_CONCAT(<span class="built_in">id</span> separator <span class="string">&#x27;-&#x27;</span>) <span class="keyword">from</span> test where <span class="built_in">id</span>&gt;<span class="number">5</span>;</span><br><span class="line">结果为：</span><br><span class="line"><span class="number">1</span>-<span class="number">2</span>-<span class="number">3</span>-<span class="number">4</span>-<span class="number">5</span>-<span class="number">6</span>-<span class="number">7</span></span><br><span class="line"><span class="comment"># 多个临时表</span></span><br><span class="line">WITH temp_student AS ( SELECT ID, NAME, sex FROM student WHERE sex = TRUE ),</span><br><span class="line">temp_class AS (</span><br><span class="line">SELECT</span><br><span class="line">ID,</span><br><span class="line">NAME,</span><br><span class="line">student_id,</span><br><span class="line">teacher_id</span><br><span class="line">FROM</span><br><span class="line">the_class </span><br><span class="line">),</span><br><span class="line">temp_teacher AS (</span><br><span class="line">SELECT </span><br><span class="line">  ID,</span><br><span class="line">NAME,</span><br><span class="line">age </span><br><span class="line">FROM</span><br><span class="line">teacher </span><br><span class="line">) </span><br><span class="line">SELECT</span><br><span class="line">ts.NAME AS student_name,</span><br><span class="line">tc.NAME AS class_name,</span><br><span class="line">te.NAME AS teacher_name</span><br><span class="line"><span class="keyword">from</span> temp_student <span class="keyword">as</span> ts</span><br><span class="line">LEFT JOIN temp_class AS tc ON tc.student_id = ts.ID  </span><br><span class="line">LEFT JOIN teacher AS te ON te.<span class="built_in">id</span> = tc.teacher_id  </span><br><span class="line"></span><br><span class="line"><span class="comment"># null转成有意义的值</span></span><br><span class="line">select COALESCE(name, <span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> name <span class="keyword">from</span> a_test</span><br><span class="line">意思就是如果name为null，就转为空字符串</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串截取</span></span><br><span class="line">select SUBSTRING(<span class="string">&#x27;abcd&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>); -- result:ab 表示从下标从<span class="number">1</span>开始,截取<span class="number">2</span>个字符</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 interval 时间相加减(+/-)</span></span><br><span class="line">当前时间 + <span class="number">10</span>秒，</span><br><span class="line">select to_char(now() + interval <span class="string">&#x27;10 second&#x27;</span>, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>)  <span class="keyword">as</span> reqDate <span class="keyword">from</span> account_period;</span><br><span class="line">当前时间 - <span class="number">10</span>秒</span><br><span class="line">select to_char(now() + interval <span class="string">&#x27;-10 second&#x27;</span>, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>)  <span class="keyword">as</span> reqDate <span class="keyword">from</span> account_period;</span><br><span class="line"> </span><br><span class="line">当前时间 + <span class="number">10</span>分，</span><br><span class="line">select to_char(now() + interval <span class="string">&#x27;10 minute&#x27;</span>, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>)  <span class="keyword">as</span> reqDate  <span class="keyword">from</span> account_period;</span><br><span class="line"> </span><br><span class="line">当前时间 + <span class="number">10</span>时，</span><br><span class="line">select to_char(now() + interval <span class="string">&#x27;10 hour&#x27;</span>, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>)  <span class="keyword">as</span> reqDate <span class="keyword">from</span> account_period;</span><br><span class="line"> </span><br><span class="line">当前时间 + <span class="number">10</span>天，</span><br><span class="line">select to_char(now() + interval <span class="string">&#x27;10 day&#x27;</span>, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>)  <span class="keyword">as</span> reqDate <span class="keyword">from</span> account_period;</span><br><span class="line"></span><br><span class="line">当前时间 + <span class="number">10</span>年，</span><br><span class="line">select to_char(now() + interval <span class="string">&#x27;10 year&#x27;</span>, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>)  <span class="keyword">as</span> reqDate <span class="keyword">from</span> account_period;</span><br><span class="line"></span><br><span class="line"><span class="comment"># UNION types numeric and text cannot be matched</span></span><br><span class="line">NULL::NUMERIC</span><br><span class="line"> 这个问题，是因为几个sql组合在一起时，同一个字段的值，遇到null时，需要进行类型转换。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对行记录定义行编号，使用函数ROW_NUMBER()</span></span><br><span class="line"><span class="comment"># 按分数进行降序，然后给行记录标记行编号，可以作为排名来使用</span></span><br><span class="line">select           </span><br><span class="line">ROW_NUMBER() OVER (ORDER BY score desc) AS sequence_number,</span><br><span class="line">name,score</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">b_test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数字转字符串  </span></span><br><span class="line">select cast(<span class="number">123</span> <span class="keyword">as</span> VARCHAR); </span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串转数字  </span></span><br><span class="line">select cast(<span class="string">&#x27;123&#x27;</span> <span class="keyword">as</span> INTEGER);</span><br></pre></td></tr></table></figure><h2 id="python控制台输出带颜色的文字方法">86、python控制台输出带颜色的文字方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#格式：　　设置颜色开始 ：\033[显示方式;前景色;背景色m</span></span><br><span class="line"><span class="comment">#说明：</span></span><br><span class="line">前景色            背景色           颜色</span><br><span class="line">---------------------------------------</span><br><span class="line"><span class="number">30</span>                <span class="number">40</span>              黑色</span><br><span class="line"><span class="number">31</span>                <span class="number">41</span>              红色</span><br><span class="line"><span class="number">32</span>                <span class="number">42</span>              绿色</span><br><span class="line"><span class="number">33</span>                <span class="number">43</span>              黃色</span><br><span class="line"><span class="number">34</span>                <span class="number">44</span>              蓝色</span><br><span class="line"><span class="number">35</span>                <span class="number">45</span>              紫红色</span><br><span class="line"><span class="number">36</span>                <span class="number">46</span>              青蓝色</span><br><span class="line"><span class="number">37</span>                <span class="number">47</span>              白色</span><br><span class="line">显示方式           意义</span><br><span class="line">-------------------------</span><br><span class="line"><span class="number">0</span>                终端默认设置</span><br><span class="line"><span class="number">1</span>                高亮显示</span><br><span class="line"><span class="number">4</span>                使用下划线</span><br><span class="line"><span class="number">5</span>                闪烁</span><br><span class="line"><span class="number">7</span>                反白显示</span><br><span class="line"><span class="number">8</span>                不可见</span><br><span class="line"> </span><br><span class="line"><span class="comment">#例子：</span></span><br><span class="line">\033[<span class="number">1</span>;<span class="number">31</span>;40m    &lt;!--<span class="number">1</span>-高亮显示 <span class="number">31</span>-前景色红色  <span class="number">40</span>-背景色黑色--&gt;</span><br><span class="line">\033[0m          &lt;!--采用终端默认设置，即取消颜色设置--&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">例子</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;紫红字体 \033[1;35m hello world \033[0m!&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;褐色背景绿色字体 \033[1;32;43m hello world \033[0m!&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\033[1;33;44mhello world\033[0m&#x27;</span>)</span><br></pre></td></tr></table></figure><figure><img src="https://img-blog.csdnimg.cn/20200615143709116.png" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><h2 id="控制台输出白色方框">87、控制台输出白色方框</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;█&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="xadmin后台编辑多对多字段">88、xadmin后台编辑多对多字段</h2><p>在models.py定义了多对多字段，想要在编辑时可以灵活使用这个字段的话，可以按以下方法设置： modes.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    title = models.CharField(verbose_name=<span class="string">&quot;书名&quot;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    second_title = models.CharField(verbose_name=<span class="string">&quot;副标题&quot;</span>, max_length=<span class="number">32</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    author = models.CharField(verbose_name=<span class="string">&quot;作者&quot;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    translator = models.CharField(verbose_name=<span class="string">&quot;译者&quot;</span>, max_length=<span class="number">32</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    intro = models.TextField(verbose_name=<span class="string">&quot;描述&quot;</span>)</span><br><span class="line">    pic = models.FileField(verbose_name=<span class="string">&quot;封面图片&quot;</span>, max_length=<span class="number">64</span>, upload_to=<span class="string">&#x27;book_cover&#x27;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    tags = models.ManyToManyField(Tags, verbose_name=<span class="string">&#x27;书籍标签&#x27;</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    prizes = models.ManyToManyField(Prizes, verbose_name=<span class="string">&#x27;获奖详情&#x27;</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    sump = models.IntegerField(verbose_name=<span class="string">&quot;收藏人数&quot;</span>, default=<span class="number">0</span>)</span><br><span class="line">    rate_num = models.IntegerField(verbose_name=<span class="string">&quot;评分人数&quot;</span>, default=<span class="number">0</span>)</span><br><span class="line">    num = models.IntegerField(verbose_name=<span class="string">&quot;浏览量&quot;</span>, default=<span class="number">0</span>)</span><br><span class="line">    published_time = models.DateField(blank=<span class="literal">True</span>, null=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;出版时间&#x27;</span>)</span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;创建时间&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;book&#x27;</span></span><br><span class="line">        verbose_name = <span class="string">&quot;图书&quot;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&quot;图书&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br></pre></td></tr></table></figure><p>adminx.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 书籍管理</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookAdmin</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    search_fields = [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;author&#x27;</span>, <span class="string">&#x27;intro&#x27;</span>]  <span class="comment"># 检索字段</span></span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;show_pic&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;second_title&#x27;</span>, <span class="string">&#x27;author&#x27;</span>, <span class="string">&#x27;translator&#x27;</span>, <span class="string">&#x27;published_time&#x27;</span>, <span class="string">&#x27;intro&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;tags&#x27;</span>, <span class="string">&#x27;prizes&#x27;</span>, <span class="string">&#x27;num&#x27;</span>, <span class="string">&#x27;sump&#x27;</span>, <span class="string">&#x27;rate_num&#x27;</span>]  <span class="comment"># 要显示的字段</span></span><br><span class="line">    list_filter = [<span class="string">&#x27;published_time&#x27;</span>, <span class="string">&#x27;tags&#x27;</span>, <span class="string">&#x27;prizes&#x27;</span>]  <span class="comment"># 分组过滤的字段</span></span><br><span class="line">    ordering = (<span class="string">&#x27;id&#x27;</span>,)  <span class="comment"># 设置默认排序字段，负号表示降序排序</span></span><br><span class="line">    list_per_page = <span class="number">30</span>  <span class="comment"># 默认每页显示多少条记录，默认是100条</span></span><br><span class="line">    model_icon = <span class="string">&#x27;fa fa-book&#x27;</span>  <span class="comment"># 左侧小图标</span></span><br><span class="line">    list_editable = [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;author&#x27;</span>, <span class="string">&#x27;intro&#x27;</span>, <span class="string">&#x27;published_time&#x27;</span>]  <span class="comment"># 可编辑字段</span></span><br><span class="line">    style_fields = &#123;<span class="string">&#x27;tags&#x27;</span>: <span class="string">&#x27;m2m_transfer&#x27;</span>, <span class="string">&#x27;prizes&#x27;</span>: <span class="string">&#x27;m2m_transfer&#x27;</span>&#125;  <span class="comment"># 控制字段的显示样式</span></span><br><span class="line">    filter_horizontal = (<span class="string">&#x27;tags&#x27;</span>, <span class="string">&#x27;prizes&#x27;</span>)  <span class="comment"># 水平选择编辑多对多字段</span></span><br></pre></td></tr></table></figure><p>重点是设置style_fields 和filter_horizontal ，效果：</p><figure><img src="https://img-blog.csdnimg.cn/20200621214122315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><h2 id="django后台通过按钮显示textfield字段内容">89、Django后台通过按钮显示TextField字段内容</h2><p>由于TextField字段类型内容可能很长，在后台显示时很占屏幕位置，可以通过按钮来控制显示，代码如下： models.py中定义了一个TextField字段类型：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Prizes</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&quot;奖项&quot;</span>)</span><br><span class="line">    intro = models.TextField(blank=<span class="literal">True</span>, null=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;简介&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;prizes&#x27;</span></span><br><span class="line">        verbose_name = <span class="string">&quot;奖项&quot;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&quot;奖项&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure><p>这里使用xadmin作为后台管理框架，在adminx.py中代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xadmin</span><br><span class="line"><span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line"><span class="keyword">from</span> xadmin <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 奖项管理</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PrizesAdmin</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    search_fields = [<span class="string">&#x27;name&#x27;</span>]  <span class="comment"># 检索字段</span></span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;show_intro&#x27;</span>]</span><br><span class="line">    list_filter = [<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    ordering = (<span class="string">&#x27;id&#x27;</span>,)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_intro</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="comment"># 显示简介</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> obj.intro:</span><br><span class="line">            <span class="keyword">return</span> mark_safe(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(obj.intro) &lt; <span class="number">20</span>:</span><br><span class="line">            <span class="keyword">return</span> mark_safe(obj.intro)</span><br><span class="line"></span><br><span class="line">        short_id = <span class="string">f&#x27;<span class="subst">&#123;obj._meta.db_table&#125;</span>_short_text_<span class="subst">&#123;obj.<span class="built_in">id</span>&#125;</span>&#x27;</span></span><br><span class="line">        short_text_len = <span class="built_in">len</span>(obj.intro) // <span class="number">4</span></span><br><span class="line">        short_text = obj.intro[:short_text_len] + <span class="string">&#x27;......&#x27;</span></span><br><span class="line">        detail_id = <span class="string">f&#x27;<span class="subst">&#123;obj._meta.db_table&#125;</span>_detail_text_<span class="subst">&#123;obj.<span class="built_in">id</span>&#125;</span>&#x27;</span></span><br><span class="line">        detail_text = obj.intro</span><br><span class="line"></span><br><span class="line">        text = <span class="string">&quot;&quot;&quot;&lt;style type=&quot;text/css&quot;&gt;</span></span><br><span class="line"><span class="string">                        #%s,%s &#123;padding:10px;border:1px solid green;&#125; </span></span><br><span class="line"><span class="string">                  &lt;/style&gt;</span></span><br><span class="line"><span class="string">                    &lt;script type=&quot;text/javascript&quot;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                    function openShutManager(oSourceObj,oTargetObj,shutAble,oOpenTip,oShutTip,oShortObj)&#123;</span></span><br><span class="line"><span class="string">                        var sourceObj = typeof oSourceObj == &quot;string&quot; ? document.getElementById(oSourceObj) : oSourceObj;</span></span><br><span class="line"><span class="string">                        var targetObj = typeof oTargetObj == &quot;string&quot; ? document.getElementById(oTargetObj) : oTargetObj;</span></span><br><span class="line"><span class="string">                        var shortObj = typeof oShortObj == &quot;string&quot; ? document.getElementById(oShortObj) : oShortObj;</span></span><br><span class="line"><span class="string">                        var openTip = oOpenTip || &quot;&quot;;</span></span><br><span class="line"><span class="string">                        var shutTip = oShutTip || &quot;&quot;;</span></span><br><span class="line"><span class="string">                        if(targetObj.style.display!=&quot;none&quot;)&#123;</span></span><br><span class="line"><span class="string">                           if(shutAble) return;</span></span><br><span class="line"><span class="string">                           targetObj.style.display=&quot;none&quot;;</span></span><br><span class="line"><span class="string">                           shortObj.style.display=&quot;block&quot;;</span></span><br><span class="line"><span class="string">                           if(openTip  &amp;&amp;  shutTip)&#123;</span></span><br><span class="line"><span class="string">                            sourceObj.innerHTML = shutTip; </span></span><br><span class="line"><span class="string">                           &#125;</span></span><br><span class="line"><span class="string">                        &#125; else &#123;</span></span><br><span class="line"><span class="string">                           targetObj.style.display=&quot;block&quot;;</span></span><br><span class="line"><span class="string">                           shortObj.style.display=&quot;none&quot;;</span></span><br><span class="line"><span class="string">                           if(openTip  &amp;&amp;  shutTip)&#123;</span></span><br><span class="line"><span class="string">                            sourceObj.innerHTML = openTip; </span></span><br><span class="line"><span class="string">                           &#125;</span></span><br><span class="line"><span class="string">                        &#125;</span></span><br><span class="line"><span class="string">                        &#125;</span></span><br><span class="line"><span class="string">                    &lt;/script&gt;</span></span><br><span class="line"><span class="string">                    &lt;p id=&quot;%s&quot;&gt;%s&lt;/p&gt;</span></span><br><span class="line"><span class="string">                    &lt;p&gt;&lt;a href=&quot;###&quot; οnclick=&quot;openShutManager(this,&#x27;%s&#x27;,false,&#x27;点击关闭&#x27;,&#x27;点击展开&#x27;,&#x27;%s&#x27;)&quot;&gt;点击展开&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                    &lt;p id=&quot;%s&quot; style=&quot;display:none&quot;&gt;</span></span><br><span class="line"><span class="string">                       %s</span></span><br><span class="line"><span class="string">                    &lt;/p&gt;</span></span><br><span class="line"><span class="string">                    &quot;&quot;&quot;</span> % (short_id, detail_id, short_id, short_text, detail_id, short_id, detail_id, detail_text)</span><br><span class="line">        <span class="keyword">return</span> mark_safe(text)</span><br><span class="line"></span><br><span class="line">    show_intro.short_description = <span class="string">&#x27;描述&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：复制代码后需要做如下修改：</p><figure><img src="https://img-blog.csdnimg.cn/20200815204246956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><p>一开始效果</p><figure><img src="https://img-blog.csdnimg.cn/20200621230038819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><p>点击展开效果：<img src="https://img-blog.csdnimg.cn/20200621230120177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><h2 id="前端判断上传的文件是否为图片且限制大小为300kb">90、前端判断上传的文件是否为图片且限制大小为300kB</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en-us&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;body <span class="keyword">class</span>=<span class="string">&quot;login&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="built_in">input</span> <span class="keyword">class</span>=<span class="string">&quot;form-control input-lg&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;id_icon&quot;</span> name=<span class="string">&quot;icon&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;file&quot;</span> onchange=<span class="string">&quot;imgTypeSize(&#x27;id_icon&#x27;,300)&quot;</span></span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    //判断是否为图片，若为图片，判断其大小是否大于<span class="number">0.3</span>M</span><br><span class="line">    function imgTypeSize(FileId, maxsize) &#123;</span><br><span class="line">        /*获取图片内容对象*/</span><br><span class="line">        var imgFile = document.getElementById(FileId).files[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (imgFile.name == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            alert(<span class="string">&quot;请上传头像哦&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> false;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            /*图片类型正则验证*/</span><br><span class="line">            var imgStr = /\.(jpg|jpeg|png|bmp|BMP|JPG|PNG|JPEG)$/;</span><br><span class="line">            <span class="keyword">if</span> (!imgStr.test(imgFile.name)) &#123;</span><br><span class="line">                alert(<span class="string">&quot;文件不是图片类型&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> false;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                /*图片大小*/</span><br><span class="line">                var imagSize = imgFile.size;</span><br><span class="line">                <span class="keyword">if</span> (imagSize &lt; (<span class="number">1024</span> * maxsize)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> true;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    alert(imgFile.name + <span class="string">&quot;大小不能超过&quot;</span> + maxsize + <span class="string">&quot;kB&quot;</span>);</span><br><span class="line">                    document.getElementById(FileId).value = <span class="string">&quot;&quot;</span></span><br><span class="line">                    <span class="keyword">return</span> false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="form表单提交前验证">91、form表单提交前验证</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;post&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;login-form&quot;</span> onsubmit=<span class="string">&quot;return toVaild()&quot;</span>&gt;</span><br><span class="line">&lt;<span class="built_in">input</span> <span class="keyword">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;id_account&quot;</span> name=<span class="string">&quot;account&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;账号&quot;</span>/&gt;</span><br><span class="line">&lt;<span class="built_in">input</span> <span class="keyword">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;id_password&quot;</span> name=<span class="string">&quot;password&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;password&quot;</span> placeholder=<span class="string">&quot;密码&quot;</span>&gt;</span><br><span class="line">&lt;form&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    document.getElementById(<span class="string">&#x27;id_username&#x27;</span>).focus()</span><br><span class="line"></span><br><span class="line">    function toVaild() &#123;</span><br><span class="line">        var account = document.getElementById(<span class="string">&quot;id_account&quot;</span>).value;</span><br><span class="line">        var password = document.getElementById(<span class="string">&quot;id_password&quot;</span>).value;</span><br><span class="line">        <span class="keyword">if</span> (account == <span class="string">&quot;&quot;</span> || password == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            alert(<span class="string">&quot;请输入账号和密码&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> false;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="有序字典">92、有序字典</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line">d1 = collections.OrderedDict()  <span class="comment"># 创建一个有序字典</span></span><br><span class="line">d1[<span class="string">&#x27;a&#x27;</span>] = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">d1[<span class="string">&#x27;b&#x27;</span>] = <span class="string">&#x27;B&#x27;</span></span><br><span class="line">d1[<span class="string">&#x27;c&#x27;</span>] = <span class="string">&#x27;C&#x27;</span></span><br><span class="line">d1[<span class="string">&#x27;d&#x27;</span>] = <span class="string">&#x27;D&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d1.items():</span><br><span class="line">    <span class="built_in">print</span>(k, v)</span><br></pre></td></tr></table></figure><h2 id="python在windows系统下实现tts文字转语音">93、Python在Windows系统下实现TTS（文字转语音）</h2><p>导入包：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install pypiwin32</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> win32com.client</span><br><span class="line">spk = win32com.client.Dispatch(<span class="string">&quot;SAPI.SpVoice&quot;</span>)</span><br><span class="line">spk.Speak(<span class="string">u&quot;my name is ldc,what is your name&quot;</span>)</span><br><span class="line">spk.Speak(<span class="string">u&quot;大家好&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="定义一个简单闹钟">94、定义一个简单闹钟</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pip install pypiwin32 -i https://pypi.python.org/simple</span></span><br><span class="line"><span class="keyword">import</span> win32com.client</span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line"><span class="keyword">import</span> winsound</span><br><span class="line"></span><br><span class="line">spk = win32com.client.Dispatch(<span class="string">&quot;SAPI.SpVoice&quot;</span>)</span><br><span class="line"><span class="comment"># 定义闹钟时间</span></span><br><span class="line">clocktime = [[<span class="number">19</span>, <span class="number">19</span>], [<span class="number">11</span>, <span class="number">10</span>], [<span class="number">12</span>, <span class="number">10</span>], [<span class="number">18</span>, <span class="number">47</span>]]  </span><br><span class="line">runinghour = <span class="number">1</span>  <span class="comment"># 定义运行时间</span></span><br><span class="line">times = runinghour * <span class="number">3600</span>  <span class="comment"># 次数</span></span><br><span class="line"><span class="built_in">print</span>(times)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, times):</span><br><span class="line">    time_now = [time.localtime(time.time()).tm_hour, time.localtime(time.time()).tm_min]</span><br><span class="line">    <span class="keyword">if</span> time_now <span class="keyword">in</span> clocktime:</span><br><span class="line">        <span class="built_in">print</span>(time_now)</span><br><span class="line">        winsound.Beep(<span class="number">1000</span>, <span class="number">1000</span>)</span><br><span class="line">        spk.Speak(<span class="string">u&quot;快去看下饭好了没有？&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">60</span>)  <span class="comment"># 每分钟对比一次时间</span></span><br></pre></td></tr></table></figure><h2 id="根据年月获取当月天数">95、根据年月获取当月天数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_month_days</span>(<span class="params">year, month</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据年份，月份信息显示此月份天数</span></span><br><span class="line"><span class="string">    :param year: 年份：</span></span><br><span class="line"><span class="string">    :param month: 月份（1～12）：</span></span><br><span class="line"><span class="string">    :return: 当月天数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> month &gt;<span class="number">12</span> <span class="keyword">or</span> month &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> month == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">29</span> <span class="keyword">if</span> year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">or</span> year % <span class="number">400</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="number">28</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> month <span class="keyword">in</span> (<span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">30</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">31</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;2020-04&#x27;</span>.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">year = <span class="built_in">int</span>(a[<span class="number">0</span>])</span><br><span class="line">month = <span class="built_in">int</span>(a[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(get_month_days(year,month))</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure><h2 id="django获取favicon.ico图标">96、Django获取favicon.ico图标</h2><p>制作一个ico文件，使用PS或者某些在线生成ico的网站</p><p>将此文件命名为“favicon.ico”后放在static/下</p><figure><img src="https://img-blog.csdnimg.cn/20200805104730363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><p>在urls.py中定义路由：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> RedirectView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line"><span class="comment"># 访问favicon.ico 网站图标</span></span><br><span class="line">    path(<span class="string">&quot;favicon.ico&quot;</span>,RedirectView.as_view(url=<span class="string">&#x27;static/favicon.ico&#x27;</span>)),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="django-静态文件配置">97、django 静态文件配置</h2><p>settings.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span></span><br><span class="line"><span class="comment"># 添加静态资源路由地址</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">&#x27;static&#x27;</span>),</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"><span class="comment"># 使用python manage.py collectstatic收集静态文件时时使用STATIC_ROOT</span></span><br><span class="line"><span class="comment"># STATIC_ROOT = os.path.join(BASE_DIR, &#x27;static&#x27;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>urls.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> RedirectView</span><br><span class="line"><span class="keyword">from</span> django.views.static <span class="keyword">import</span> serve</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> <span class="string">&#x27;你的项目名称&#x27;</span> <span class="keyword">import</span> settings</span><br><span class="line">urlpatterns = [</span><br><span class="line">   </span><br><span class="line">    path(<span class="string">&quot;favicon.ico&quot;</span>,RedirectView.as_view(url=<span class="string">&#x27;static/favicon.ico&#x27;</span>)),</span><br><span class="line">    re_path(<span class="string">&#x27;static/(?P&lt;path&gt;.*)$&#x27;</span>, serve, &#123;<span class="string">&#x27;document_root&#x27;</span>: settings.STATICFILES_DIRS[<span class="number">0</span>]&#125;),</span><br><span class="line">    </span><br><span class="line">]</span><br></pre></td></tr></table></figure>## 98、django JsonResponse返回中文时显示unicode编码（]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通关文牒</title>
      <link href="/2022/08/06/%E9%80%9A%E5%85%B3%E6%96%87%E7%89%92/"/>
      <url>/2022/08/06/%E9%80%9A%E5%85%B3%E6%96%87%E7%89%92/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="08dc3a914f6f217d2abcf96765fd57c6beb3b7e09cdfd71242b7629495c9cc4f">348cccdb50765cf6b63706f63485335826cf1bfcf78846a1b972d1eb72ea60fe9101dfa6b67e93671307af9870713dae4a99efcb15e6776945cbf7db2ef63a328cfa549663de706438af164cb2d574bb2885276a57be331c39727f770bee837689ac9b83f1603eec02e2aa36ad4a97c8abaad18cb4789ea85c1c0d5e60a13dd862b755d32f5eacc7a040addd7c7da794377c86ba51dce0410dbd7815f289ae70f410e08678a96ec1efec8b37eab6493180fdcae9ee1822d2735b739f945167c3e702be0d9093edc1ba0857afd8628fa64e23ab7047c440fee1ba2a1fdb1b66712da5ceeb57f8aa836ff7f37b75849b0237c2a0deffa5c5f6b9e1da131471fd98046264163d7bba5d78408d8995621ca7f75e2e813eb6e52239d498c8f444ccca7186c4bee617b3d02662324d6b189a6b250bb939dd6dc54b4a3e61def52d34bcf91cb4e7cf2aad78e2a8892736daeb5ad4afc1a8a3f11bb2035abc531304d9cc2591023b73b107cd43b9fbfb224a9283cb6fd84758fe9ec49eeaaceedd594b216b5411f74778d6afc6131771e2d80189323aee88c50d381227edc12869e24191aa07dcd768e223729f2b8794a9bb9097f82256d9c0451aae7be634016663295ba6c795e9a3fb825f41dd8a516589e63eb8ccfe207aae48b46955320d19bc0aad93720067404ab7e3c559cc85b8dd6bd009fe9fe72771d2c8c9f14d6b51bed1b60e092ec11d93b45fa4f18896be3942679418a3e07e4b73a9a9866002546fd438f0433ab4b99336cf1fb07204fd4b72fabc39a25076679add63f4509c2d5d27849c6a0bc7ae892929e84d1d1023883045d146c2d15134aa00572767a74e45dbcfdcc278989b8986f57da1d082544cbc1275894dfd3022d505cde89df72c6d7d420eaeb1e1cf67bc3ce835e039ef10c6f0c31e10d349dae5f0359b7ebf00fa9ff1843408fb616d15469a4faa699d974b59123bd11188a61d39ecce3f59ecc4fbc65b26f2f22b90fe27905948283129bd818a7682ee86707ffbd194e962d91b9f675b3c81e3a3ddd603b0e19fe8223e91903c2c803aae7fb78d0db0e1daaaf5e807662dc18420adb609ae5b16ed3edbd49a0271d2930b8c636bd290dbbcea199ef5139f86f5eb6fee7e1ca000977668cd6bef1a246bbab3260bfc01eb58b2fe2e9d2cafb57e8ea9da626dcfbcc6c578a371d0b00429ef67e4800fac147a3ecb446762032dbba231924a85138a9576923dc0470d96954b61df6cda035147d4c2ee5ae33feffadceabbc2a066d4bd20abe7fc6168b537024bf050423644913a40b27e9b90ff6a4fc23d34f451f54d29f0e389bccfae21f7aee667b176afa6fb7a2a53309078a150e4f3c54d36bddce11569e1a34bf17aa9eb0afa0f7b1fa8b8e3631bd7312bb921358d758157df7c634c22ada24045e080f97402fd97c52a68d680399336493dc4c475f5e9d40d60be5536d5879f6ea9cc3f1f0a31a1beaf59975e712862cc2278c9a89041500393be81b0f5892cec3dde80c04826b3f9db9bfac720d4652949ca2c2b1606be9516e5190fa6bd153361af8410ae426aa9d389818663997f31eeff239b8c323ec6cd514dca63cbd6ac8eeb9b8df1792693c4791a198977093ee0b1bd273e668dff7ddd4c3da9934df1f614bf951f2567ae3c570fd316a46361a9a967809918dd6d137bb6e76e3480c5ac791fc868320395d6f78289060844694f9dae4a3fbbfeba1c76c571ae75faaf8567a84ba125125aee4a675dfc41ef97bcf956d39b968cd9aa04bac059382a0bf9e326548539ae4ce1f5b258bdda2f07e2ada5f112ce89551c654138a8df25dd6bf550889e3b4948e5f4a0a91863e28e5f796d4deac84aeb26d61c7432d1efa23353b3ebc5d0b9812221e0c040e0d31850f58f14fb6321c4dc2053d0b86e834a68b90172c911fd057ef29be5bc4ad5bba243e2ddc2d7406edc515b55925d464e5874b4789357d61936becc720e7d30b9f1d9e970c74784e56803813bdca0a7ec311cc9f440f5203c1a3fb1f4c52692ae27781ca5fc9d29f345e33e37cc7535cfe45592336caf3faa00a7153650aa26037e0fea44da3f377244fb2a5df533ee730af72f61436b6e235d3e9340003124cd5893f4e4f9c73ac482c06f05b6e7cdcd496940ebeb07152c09196d2f18ae2cde6dd5d008aeadca1e06fff6b34674da4ded1731e51581c872c8b09abf2f10143163bb8d34c05f43d5cf4b1c0f919254d0fa5b58622c145a37986be615f8a888744d57e5c00b12626dbe0accb6c44d7c55eaea555ee146726565ac61cf0dae9537bdb87efb1c88c762da0df70f9ba2444715489b2f3ac1ed811c990d637eab774d5623aff00f06e793ac7ba83c086c5e3ddaa979daca8702296a2446305a81749372febf19b1cf5da877c1dc8b43cd053b72b29eda6aff92423a2327f4189341a05285f1b088341adb82877fe4b3ed7d39b10a09dbea8378c464144e5504b360657ca33d6fc1fb41033b38eae6ad8e930138456f1070c890e0ccff22ea003a3434fce77fad78ca44aee17c8eb13c6be406fa30f67bb25ea9cbd7aa5231060b9fedc88006108f5af60fa9a6077e368dc8262f6f98308b2ea634d18350fbdacc2ae141b58fa33a4e42d1a2b9ffa0c872e8042377f39a0eb3d2fb10640379137c808e65cb968055590f2d34db6d3153078c7b2409b5395b00e355e36e53342f945345c9c6bc3cfb902931909fcd356d6a61576c3633392763a8c1908349619aa92dacd8a35472808f92298122d7a5bc959ea692abc9b0c016cb0c06cbc3fc47d3b3e6af918f405d79d1768725ba294cc6725b6def2986f5a990f2a5e7550e2eadda1e8e3e7628bd10307dfbd7ce16b27d09f3549c49e68628d7cef14cce518a3992d86d0e4ee04c7ea0750f6bd95c046cfa7af7e370f8a7e9957639ba9ab20fd69194a9c896ea5bcbdb69df60533a2d91c9f4c284236237fbdcb4fac41a5eb988fe3919e177e5b3efbdbe6110d18658734b7414dea54cb9e86fcccc220cec9a96ddce454cf254e9ba466d2ad0217a641669ba4cb120c277828895db7ee64512d1db2c4389c53eaf7678f1032aa1147c0a4a62211a4242b9bb69410f5fd8aec5dd45ba4163310f19b64c9d68678e2e581767b0cec1d975b0e593971537640e2b7ddced99c4e4b39a5d93c7e356552d28fbf10213c06ca11c56efb59c36fa9dc23ed0437eebdd61b16bd2d75d1ca5e331723b9e159876a30caf45a908472507fd4102651958a503fcfd1ed2899f0444df3ced62f2596d640f158b51fc711ec7073209e3da45d4230de2dd8ab0278e5a8c244b4981d6cf8db0510be868f1599a873677945dfe58e9bd489a7454655356b788f5ce75d97c6ce5d0dc5607c81a04977a3c5b53059704b50f2ec97b8bad90634cd80cc6a8626486450a8a1c12e4867d43c6b113e8e0d2c6adb165b4ba4d73896e0e47964eb7b1ad5791492890bd48e579caf85f29c1950fbaabab1184a37e54e6297420f199a45a7e7d2e017054e6552fe7163c1562a7d70be0d74a11441efa706eccb10f82ae682f4ef29e28bde223647c0e0642d9caef5fdcbe9f4776b862d5092c8330338dd6122553683e28488aef718f8ec50a1c748eea55c34335a650f7b5abef4147fef71101f1d2e40f9640697b57f0d76cfb81f8e5ac44855930c2fc139792a5b37d1d936b772b874fae77df276e37f616c8195ba53a8dee5a2ad6b88c2cd3d5b1a7f25438061d41a58125a96f3ba8c2bc638c8f13f8ba705f3bc9ef5545fc90ed9f6e84fc52272f8c0df1846ac21878d20132d469712aab9ddd76b9c1cbc7492615a80b7a3d7fe9a6a36fb4e74cc6b1e368cf745d79e98ba01a8ed0f1b3596153358eafcc354e4e256621c081750b77d047147afed816dcee1ff0442108f90b389da2f52a1be0fe04ad91f2a4066057449088ed46f603538d0ae65b60c66f4305a436e6e0f9b9ebfda6506e5cc26bd73a1723c1947437989ec03d8d54f3337a65c706320f1a8e4e98233753a9659303b6d4d134deaa1835b0aac95d4d91a5976bc7f65a9676410dcf79f3614a81e3baed9412fa3d21e2bb63af874e4fd8dfc014f43a3dd5efdbfaa2f5197c99ff286744434a1321b852e7b34cd5</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">该文章不提供查阅</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 记事本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通关文牒 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
