<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>粉体输送系统设计</title>
      <link href="/2023/01/05/%E7%B2%89%E4%BD%93%E8%BE%93%E9%80%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
      <url>/2023/01/05/%E7%B2%89%E4%BD%93%E8%BE%93%E9%80%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><h4 id="气力输送概况"><a href="#气力输送概况" class="headerlink" title="气力输送概况"></a>气力输送概况</h4><h4 id="气力输送基本理论"><a href="#气力输送基本理论" class="headerlink" title="气力输送基本理论"></a>气力输送基本理论</h4><h4 id="气力输送的特点"><a href="#气力输送的特点" class="headerlink" title="气力输送的特点"></a>气力输送的特点</h4><h2 id="气力输送基本型式"><a href="#气力输送基本型式" class="headerlink" title="气力输送基本型式"></a>气力输送基本型式</h2><h4 id="吸送式气力输送"><a href="#吸送式气力输送" class="headerlink" title="吸送式气力输送"></a>吸送式气力输送</h4><h4 id="压送式气力输送"><a href="#压送式气力输送" class="headerlink" title="压送式气力输送"></a>压送式气力输送</h4><h4 id="吸送、压送组合式气力输送"><a href="#吸送、压送组合式气力输送" class="headerlink" title="吸送、压送组合式气力输送"></a>吸送、压送组合式气力输送</h4><h4 id="密相脉冲式气力输送"><a href="#密相脉冲式气力输送" class="headerlink" title="密相脉冲式气力输送"></a>密相脉冲式气力输送</h4><h4 id="空气输送斜槽"><a href="#空气输送斜槽" class="headerlink" title="空气输送斜槽"></a>空气输送斜槽</h4><h2 id="气力输送设计基础"><a href="#气力输送设计基础" class="headerlink" title="气力输送设计基础"></a>气力输送设计基础</h2><h3 id="空气管道流的基本规律"><a href="#空气管道流的基本规律" class="headerlink" title="空气管道流的基本规律"></a>空气管道流的基本规律</h3><h4 id="空气的组成及物理性质"><a href="#空气的组成及物理性质" class="headerlink" title="空气的组成及物理性质"></a>空气的组成及物理性质</h4><h4 id="空气的密度"><a href="#空气的密度" class="headerlink" title="空气的密度"></a>空气的密度</h4><h4 id="空气的粘滞性"><a href="#空气的粘滞性" class="headerlink" title="空气的粘滞性"></a>空气的粘滞性</h4><h4 id="理想气体状态方程"><a href="#理想气体状态方程" class="headerlink" title="理想气体状态方程"></a>理想气体状态方程</h4><h3 id="物料的性能"><a href="#物料的性能" class="headerlink" title="物料的性能"></a>物料的性能</h3><h4 id="颗粒物料的粒径"><a href="#颗粒物料的粒径" class="headerlink" title="颗粒物料的粒径"></a>颗粒物料的粒径</h4><h4 id="颗粒物料的密度"><a href="#颗粒物料的密度" class="headerlink" title="颗粒物料的密度"></a>颗粒物料的密度</h4><h4 id="粉体状物料的孔隙率"><a href="#粉体状物料的孔隙率" class="headerlink" title="粉体状物料的孔隙率"></a>粉体状物料的孔隙率</h4><h4 id="物料的水分"><a href="#物料的水分" class="headerlink" title="物料的水分"></a>物料的水分</h4><h4 id="物料的摩擦角"><a href="#物料的摩擦角" class="headerlink" title="物料的摩擦角"></a>物料的摩擦角</h4><h4 id="物料的磨琢性"><a href="#物料的磨琢性" class="headerlink" title="物料的磨琢性"></a>物料的磨琢性</h4><h4 id="物料的破碎"><a href="#物料的破碎" class="headerlink" title="物料的破碎"></a>物料的破碎</h4><h4 id="物料的粘管现象"><a href="#物料的粘管现象" class="headerlink" title="物料的粘管现象"></a>物料的粘管现象</h4><h4 id="粉尘的爆炸"><a href="#粉尘的爆炸" class="headerlink" title="粉尘的爆炸"></a>粉尘的爆炸</h4><h3 id="气固两相流的状态及性质"><a href="#气固两相流的状态及性质" class="headerlink" title="气固两相流的状态及性质"></a>气固两相流的状态及性质</h3><h4 id="物料在垂直输送管中的运动状态"><a href="#物料在垂直输送管中的运动状态" class="headerlink" title="物料在垂直输送管中的运动状态"></a>物料在垂直输送管中的运动状态</h4><h4 id="物料在水平输送管中的运动状态"><a href="#物料在水平输送管中的运动状态" class="headerlink" title="物料在水平输送管中的运动状态"></a>物料在水平输送管中的运动状态</h4><h4 id="气流速度与颗粒运动状态"><a href="#气流速度与颗粒运动状态" class="headerlink" title="气流速度与颗粒运动状态"></a>气流速度与颗粒运动状态</h4><h4 id="两相流的压力损失"><a href="#两相流的压力损失" class="headerlink" title="两相流的压力损失"></a>两相流的压力损失</h4><h3 id="紊流运动与悬浮速度"><a href="#紊流运动与悬浮速度" class="headerlink" title="紊流运动与悬浮速度"></a>紊流运动与悬浮速度</h3><h2 id="气力输送设计计算"><a href="#气力输送设计计算" class="headerlink" title="气力输送设计计算"></a>气力输送设计计算</h2><h2 id="管道气力输送故障的分析和防止措施"><a href="#管道气力输送故障的分析和防止措施" class="headerlink" title="管道气力输送故障的分析和防止措施"></a>管道气力输送故障的分析和防止措施</h2><h2 id="管道气力输送的管道和管件"><a href="#管道气力输送的管道和管件" class="headerlink" title="管道气力输送的管道和管件"></a>管道气力输送的管道和管件</h2><h2 id="供料器"><a href="#供料器" class="headerlink" title="供料器"></a>供料器</h2><h2 id="气体输送与压缩机械"><a href="#气体输送与压缩机械" class="headerlink" title="气体输送与压缩机械"></a>气体输送与压缩机械</h2><h2 id="分离器和除尘器"><a href="#分离器和除尘器" class="headerlink" title="分离器和除尘器"></a>分离器和除尘器</h2><h2 id="粉粒体气力输送工程设计及工程建设选用产品"><a href="#粉粒体气力输送工程设计及工程建设选用产品" class="headerlink" title="粉粒体气力输送工程设计及工程建设选用产品"></a>粉粒体气力输送工程设计及工程建设选用产品</h2><h3 id="气体输送、压缩与处理设备"><a href="#气体输送、压缩与处理设备" class="headerlink" title="气体输送、压缩与处理设备"></a>气体输送、压缩与处理设备</h3><h4 id="罗茨类风机及真空泵"><a href="#罗茨类风机及真空泵" class="headerlink" title="罗茨类风机及真空泵"></a>罗茨类风机及真空泵</h4><h4 id="离心通风机"><a href="#离心通风机" class="headerlink" title="离心通风机"></a>离心通风机</h4><h4 id="压缩机、水环真空泵、无热再生干燥器"><a href="#压缩机、水环真空泵、无热再生干燥器" class="headerlink" title="压缩机、水环真空泵、无热再生干燥器"></a>压缩机、水环真空泵、无热再生干燥器</h4><h3 id="分离器和除尘器-1"><a href="#分离器和除尘器-1" class="headerlink" title="分离器和除尘器"></a>分离器和除尘器</h3><h4 id="旋风是分离器和除尘器"><a href="#旋风是分离器和除尘器" class="headerlink" title="旋风是分离器和除尘器"></a>旋风是分离器和除尘器</h4><h4 id="袋式及滤筒式除尘器、电除尘器"><a href="#袋式及滤筒式除尘器、电除尘器" class="headerlink" title="袋式及滤筒式除尘器、电除尘器"></a>袋式及滤筒式除尘器、电除尘器</h4>]]></content>
      
      
      <categories>
          
          <category> 机械 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 粉体输送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非标设计</title>
      <link href="/2022/10/15/%E9%9D%9E%E6%A0%87%E8%AE%BE%E8%AE%A1/"/>
      <url>/2022/10/15/%E9%9D%9E%E6%A0%87%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="气动手指选型"><a href="#气动手指选型" class="headerlink" title="气动手指选型"></a>气动手指选型</h2><h2 id="真空系统"><a href="#真空系统" class="headerlink" title="真空系统"></a>真空系统</h2><h2 id="电机基础"><a href="#电机基础" class="headerlink" title="电机基础"></a>电机基础</h2><h3 id="P3"><a href="#P3" class="headerlink" title="P3"></a>P3</h3><p>常用公式：功率 P(KW) &#x3D; 扭矩 T(N.M) * 转速 N(R&#x2F;min)  &#x2F; 9550 &#x3D; F * 直线速度 V(m&#x2F;s) &#x3D; 工况系数 K(1.5-3)* 负载 F * V &#x2F; 效率 η (推荐0.5-0.8)</p><p>水平运动靠的是摩擦力  &#x3D;  材料摩擦系数可查  *   mg</p><p>怡合达网址里面有计算工具 ：  <a href="https://www.yhdfa.com/">https://www.yhdfa.com/</a> </p><p>如果是直线运动可以用功率来计算，如果是旋转运动可以用扭矩来计算选电机。</p><p>加速扭矩约等于3倍匀速扭矩</p><p>如果负载偏大，速度偏快，而且是直线运动，一般用功率计算；速度偏慢，扭矩作用明显，一般通过扭矩计算。</p><p>减速机不影响电机功率，只是速度与扭矩转换。</p><p>电机级数和转速关系： 转速 n &#x3D; 60 * 频率 f &#x2F; 极对数</p><p>β 惯量(0.001 kg * m²)(kg* cm²)大负载低转速场合旋转和直线的惯性惯量计算公式不一样（找软件来通过软件计算）东方马达辅助工具负载惯量 &#x2F; i² &#x2F; 常数 20</p><p>β &#x3D; ω &#x2F; tω rad&#x2F;s(360° &#x3D; 2π rad) β 角加速度 rad&#x2F;s²  &#x3D;  (2π * 1000 &#x2F; 60) &#x2F; 0.2s</p><p>加速扭矩 T &#x3D; 惯量 * 角加速度</p><p>t 加速时间 s (控制电机默认0.2s, 普通电机0.5s)</p><h3 id="P4"><a href="#P4" class="headerlink" title="P4"></a>P4</h3><h2 id="螺纹的选型校核"><a href="#螺纹的选型校核" class="headerlink" title="螺纹的选型校核"></a>螺纹的选型校核</h2><h2 id="标准件、常用件的选型及应用举例"><a href="#标准件、常用件的选型及应用举例" class="headerlink" title="标准件、常用件的选型及应用举例"></a>标准件、常用件的选型及应用举例</h2><h2 id="链传动的选型及安装"><a href="#链传动的选型及安装" class="headerlink" title="链传动的选型及安装"></a>链传动的选型及安装</h2><h2 id="V带传动的选型计算、安装"><a href="#V带传动的选型计算、安装" class="headerlink" title="V带传动的选型计算、安装"></a>V带传动的选型计算、安装</h2><h2 id="同步带、同步轮的选型及安装"><a href="#同步带、同步轮的选型及安装" class="headerlink" title="同步带、同步轮的选型及安装"></a>同步带、同步轮的选型及安装</h2><h2 id="轴承压端盖组装设备的设计及细节讲解"><a href="#轴承压端盖组装设备的设计及细节讲解" class="headerlink" title="轴承压端盖组装设备的设计及细节讲解"></a>轴承压端盖组装设备的设计及细节讲解</h2><h2 id="带端盖轴承自动送料、组装、输送设备的设计细节及选型梳理"><a href="#带端盖轴承自动送料、组装、输送设备的设计细节及选型梳理" class="headerlink" title="带端盖轴承自动送料、组装、输送设备的设计细节及选型梳理"></a>带端盖轴承自动送料、组装、输送设备的设计细节及选型梳理</h2><h2 id="齿轮的强度校核及材料的选择"><a href="#齿轮的强度校核及材料的选择" class="headerlink" title="齿轮的强度校核及材料的选择"></a>齿轮的强度校核及材料的选择</h2><h2 id="滚珠丝杆的选型及品牌的介绍"><a href="#滚珠丝杆的选型及品牌的介绍" class="headerlink" title="滚珠丝杆的选型及品牌的介绍"></a>滚珠丝杆的选型及品牌的介绍</h2><h3 id="滚珠丝杆的选型计算"><a href="#滚珠丝杆的选型计算" class="headerlink" title="滚珠丝杆的选型计算"></a>滚珠丝杆的选型计算</h3><h2 id="发动机缸体自动翻转设备的设计"><a href="#发动机缸体自动翻转设备的设计" class="headerlink" title="发动机缸体自动翻转设备的设计"></a>发动机缸体自动翻转设备的设计</h2><h2 id="直线导轨的选型、安装"><a href="#直线导轨的选型、安装" class="headerlink" title="直线导轨的选型、安装"></a>直线导轨的选型、安装</h2><h2 id="直线轴承的选型及安装形式"><a href="#直线轴承的选型及安装形式" class="headerlink" title="直线轴承的选型及安装形式"></a>直线轴承的选型及安装形式</h2><h2 id="滚动轴承的选型及安装"><a href="#滚动轴承的选型及安装" class="headerlink" title="滚动轴承的选型及安装"></a>滚动轴承的选型及安装</h2><h2 id="轴系结构二"><a href="#轴系结构二" class="headerlink" title="轴系结构二"></a>轴系结构二</h2><h2 id="气缸参数选择及安装"><a href="#气缸参数选择及安装" class="headerlink" title="气缸参数选择及安装"></a>气缸参数选择及安装</h2><h2 id="气缸缓冲方式，接头连接及磁性开关的选型"><a href="#气缸缓冲方式，接头连接及磁性开关的选型" class="headerlink" title="气缸缓冲方式，接头连接及磁性开关的选型"></a>气缸缓冲方式，接头连接及磁性开关的选型</h2><h2 id="电磁阀讲解"><a href="#电磁阀讲解" class="headerlink" title="电磁阀讲解"></a>电磁阀讲解</h2><h2 id="气动回路讲解"><a href="#气动回路讲解" class="headerlink" title="气动回路讲解"></a>气动回路讲解</h2><h2 id="三联件讲解"><a href="#三联件讲解" class="headerlink" title="三联件讲解"></a>三联件讲解</h2><h2 id="气动回路"><a href="#气动回路" class="headerlink" title="气动回路"></a>气动回路</h2><h2 id="气缸精讲"><a href="#气缸精讲" class="headerlink" title="气缸精讲"></a>气缸精讲</h2><h2 id="旋转夹紧气缸选型"><a href="#旋转夹紧气缸选型" class="headerlink" title="旋转夹紧气缸选型"></a>旋转夹紧气缸选型</h2><h2 id="旋转气缸选型"><a href="#旋转气缸选型" class="headerlink" title="旋转气缸选型"></a>旋转气缸选型</h2><h2 id="真空系统-1"><a href="#真空系统-1" class="headerlink" title="真空系统"></a>真空系统</h2><h2 id="气动手指选型-1"><a href="#气动手指选型-1" class="headerlink" title="气动手指选型"></a>气动手指选型</h2><h2 id="电机理论基础"><a href="#电机理论基础" class="headerlink" title="电机理论基础"></a>电机理论基础</h2><h2 id="普通电机功能选择"><a href="#普通电机功能选择" class="headerlink" title="普通电机功能选择"></a>普通电机功能选择</h2><h2 id="步进电机选择"><a href="#步进电机选择" class="headerlink" title="步进电机选择"></a>步进电机选择</h2><h2 id="伺服电机选型"><a href="#伺服电机选型" class="headerlink" title="伺服电机选型"></a>伺服电机选型</h2><h2 id="间歇式运动机构"><a href="#间歇式运动机构" class="headerlink" title="间歇式运动机构"></a>间歇式运动机构</h2><h2 id="凸轮分割器计算"><a href="#凸轮分割器计算" class="headerlink" title="凸轮分割器计算"></a>凸轮分割器计算</h2><h2 id="电机综合选型"><a href="#电机综合选型" class="headerlink" title="电机综合选型"></a>电机综合选型</h2><h2 id="机械设计辅助工具"><a href="#机械设计辅助工具" class="headerlink" title="机械设计辅助工具"></a>机械设计辅助工具</h2><h2 id="零件加工方法"><a href="#零件加工方法" class="headerlink" title="零件加工方法"></a>零件加工方法</h2><h2 id="公差与配合"><a href="#公差与配合" class="headerlink" title="公差与配合"></a>公差与配合</h2><h2 id="热处理"><a href="#热处理" class="headerlink" title="热处理"></a>热处理</h2><h2 id="常用的表面处理方式"><a href="#常用的表面处理方式" class="headerlink" title="常用的表面处理方式"></a>常用的表面处理方式</h2><h2 id="皮带输送机设计案例"><a href="#皮带输送机设计案例" class="headerlink" title="皮带输送机设计案例"></a>皮带输送机设计案例</h2><h2 id="材料力学"><a href="#材料力学" class="headerlink" title="材料力学"></a>材料力学</h2><h2 id="倍速链生产线设计"><a href="#倍速链生产线设计" class="headerlink" title="倍速链生产线设计"></a>倍速链生产线设计</h2><h2 id="灌装旋盖机"><a href="#灌装旋盖机" class="headerlink" title="灌装旋盖机"></a>灌装旋盖机</h2><h2 id="滚筒输送线设计"><a href="#滚筒输送线设计" class="headerlink" title="滚筒输送线设计"></a>滚筒输送线设计</h2><h2 id="链式输送机"><a href="#链式输送机" class="headerlink" title="链式输送机"></a>链式输送机</h2><h2 id="纽扣电池套热缩装置"><a href="#纽扣电池套热缩装置" class="headerlink" title="纽扣电池套热缩装置"></a>纽扣电池套热缩装置</h2><h2 id="电池套热缩"><a href="#电池套热缩" class="headerlink" title="电池套热缩"></a>电池套热缩</h2><h2 id="润滑脂自动码垛生产线"><a href="#润滑脂自动码垛生产线" class="headerlink" title="润滑脂自动码垛生产线"></a>润滑脂自动码垛生产线</h2><h2 id="发动机滚珠丝杆升降装配工装"><a href="#发动机滚珠丝杆升降装配工装" class="headerlink" title="发动机滚珠丝杆升降装配工装"></a>发动机滚珠丝杆升降装配工装</h2>]]></content>
      
      
      <categories>
          
          <category> 机械 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 非标设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件快捷键</title>
      <link href="/2022/09/28/%E8%BD%AF%E4%BB%B6%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2022/09/28/%E8%BD%AF%E4%BB%B6%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="Auto-CAD-常用快捷键"><a href="#Auto-CAD-常用快捷键" class="headerlink" title="Auto CAD 常用快捷键"></a>Auto CAD 常用快捷键</h2><table><thead><tr><th align="left"><strong>1、圆 C</strong></th><th align="left"><strong>19、样条曲线 SPL</strong></th><th align="left"><strong>37、正多边形 POL</strong></th></tr></thead><tbody><tr><td align="left"><strong>2、直线 L</strong></td><td align="left"><strong>20、定距等分 ME</strong></td><td align="left"><strong>38、多行文字 T</strong></td></tr><tr><td align="left"><strong>3、椭圆 EL</strong></td><td align="left"><strong>21、定数等分 DIV</strong></td><td align="left"><strong>39、删除 E</strong></td></tr><tr><td align="left"><strong>4、圆弧 A</strong></td><td align="left"><strong>22、多段线 PL</strong></td><td align="left"><strong>40、偏移 O</strong></td></tr><tr><td align="left"><strong>5、点 PO</strong></td><td align="left"><strong>23、点样式 PT</strong></td><td align="left"><strong>41、复制 CO</strong></td></tr><tr><td align="left"><strong>6、填充 H</strong></td><td align="left"><strong>24、构造线 XL</strong></td><td align="left"><strong>42、旋转 RO</strong></td></tr><tr><td align="left"><strong>7、矩形 REC</strong></td><td align="left"><strong>25、平行线 ML</strong></td><td align="left"><strong>43、圆角 F</strong></td></tr><tr><td align="left"><strong>8、面域 REG</strong></td><td align="left"><strong>26、创建块 B</strong></td><td align="left"><strong>44、合并 J</strong></td></tr><tr><td align="left"><strong>9、插入块 I</strong></td><td align="left"><strong>27、创建边界 BO</strong></td><td align="left"><strong>45、延伸 EX  两次空格</strong></td></tr><tr><td align="left"><strong>10、缩放 SC</strong></td><td align="left"><strong>28、移动 M</strong></td><td align="left"><strong>46、折弯标注 DJO</strong></td></tr><tr><td align="left"><strong>11、倒斜角 CHA</strong></td><td align="left"><strong>29、修剪 TR  两次空格</strong></td><td align="left"><strong>47、连续标注 DCO</strong></td></tr><tr><td align="left"><strong>12、标注样式 D</strong></td><td align="left"><strong>30、对齐 AL</strong></td><td align="left"><strong>48、对齐标注 DAL</strong></td></tr><tr><td align="left"><strong>13、拉伸 S</strong></td><td align="left"><strong>31、拉长 LEN</strong></td><td align="left"><strong>49、直径标注 DDI</strong></td></tr><tr><td align="left"><strong>14、镜像 MI</strong></td><td align="left"><strong>32、打断 BR</strong></td><td align="left"><strong>50、弧长标注 DAR</strong></td></tr><tr><td align="left"><strong>15、阵列 AR</strong></td><td align="left"><strong>33、文字样式 ST</strong></td><td align="left"><strong>51、引线标注 LE</strong></td></tr><tr><td align="left"><strong>16、分解 X</strong></td><td align="left"><strong>34、线性标注 DLI</strong></td><td align="left"><strong>52、快速标注QDIM</strong></td></tr><tr><td align="left"><strong>17、移动 M</strong></td><td align="left"><strong>35、半径标注 DRA</strong></td><td align="left"><strong>53、用户坐标 USC</strong></td></tr><tr><td align="left"><strong>18、修剪 TR</strong></td><td align="left"><strong>36、角度标注 DAN</strong></td><td align="left"><strong>54、填充 H</strong></td></tr></tbody></table><table><thead><tr><th align="left">智能标注  DIM</th><th align="left">相对位置  TK</th><th align="left">精度设置  UN</th></tr></thead><tbody><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h2 id="Solid-Edge-自定义快捷键"><a href="#Solid-Edge-自定义快捷键" class="headerlink" title="Solid Edge 自定义快捷键"></a>Solid Edge 自定义快捷键</h2><table><thead><tr><th align="left"><em><strong>打包  shift+alt+z</strong></em></th><th align="left"><strong>激活&#x2F;更新  alt+q</strong></th><th align="left"><strong>线性标注  alt+1</strong></th></tr></thead><tbody><tr><td align="left"><strong>间距标注  alt+2</strong></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装</title>
      <link href="/2022/09/03/Linux%E5%AE%89%E8%A3%85/"/>
      <url>/2022/09/03/Linux%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="系统安装以及设置"><a href="#系统安装以及设置" class="headerlink" title="系统安装以及设置"></a>系统安装以及设置</h2><p>1、当确定按键不在界面中时，按住Alt键就可以用鼠标拖动安装界面。</p><p>2、在25G空白磁盘上安装分区</p><table><thead><tr><th>挂载点</th><th>大小</th><th>新分区的类型</th><th>新分区的位置</th><th>文件系统</th></tr></thead><tbody><tr><td>&#x2F;boot</td><td>250M</td><td>逻辑分区</td><td>空间起始位置</td><td>Ext4日志文件系统</td></tr><tr><td>交换空间</td><td>最大1.5内存</td><td>逻辑分区</td><td>空间起始位置</td><td>交换空间</td></tr><tr><td>&#x2F;home</td><td>10G</td><td>逻辑分区</td><td>空间起始位置</td><td>Ext4日志文件系统</td></tr><tr><td>&#x2F;</td><td>10G</td><td>主分区</td><td>空间起始位置</td><td>Ext4日志文件系统</td></tr></tbody></table><p>3、安装完成后，先修改镜像源再修改语言，改好重启后，勾选不再询问，点击使用旧名称。</p><p>4、软件安装及卸载命令</p><ul><li>更新可用软件包列表：sudo apt update</li><li>更新已安装的包：sudo apt upgrade</li><li>安装软件：sudo apt install 软件名</li><li>卸载软件：sudo apt remove 软件名</li></ul><p>5、常用工具</p><p>python</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install ipython</span><br><span class="line">sudo apt install ipython3</span><br><span class="line">sudo apt install python-pip</span><br><span class="line">sudo apt install python3-pip</span><br></pre></td></tr></table></figure><p>C++</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install cmake</span><br><span class="line">sudo apt install qtcreator</span><br></pre></td></tr></table></figure><p>ruby</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install ruby</span><br></pre></td></tr></table></figure><p>shh服务器安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install openssh-server</span><br></pre></td></tr></table></figure><p>6、软件卸载</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">libreoffice Amazon</span></span><br><span class="line">sudo apt remove libreoffice-common</span><br><span class="line">sudo apt removw unity-webapps-common</span><br></pre></td></tr></table></figure><p>**deb安装格式 **</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装软件</span></span><br><span class="line">sudo dpkg -i &lt;package.deb&gt;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修复软件之间的依赖关系；当安装软件时，提示：“在处理时有错误发生”时执行以下命令修复</span></span><br><span class="line">sudo apt -f install</span><br></pre></td></tr></table></figure><p>7、谷歌浏览器</p><ol><li><p>下载地址：<a href="https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb">https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</a></p></li><li><p>安装命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install libappindicator1 libindicator7</span><br><span class="line">sudo dpkg –i google-chrome–stable_current_amd64.deb</span><br><span class="line">sudo apt –f install </span><br></pre></td></tr></table></figure></li></ol><p>8、安装搜狗输入法</p><p>fcitx被称为小企鹅输入法，是一个以GPL方式发布的输入法平台，可以通过安装引擎支持多种输入法。它<br>的优点是，短小精悍、跟程序的兼容性比较好！<br>1.打开系统设置语言支持<br>    ·将键盘输入法系统修改为fcitx<br>2.访问网站：<a href="http://pinyin.sogou.com/Linux/">http://pinyin.sogou.com/Linux/</a>下载最新版本的安装文件<br>3.在终端中执行以下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i 搜狗安装名.deb</span><br><span class="line">sudo apt -f install</span><br></pre></td></tr></table></figure><p>9、Ubuntu  下安装 OpenSSH </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install openssh-server</span><br></pre></td></tr></table></figure><p>修改ssh默认端口</p><p>ssh - server 配置文件位于 &#x2F;etc&#x2F;ssh&#x2F;sshd_config ，在这里可以定义SSH的服务端口，默认端口是22，可以定义为其他的，如222，然后重启SSH服务：&#x2F;etc&#x2F;init.d&#x2F;ssh restart</p><p>加快ssh登录时间</p><p>vim &#x2F;etc.ssh&#x2F;sshd_config</p><p>找到 GSSAPI options 这一节，将下面两行注释掉：</p><p>GSSAPIAuthentication yes</p><p>GSSAPIDelegateCredentials no</p><p>然后重新启动 ssh 服务即可</p><p>&#x2F;etc&#x2F;init.d&#x2F;ssh restart</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="配置脚本"><a href="#配置脚本" class="headerlink" title="配置脚本"></a>配置脚本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/sh</span></span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install aptitude -y</span><br><span class="line">sudo apt install tree</span><br><span class="line">sudo apt install vim vim-gnome vim-tiny vim-athena vim-athena-py2 vim-gnome-py2 vim-gtk vim-gtk-py2 vim-gtk3 vim-gtk3-py2 vim-nox vim-nox-py2 -y </span><br><span class="line">sudo echo &quot;sudo cp vimrc /etc/vim/vimrc&quot;</span><br><span class="line">sudo cp vimrc /etc/vim/vimrc</span><br><span class="line"></span><br><span class="line">sudo apt install stardict -y</span><br><span class="line">sudo echo &quot;sudo cp dic /usr/share/stardict -r&quot;</span><br><span class="line">sudo cp dic /usr/share/stardict -r</span><br><span class="line"></span><br><span class="line">sudo apt install g++ -y</span><br><span class="line">sudo apt install vaftpd -y</span><br><span class="line">sudo apt install lftp -y</span><br><span class="line">sudo apt install nfs-kernel-server -y</span><br></pre></td></tr></table></figure><h2 id="vim插件配置脚本"><a href="#vim插件配置脚本" class="headerlink" title="vim插件配置脚本"></a>vim插件配置脚本</h2><p>【vim配置推荐 - ma6174】<a href="https://github.com/ma6174/vim">https://github.com/ma6174/vim</a></p><p>1、安装脚本下载：wget 47.93.11.51:88&#x2F;install_vim.sh</p><p>2、执行脚本：bash install_vim.sh</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;This script will install and configure vim and zsh automatic.&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The time this takes is related to the network conditions, please wait patiently.&quot;</span></span><br><span class="line"><span class="keyword">if</span> [[ `<span class="built_in">whoami</span>` == <span class="string">&quot;root&quot;</span> ]];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[31mYou are  running this script with Root\033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[31mGenerally, we do not recommend using root for programming or directly controlling your Linux OS, especially when you are a beginner \033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[31mSo, There is no necessary for you to configure with root.&quot;</span></span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">&quot;Do you really want to do this?[N/y]&quot;</span> choice</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$&#123;choice&#125;</span> != y ]];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Bye.&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">which</span> apt-get &gt;/dev/null; <span class="keyword">then</span></span><br><span class="line">sudo apt-get install -y vim vim-gnome ctags xclip astyle python-setuptools python-dev git wget</span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">which</span> yum &gt;/dev/null; <span class="keyword">then</span></span><br><span class="line">sudo yum install -y gcc vim git ctags xclip astyle python-setuptools python-devel wget</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##Add HomeBrew support on  Mac OS</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">which</span> brew &gt;/dev/null;<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;You are using HomeBrew tool&quot;</span></span><br><span class="line">    brew install vim ctags git astyle</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">sudo easy_install -ZU autopep8 </span><br><span class="line">sudo <span class="built_in">ln</span> -s /usr/bin/ctags /usr/local/bin/ctags</span><br><span class="line"><span class="built_in">rm</span> -rf ~/vim* 2&gt;&amp;1 &gt;/dev/null</span><br><span class="line"><span class="built_in">rm</span> -rf ~/.vim* 2&gt;&amp;1 &gt;/dev/null</span><br><span class="line"><span class="built_in">mv</span> -f ~/vim ~/vim_old</span><br><span class="line"><span class="built_in">cd</span> ~/ &amp;&amp; git <span class="built_in">clone</span> https://gitee.com/suyelu/vim.git</span><br><span class="line"><span class="built_in">mv</span> -f ~/.vim ~/.vim_old 2&gt;&amp;1 &gt;/dev/null</span><br><span class="line"><span class="built_in">mv</span> -f ~/vim ~/.vim 2&gt;&amp;1 &gt;/dev/null</span><br><span class="line"><span class="built_in">mv</span> -f ~/.vimrc ~/.vimrc_old 2&gt;&amp;1 &gt;/dev/null</span><br><span class="line"><span class="built_in">mv</span> -f ~/.vim/.vimrc ~/ </span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/suyelu/vundle.git ~/.vim/bundle/vundle</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;程序正在自动安装相应插件&quot;</span> &gt; kaikeba</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;command-t插件需要等待时间较长，不要担心&quot;</span> &gt;&gt; kaikeba</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;切勿强制退出该界面，否则会导致错误，需重新配置&quot;</span> &gt;&gt; kaikeba</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;安装完毕将自动退出&quot;</span> &gt;&gt; kaikeba</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;请耐心等待&quot;</span> &gt;&gt; kaikeba</span><br><span class="line">vim kaikeba -c <span class="string">&quot;BundleInstall&quot;</span> -c <span class="string">&quot;q&quot;</span> -c <span class="string">&quot;q&quot;</span></span><br><span class="line"><span class="built_in">rm</span> kaikeba</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;安装完成&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="centos配置"><a href="#centos配置" class="headerlink" title="centos配置"></a>centos配置</h2><h3 id="最小安装"><a href="#最小安装" class="headerlink" title="最小安装"></a>最小安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#yum更新后面没有包名是更新所有，有包名就只更新指定的</span></span><br><span class="line">yum update -y</span><br><span class="line"><span class="comment">#安装Tab补全</span></span><br><span class="line">yum -y install bash-completion</span><br><span class="line"><span class="comment">#安装wget</span></span><br><span class="line">yum install -y wget</span><br><span class="line"><span class="comment">#安装vim</span></span><br><span class="line">yum -install -y vim-enhanced</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="nfs"><a href="#nfs" class="headerlink" title="nfs"></a>nfs</h3><p>1&gt; 安装nfs<br>                apt-get install nfs*<br>                yum install nfs*<br>2&gt; 配置<br>                &#x2F;etc&#x2F;exports<br>                添加如下一行<br>                &#x2F;filesystem *(rw)<br>3&gt; 重启nfs服务<br>                &#x2F;etc&#x2F;init.d&#x2F;nfs restart<br>4&gt; 查看配置是否成功<br>                [root@localhost filesystem]# showmount -e 192.168.0.254<br>                Export list for 192.168.0.254:<br>                &#x2F;ken       *<br>                &#x2F;tools     *<br>                &#x2F;homework  *<br>                &#x2F;filesystem *</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统编程</title>
      <link href="/2022/08/29/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/08/29/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>Linux系统： “所见皆文件”</p><p>Linux系统目录：</p><pre><code>bin：存放二进制可执行文件boot：存放开机启动程序dev：存放设备文件： 字符设备、块设备home：存放普通用户etc：用户信息和系统配置文件 passwd、grouplib：库文件：libc.so.6root：管理员宿主目录（家目录）usr：用户资源管理目录</code></pre><p>Linux系统文件类型： 7&#x2F;8 种</p><pre><code>普通文件：-目录文件：d字符设备文件：c块设备文件：b软连接：l管道文件：p套接字：s未知文件。</code></pre><p>软连接：快捷方式</p><pre><code>为保证软连接可以任意搬移， 创建时务必对源文件使用 绝对路径。</code></pre><p>硬链接：</p><pre><code>ln file  file.hard操作系统给每一个文件赋予唯一的 inode，当有相同inode的文件存在时，彼此同步。删除时，只将硬链接计数减一。减为0时，inode 被释放。</code></pre><p>创建用户：</p><pre><code>sudo adduser 新用户名--- useradd</code></pre><p>修改文件所属用户：</p><pre><code>sudo chown 新用户名 待修改文件。sudo chown wangwu a.c</code></pre><p>删除用户：<br>    sudo deluser 用户名</p><p>创建用户组：<br>    sudo addgroup 新组名</p><p>修改文件所属用户组：</p><pre><code>sudo chgrp 新用户组名 待修改文件。sudo chgrp g88 a.c</code></pre><p>删除组：<br>    sudo delgroup 用户组名</p><p>使用chown 一次修改所有者和所属组：</p><pre><code>sudo chown 所有者：所属组  待操作文件。</code></pre><p>find命令：找文件</p><pre><code>-type 按文件类型搜索  d/p/s/c/b/l/ f:文件-name 按文件名搜索    find ./ -name &quot;*file*.jpg&quot;-maxdepth 指定搜索深度。应作为第一个参数出现。    find ./ -maxdepth 1 -name &quot;*file*.jpg&quot;-size 按文件大小搜索. 单位：k、M、G    find /home/itcast -size +20M -size -50M-atime、mtime、ctime 天  amin、mmin、cmin 分钟。-exec：将find搜索的结果集执行某一指定命令。    find /usr/ -name &#39;*tmp*&#39; -exec ls -ld &#123;&#125; \;-ok: 以交互式的方式 将find搜索的结果集执行某一指定命令-xargs：将find搜索的结果集执行某一指定命令。  当结果集数量过大时，可以分片映射。    find /usr/ -name &#39;*tmp*&#39; | xargs ls -ld -print0：    find /usr/ -name &#39;*tmp*&#39; -print0 | xargs  -0 ls -ld </code></pre><p>grep命令：找文件内容</p><pre><code>grep -r &#39;copy&#39; ./ -n    -n参数：:显示行号ps aux | grep &#39;cupsd&#39;  -- 检索进程结果集。</code></pre><p>软件安装：</p><pre><code>1. 联网2. 更新软件资源列表到本地。  sudo apt-get update3. 安装 sudo apt-get install 软件名4. 卸载sudo apt-get remove 软件名5. 使用软件包（.deb） 安装：sudo dpkg -i 安装包名。</code></pre><p>tar压缩：</p><pre><code>1. tar -zcvf 要生成的压缩包名压缩材料。    tar zcvf  test.tar.gz  file1 dir2   使用 gzip方式压缩。    tar jcvf  test.tar.gz  file1 dir2   使用 bzip2方式压缩。</code></pre><p>tar解压：</p><pre><code>将 压缩命令中的 c --&gt; x    tar zxvf  test.tar.gz   使用 gzip方式解压缩。    tar jxvf  test.tar.gz   使用 bzip2方式解压缩。</code></pre><p>rar压缩：</p><pre><code>rar a -r  压缩包名（带.rar后缀） 压缩材料。    rar a -r testrar.rarstdio.h test2.mp3</code></pre><p>rar解压：</p><pre><code>unrar x 压缩包名（带.rar后缀）</code></pre><p>zip压缩：</p><pre><code>zip -r 压缩包名（带.zip后缀） 压缩材料。    zip -r testzip.zip dir stdio.h test2.mp3</code></pre><p>zip解压：<br>    unzip 压缩包名（带.zip后缀） </p><pre><code>    unzip  testzip.zip </code></pre><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>跳转到指定行：</p><pre><code>1. 88G （命令模式）2. :88  (末行模式)</code></pre><p>跳转文件首：</p><pre><code>gg （命令模式）</code></pre><p>跳转文件尾：</p><pre><code>G（命令模式）</code></pre><p>自动格式化程序：</p><pre><code>gg=G（命令模式）</code></pre><p>大括号对应：</p><pre><code>% （命令模式）</code></pre><p>光标移至行首：</p><pre><code>0 （命令模式）执行结束，工作模式不变。</code></pre><p>光标移至行尾：</p><pre><code>$ （命令模式）执行结束，工作模式不变。</code></pre><p>删除单个字符：</p><pre><code>x （命令模式）执行结束，工作模式不变。</code></pre><p>替换单个字符：</p><pre><code>将待替换的字符用光标选中， r （命令模式），再按欲替换的字符</code></pre><p>删除一个单词：</p><pre><code>dw（命令模式）光标置于单词的首字母进行操作。</code></pre><p>删除光标至行尾：</p><pre><code>D 或者 d$（命令模式）</code></pre><p>删除光标至行首：</p><pre><code>d0 （命令模式）</code></pre><p>删除指定区域：</p><pre><code>按 V （命令模式）切换为 “可视模式”，使用 hjkl挪移光标来选中待删除区域。  按 d 删除该区域数据。</code></pre><p>删除指定1行：</p><pre><code>在光标所在行，按 dd （命令模式）</code></pre><p>删除指定N行：</p><pre><code>在光标所待删除首行，按 Ndd （命令模式）</code></pre><p>复制一行：</p><pre><code>yy</code></pre><p>粘贴：<br>    p：向后、P：向前。</p><p>查找：<br>    1. 找 设想 内容：</p><pre><code>    命令模式下， 按 “/” 输入欲搜索关键字，回车。使用 n 检索下一个。2. 找 看到的内容：    命令模式下，将光标置于单词任意一个字符上，按 “*”/ “#” </code></pre><p>单行替换：</p><pre><code>将光标置于待替换行上， 进入末行模式，输入 :s /原数据/新数据</code></pre><p>通篇替换：</p><pre><code>末行模式， :%s /原数据/新数据/g   g:不加，只替换每行首个。   sed </code></pre><p>指定行的替换：</p><pre><code>末行模式， :起始行号，终止行号s /原数据/新数据/g   g:不加，只替换每行首个。    :29,35s /printf/println/g</code></pre><p>撤销、反撤销：</p><pre><code>u、ctrl+r（命令模式）</code></pre><p>分屏：<br>    sp：横屏分。 Ctrl+ww 切换。</p><pre><code>vsp：竖屏分。Ctrl+ww 切换。</code></pre><p>跳转至 man 手册：</p><pre><code>将光标置于待查看函数单词上，使用 K（命令模式）跳转。 指定卷， nK</code></pre><p>查看宏定义：</p><pre><code>将光标置于待查看宏定义单词上，使用 [d 查看定义语句。</code></pre><p>在末行模式执行shell命令：</p><pre><code>:!命令:! ls -l </code></pre><hr><p>gcc编译：</p><pre><code>4步骤： 预处理、编译、汇编、连接。-I：指定头文件所在目录位置。-c：只做预处理、编译、汇编。得到 二进制 文件！！！-g：编译时添加调试语句。 主要支持 gdb 调试。-Wall： 显示所有警告信息。-D：向程序中“动态”注册宏定义。   #define NAME VALUE</code></pre><p>静态库制作及使用步骤：</p><pre><code>1. 将 .c 生成 .o 文件    gcc -c add.c -o add.o2. 使用 ar 工具制作静态库    ar rcs  lib库名.a  add.o sub.o div.o3. 编译静态库到可执行文件中：    gcc test.c lib库名.a -o a.out</code></pre><p>头文件守卫：防止头文件被重复包含</p><pre><code>#ifndef _HEAD_H_#define _HEAD_H_......#endif</code></pre><p>动态库制作及使用：</p><pre><code>1.  将 .c 生成 .o 文件， （生成与位置无关的代码 -fPIC）    gcc -c add.c -o add.o -fPIC2. 使用 gcc -shared 制作动态库    gcc -shared -o lib库名.soadd.o sub.o div.o3. 编译可执行程序时，指定所使用的动态库。  -l：指定库名(去掉lib前缀和.so后缀)  -L：指定库路径。    gcc test.c -o a.out -lmymath -L./lib4. 运行可以执行程序 ./a.out 出错！！！！ --- ldd a.out --&gt; &quot;not found&quot;    error while loading shared libraries: libxxx.so: cannot open shared object file: No such file or directory    原因：        链接器：工作于链接阶段， 工作时需要 -l 和 -L        动态链接器：工作于程序运行阶段，工作时需要提供动态库所在目录位置。    解决方式：        【1】 通过环境变量：  export LD_LIBRARY_PATH=动态库路径            ./a.out 成功！！！  （临时生效， 终端重启环境变量失效）        【2】 永久生效： 写入 终端配置文件。  .bashrc  建议使用绝对路径。            1) vi ~/.bashrc            2) 写入 export LD_LIBRARY_PATH=动态库路径  保存            3）. .bashrc/  source .bashrc / 重启 终端  ---&gt; 让修改后的.bashrc生效            4）./a.out 成功！！！         【3】 拷贝自定义动态库 到 /lib (标准C库所在目录位置)        【4】 配置文件法            1）sudo vi /etc/ld.so.conf            2) 写入 动态库绝对路径  保存            3）sudo ldconfig -v  使配置文件生效。            4）./a.out 成功！！！--- 使用 ldd  a.out 查看</code></pre><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><p>gdb调试工具：   大前提：程序是你自己写的。  —逻辑错误</p><p>基础指令：<br>    -g：使用该参数编译可以执行文件，得到调试表。</p><pre><code>gdb ./a.outlist： list 1  列出源码。根据源码指定 行号设置断点。b：b 20在20行位置设置断点。run/r:运行程序n/next: 下一条指令（会越过函数）s/step: 下一条指令（会进入函数）p/print：p i  查看变量的值。continue：继续执行断点后续指令。finish：结束当前函数调用。 quit：退出gdb当前调试。</code></pre><p>其他指令：</p><pre><code>run：使用run查找段错误出现位置。set args： 设置main函数命令行参数 （在 start、run 之前）run 字串1 字串2 ...: 设置main函数命令行参数info b: 查看断点信息表b 20 if i = 5：设置条件断点。ptype：查看变量类型。bt：列出当前程序正存活着的栈帧。frame： 根据栈帧编号，切换栈帧。display：设置跟踪变量undisplay：取消设置跟踪变量。 使用跟踪变量的编号。</code></pre><p>makefile： 管理项目。</p><pre><code>命名：makefile Makefile  --- make 命令1 个规则：    目标：依赖条件    （一个tab缩进）命令    1. 目标的时间必须晚于依赖条件的时间，否则，更新目标    2. 依赖条件如果不存在，找寻新的规则去产生依赖条件。ALL：指定 makefile 的终极目标。2 个函数：    src = $(wildcard ./*.c): 匹配当前工作目录下的所有.c 文件。将文件名组成列表，赋值给变量 src。  src = add.c sub.c div1.c     obj = $(patsubst %.c, %.o, $(src)): 将参数3中，包含参数1的部分，替换为参数2。 obj = add.o sub.o div1.oclean:(没有依赖)    -rm -rf $(obj) a.out“-”：作用是，删除不存在文件时，不报错。顺序执行结束。3 个自动变量：    $@: 在规则的命令中，表示规则中的目标。    $^: 在规则的命令中，表示所有依赖条件。    $&lt;: 在规则的命令中，表示第一个依赖条件。如果将该变量应用在模式规则中，它可将依赖条件列表中的依赖依次取出，套用模式规则。模式规则：    %.o:%.c       gcc -c $&lt; -o %@静态模式规则：    $(obj):%.o:%.c       gcc -c $&lt; -o %@伪目标：    .PHONY: clean ALL参数：    -n：模拟执行make、make clean 命令。    -f：指定文件执行 make 命令。xxxx.mk作业：编写一个 makefile 可以将其所在目录下的所有独立 .c 文件编译生成同名可执行文件。</code></pre><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><p>open函数：</p><pre><code>int open(char *pathname, int flags)#include &lt;unistd.h&gt;参数：    pathname: 欲打开的文件路径名    flags：文件打开方式：#include &lt;fcntl.h&gt;        O_RDONLY|O_WRONLY|O_RDWRO_CREAT|O_APPEND|O_TRUNC|O_EXCL|O_NONBLOCK ....返回值：    成功： 打开文件所得到对应的 文件描述符（整数）    失败： -1， 设置errnoint open(char *pathname, int flags， mode_t mode)123  775参数：    pathname: 欲打开的文件路径名    flags：文件打开方式：O_RDONLY|O_WRONLY|O_RDWRO_CREAT|O_APPEND|O_TRUNC|O_EXCL|O_NONBLOCK ....    mode: 参数3使用的前提， 参2指定了 O_CREAT。取值8进制数，用来描述文件的 访问权限。 rwx    0664        创建文件最终权限 = mode &amp; ~umask返回值：    成功： 打开文件所得到对应的 文件描述符（整数）    失败： -1， 设置errno</code></pre><p>close函数：</p><pre><code>int close(int fd);</code></pre><p>错误处理函数：与 errno 相关。</p><pre><code>printf(&quot;xxx error: %d\n&quot;, errno);char *strerror(int errnum);    printf(&quot;xxx error: %s\n&quot;, strerror(errno));void perror(const char *s);    perror(&quot;open error&quot;);</code></pre><p>read函数：</p><pre><code>ssize_t read(int fd, void *buf, size_t count);参数：    fd：文件描述符    buf：存数据的缓冲区    count：缓冲区大小返回值：    0：读到文件末尾。    成功；&gt; 0 读到的字节数。    失败：-1， 设置 errno    -1： 并且 errno = EAGIN 或 EWOULDBLOCK, 说明不是read失败，而是read在以非阻塞方式读一个设备文件（网络文件），并且文件无数据。</code></pre><p>write函数：</p><pre><code>ssize_t write(int fd, const void *buf, size_t count);参数：    fd：文件描述符    buf：待写出数据的缓冲区    count：数据大小返回值：    成功；写入的字节数。    失败：-1， 设置 errno</code></pre><p>文件描述符：</p><pre><code>PCB进程控制块：本质 结构体。成员：文件描述符表。文件描述符：0/1/2/3/4。。。。/1023     表中可用的最小的。0 - STDIN_FILENO1 - STDOUT_FILENO2 - STDERR_FILENO</code></pre><p>阻塞、非阻塞：  是设备文件、网络文件的属性。</p><pre><code>产生阻塞的场景。 读设备文件。读网络文件。（读常规文件无阻塞概念。）/dev/tty -- 终端文件。open(&quot;/dev/tty&quot;, O_RDWR|O_NONBLOCK)--- 设置 /dev/tty 非阻塞状态。(默认为阻塞状态)</code></pre><p>fcntl：<br>    int (int fd, int cmd, …)</p><pre><code>int flgs = fcntl(fd,  F_GETFL);flgs |= O_NONBLOCKfcntl(fd,  F_SETFL, flgs);获取文件状态： F_GETFL设置文件状态： F_SETFL</code></pre><p>lseek函数：</p><pre><code>off_t lseek(int fd, off_t offset, int whence);参数：    fd：文件描述符    offset： 偏移量    whence：起始偏移位置： SEEK_SET/SEEK_CUR/SEEK_END返回值：    成功：较起始位置偏移量    失败：-1 errno应用场景：    1. 文件的“读”、“写”使用同一偏移位置。    2. 使用lseek获取文件大小    3. 使用lseek拓展文件大小：要想使文件大小真正拓展，必须引起IO操作。        使用 truncate 函数，直接拓展文件。int ret = truncate(&quot;dict.cp&quot;, 250);</code></pre><p>传入参数：</p><pre><code>1. 指针作为函数参数。2. 同常有const关键字修饰。3. 指针指向有效区域， 在函数内部做读操作。</code></pre><p>传出参数：</p><pre><code>1. 指针作为函数参数。2. 在函数调用之前，指针指向的空间可以无意义，但必须有效。3. 在函数内部，做写操作。4。函数调用结束后，充当函数返回值。</code></pre><p>传入传出参数：</p><pre><code>1. 指针作为函数参数。2. 在函数调用之前，指针指向的空间有实际意义。3. 在函数内部，先做读操作，后做写操作。4. 函数调用结束后，充当函数返回值。</code></pre><p> void aaa();</p><p> int aaa(int *p, struct stat *p2, strcut student *p3);</p><p> bbb()<br> {<br>    aaa();<br> }</p><p>stat&#x2F;lstat 函数：</p><pre><code>int stat(const char *path, struct stat *buf);参数：    path： 文件路径    buf：（传出参数） 存放文件属性。返回值：    成功： 0    失败： -1 errno获取文件大小： buf.st_size获取文件类型： buf.st_mode获取文件权限： buf.st_mode符号穿透：stat会。lstat不会。</code></pre><p>link&#x2F;unlink:</p><pre><code>隐式回收。</code></pre><p>目录操作函数：</p><pre><code>DIR * opendir(char *name);int closedir(DIR *dp);struct dirent *readdir(DIR * dp);    struct dirent &#123;        inode        char dname[256];    &#125;</code></pre><h2 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h2><pre><code>./a.out ls.c  /home/itcast/28_Linux  ./abc/        /home/itcast/28_Linux/testdir/</code></pre><p>递归遍历目录：ls-R.c</p><pre><code>1. 判断命令行参数，获取用户要查询的目录名。int argc, char *argv[1]    argc == 1  --&gt; ./2. 判断用户指定的是否是目录。 stat  S_ISDIR(); --&gt; 封装函数 isFile() &#123;   &#125;3. 读目录： read_dir() &#123;     opendir（dir）    while （readdir（））&#123;        普通文件，直接打印        目录：            拼接目录访问绝对路径。sprintf(path, &quot;%s/%s&quot;, dir, d_name)             递归调用自己。--》 opendir（path） readdir closedir    &#125;    closedir（）    &#125;    read_dir() --&gt; isFile() ---&gt; read_dir()</code></pre><p>dup 和 dup2：</p><pre><code>int dup(int oldfd);文件描述符复制。    oldfd: 已有文件描述符    返回：新文件描述符。int dup2(int oldfd, int newfd); 文件描述符复制。重定向。</code></pre><p>fcntl 函数实现 dup：</p><pre><code>int fcntl(int fd, int cmd, ....)cmd: F_DUPFD参3:  被占用的，返回最小可用的。    未被占用的， 返回=该值的文件描述符。</code></pre><p>进程：<br>    程序：死的。只占用磁盘空间。——剧本。</p><pre><code>进程；活的。运行起来的程序。占用内存、cpu等系统资源。——戏。</code></pre><p>PCB进程控制块：</p><pre><code>进程id文件描述符表进程状态：初始态、就绪态、运行态、挂起态、终止态。进程工作目录位置*umask掩码 信号相关信息资源。用户id和组id</code></pre><p>fork函数：</p><pre><code>pid_t fork(void)创建子进程。父子进程各自返回。父进程返回子进程pid。 子进程返回 0.getpid();getppid();循环创建N个子进程模型。 每个子进程标识自己的身份。</code></pre><p>父子进程相同：</p><pre><code>刚fork后。 data段、text段、堆、栈、环境变量、全局变量、宿主目录位置、进程工作目录位置、信号处理方式</code></pre><p>父子进程不同：</p><pre><code>进程id、返回值、各自的父进程、进程创建时间、闹钟、未决信号集</code></pre><p>父子进程共享：</p><pre><code>读时共享、写时复制。———————— 全局变量。1. 文件描述符 2. mmap映射区。</code></pre><h2 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h2><p>gdb调试：</p><pre><code>设置父进程调试路径：set follow-fork-mode parent (默认)设置子进程调试路径：set follow-fork-mode child</code></pre><p>exec函数族：</p><pre><code>使进程执行某一程序。成功无返回值，失败返回 -1int execlp(const char *file, const char *arg, ...);借助 PATH 环境变量找寻待执行程序    参1： 程序名    参2： argv0    参3： argv1    ...： argvN    哨兵：NULLint execl(const char *path, const char *arg, ...);自己指定待执行程序路径。int execvp();</code></pre><p>ps ajx –&gt; pid ppid gid sid </p><p>孤儿进程：</p><pre><code>父进程先于子进终止，子进程沦为“孤儿进程”，会被 init 进程领养。</code></pre><p>僵尸进程：</p><pre><code>子进程终止，父进程尚未对子进程进行回收，在此期间，子进程为“僵尸进程”。  kill 对其无效。</code></pre><p>wait函数：回收子进程退出资源， 阻塞回收任意一个。</p><pre><code>pid_t wait(int *status)参数：（传出） 回收进程的状态。返回值：成功： 回收进程的pid    失败： -1， errno函数作用1：阻塞等待子进程退出函数作用2：清理子进程残留在内核的 pcb 资源函数作用3：通过传出参数，得到子进程结束状态</code></pre><p>​<br>​获取子进程正常终止值：<br>​<br>        WIFEXITED(status) –》 为真 –》调用 WEXITSTATUS(status) –》 得到 子进程 退出值。</p><pre><code>获取导致子进程异常终止信号：    WIFSIGNALED(status) --》 为真 --》调用 WTERMSIG(status) --》 得到 导致子进程异常终止的信号编号。</code></pre><p>waitpid函数：指定某一个进程进行回收。可以设置非阻塞。waitpid(-1, &amp;status, 0) &#x3D;&#x3D; wait(&amp;status);</p><pre><code>pid_t waitpid(pid_t pid, int *status, int options)参数：    pid：指定回收某一个子进程pid        &gt; 0: 待回收的子进程pid        -1：任意子进程        0：同组的子进程。    status：（传出） 回收进程的状态。    options：WNOHANG 指定回收方式为，非阻塞。返回值：    &gt; 0 : 表成功回收的子进程 pid    0 : 函数调用时， 参3 指定了WNOHANG， 并且，没有子进程结束。    -1: 失败。errno</code></pre><p>总结：</p><pre><code>wait、waitpid一次调用，回收一个子进程。        想回收多个。while </code></pre><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>进程间通信的常用方式，特征：</p><pre><code>管道：简单信号：开销小mmap映射：非血缘关系进程间socket（本地套接字）：稳定</code></pre><p>管道：</p><pre><code>实现原理： 内核借助环形队列机制，使用内核缓冲区实现。特质；1. 伪文件    2. 管道中的数据只能一次读取。    3. 数据在管道中，只能单向流动。局限性：1. 自己写，不能自己读。    2. 数据不可以反复读。    3. 半双工通信。    4. 血缘关系进程间可用。</code></pre><p>pipe函数：创建，并打开管道。</p><pre><code>int pipe(int fd[2]);参数：fd[0]: 读端。    fd[1]: 写端。返回值： 成功： 0     失败： -1 errno</code></pre><p>管道的读写行为：</p><pre><code>读管道：    1. 管道有数据，read返回实际读到的字节数。    2. 管道无数据：1）无写端，read返回0 （类似读到文件尾）            2）有写端，read阻塞等待。写管道：    1. 无读端， 异常终止。 （SIGPIPE导致的）    2. 有读端：1） 管道已满， 阻塞等待            2） 管道未满， 返回写出的字节个数。</code></pre><h2 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h2><p>pipe管道： 用于有血缘关系的进程间通信。  ps aux | grep ls | wc -l</p><pre><code>父子进程间通信：兄弟进程间通信：</code></pre><p>fifo管道：可以用于无血缘关系的进程间通信。</p><pre><code>命名管道：  mkfifo 无血缘关系进程间通信：    读端，open fifo O_RDONLY    写端，open fifo O_WRONLY</code></pre><p>文件实现进程间通信：</p><pre><code>打开的文件是内核中的一块缓冲区。多个无血缘关系的进程，可以同时访问该文件。</code></pre><p>共享内存映射:</p><p>void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset);创建共享内存映射</p><pre><code>参数：    addr： 指定映射区的首地址。通常传NULL，表示让系统自动分配    length：共享内存映射区的大小。（&lt;= 文件的实际大小）    prot：共享内存映射区的读写属性。PROT_READ、PROT_WRITE、PROT_READ|PROT_WRITE    flags：标注共享内存的共享属性。MAP_SHARED、MAP_PRIVATE    fd:用于创建共享内存映射区的那个文件的 文件描述符。    offset：默认0，表示映射文件全部。偏移位置。需是 4k 的整数倍。返回值：    成功：映射区的首地址。    失败：MAP_FAILED (void*(-1))， errno</code></pre><p>int munmap(void *addr, size_t length);释放映射区。</p><pre><code>addr：mmap 的返回值length：大小</code></pre><p>使用注意事项：</p><pre><code>1. 用于创建映射区的文件大小为 0，实际指定非0大小创建映射区，出 “总线错误”。2. 用于创建映射区的文件大小为 0，实际制定0大小创建映射区， 出 “无效参数”。3. 用于创建映射区的文件读写属性为，只读。映射区属性为 读、写。 出 “无效参数”。4. 创建映射区，需要read权限。当访问权限指定为 “共享”MAP_SHARED是， mmap的读写权限，应该 &lt;=文件的open权限。只写不行。5. 文件描述符fd，在mmap创建映射区完成即可关闭。后续访问文件，用 地址访问。6. offset 必须是 4096的整数倍。（MMU 映射的最小单位 4k ）7. 对申请的映射区内存，不能越界访问。 8. munmap用于释放的 地址，必须是mmap申请返回的地址。9. 映射区访问权限为 “私有”MAP_PRIVATE, 对内存所做的所有修改，只在内存有效，不会反应到物理磁盘上。10.  映射区访问权限为 “私有”MAP_PRIVATE, 只需要open文件时，有读权限，用于创建映射区即可。</code></pre><p>mmap函数的保险调用方式：</p><pre><code>1. fd = open（&quot;文件名&quot;， O_RDWR）;2. mmap(NULL, 有效文件大小， PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);</code></pre><p>父子进程使用 mmap 进程间通信：</p><pre><code>父进程 先 创建映射区。 open（ O_RDWR） mmap( MAP_SHARED );指定 MAP_SHARED 权限fork() 创建子进程。一个进程读， 另外一个进程写。</code></pre><p>无血缘关系进程间 mmap 通信：  【会写】</p><pre><code>两个进程 打开同一个文件，创建映射区。指定flags 为 MAP_SHARED。一个进程写入，另外一个进程读出。【注意】：无血缘关系进程间通信。mmap：数据可以重复读取。                fifo：数据只能一次读取。</code></pre><p>匿名映射：只能用于 血缘关系进程间通信。</p><pre><code>p = (int *)mmap(NULL, 40, PROT_READ|PROT_WRITE, MAP_SHARED|MAP_ANONYMOUS, -1, 0);</code></pre><h2 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h2><p>信号共性：</p><pre><code>简单、不能携带大量信息、满足条件才发送。</code></pre><p>信号的特质：</p><pre><code>信号是软件层面上的“中断”。一旦信号产生，无论程序执行到什么位置，必须立即停止运行，处理信号，处理结束，再继续执行后续指令。所有信号的产生及处理全部都是由【内核】完成的。</code></pre><p>信号相关的概念：</p><pre><code>产生信号：    1. 按键产生    2. 系统调用产生    3. 软件条件产生    4. 硬件异常产生    5. 命令产生概念：    未决：产生与递达之间状态。      递达：产生并且送达到进程。直接被内核处理掉。    信号处理方式： 执行默认处理动作、忽略、捕捉（自定义）    阻塞信号集（信号屏蔽字）： 本质：位图。用来记录信号的屏蔽状态。一旦被屏蔽的信号，在解除屏蔽前，一直处于未决态。    未决信号集：本质：位图。用来记录信号的处理状态。该信号集中的信号，表示，已经产生，但尚未被处理。</code></pre><p>信号4要素：</p><pre><code>信号使用之前，应先确定其4要素，而后再用！！！编号、名称、对应事件、默认处理动作。</code></pre><p>kill命令 和 kill函数：</p><pre><code>int kill（pid_t pid, int signum）参数：    pid: &gt; 0:发送信号给指定进程        = 0：发送信号给跟调用kill函数的那个进程处于同一进程组的进程。        &lt; -1: 取绝对值，发送信号给该绝对值所对应的进程组的所有组员。        = -1：发送信号给，有权限发送的所有进程。    signum：待发送的信号返回值：    成功： 0    失败： -1 errno</code></pre><p>alarm 函数：使用自然计时法。</p><pre><code>定时发送SIGALRM给当前进程。unsigned int alarm(unsigned int seconds);    seconds：定时秒数    返回值：上次定时剩余时间。        无错误现象。    alarm（0）； 取消闹钟。time 命令 ： 查看程序执行时间。   实际时间 = 用户时间 + 内核时间 + 等待时间。  --》 优化瓶颈 IO</code></pre><p>setitimer函数：</p><pre><code>int setitimer(int which, const struct itimerval *new_value, struct itimerval *old_value);参数：    which：ITIMER_REAL： 采用自然计时。 ——&gt; SIGALRM        ITIMER_VIRTUAL: 采用用户空间计时  ---&gt; SIGVTALRM        ITIMER_PROF: 采用内核+用户空间计时 ---&gt; SIGPROF        new_value：定时秒数               类型：struct itimerval &#123;           struct timeval &#123;           time_t      tv_sec;         /* seconds */           suseconds_t tv_usec;        /* microseconds */       &#125;it_interval;---&gt; 周期定时秒数            struct timeval &#123;           time_t      tv_sec;                    suseconds_t tv_usec;               &#125;it_value;  ---&gt; 第一次定时秒数          &#125;;    old_value：传出参数，上次定时剩余时间。    e.g.        struct itimerval new_t;        struct itimerval old_t;        new_t.it_interval.tv_sec = 0;        new_t.it_interval.tv_usec = 0;        new_t.it_value.tv_sec = 1;        new_t.it_value.tv_usec = 0;        int ret = setitimer(&amp;new_t, &amp;old_t);  定时1秒返回值：    成功： 0    失败： -1 errno</code></pre><p>其他几个发信号函数：</p><pre><code>int raise(int sig);void abort(void);</code></pre><p>信号集操作函数：</p><pre><code>sigset_t set;  自定义信号集。sigemptyset(sigset_t *set);清空信号集sigfillset(sigset_t *set);全部置1sigaddset(sigset_t *set, int signum);将一个信号添加到集合中sigdelset(sigset_t *set, int signum);将一个信号从集合中移除sigismember（const sigset_t *set，int signum); 判断一个信号是否在集合中。 在--》1， 不在--》0</code></pre><p>设置信号屏蔽字和解除屏蔽：</p><pre><code>int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);    how:SIG_BLOCK:设置阻塞        SIG_UNBLOCK:取消阻塞        SIG_SETMASK:用自定义set替换mask。    set：自定义set    oldset：旧有的 mask。</code></pre><p>查看未决信号集：</p><pre><code>int sigpending(sigset_t *set);    set： 传出的 未决信号集。</code></pre><p>【信号捕捉】：</p><pre><code>signal();【sigaction();】 重点！！！</code></pre><p>​</p><p>信号捕捉特性：</p><pre><code>1. 捕捉函数执行期间，信号屏蔽字 由 mask --&gt; sa_mask , 捕捉函数执行结束。 恢复回mask2. 捕捉函数执行期间，本信号自动被屏蔽(sa_flgs = 0).3. 捕捉函数执行期间，被屏蔽信号多次发送，解除屏蔽后只处理一次！</code></pre><p>借助信号完成 子进程回收。</p><h2 id="第九章"><a href="#第九章" class="headerlink" title="第九章"></a>第九章</h2><p>守护进程：</p><pre><code>daemon进程。通常运行与操作系统后台，脱离控制终端。一般不与用户直接交互。周期性的等待某个事件发生或周期性执行某一动作。不受用户登录注销影响。通常采用以d结尾的命名方式。</code></pre><p>守护进程创建步骤：</p><pre><code>1. fork子进程，让父进程终止。2. 子进程调用 setsid() 创建新会话3. 通常根据需要，改变工作目录位置 chdir()， 防止目录被卸载。4. 通常根据需要，重设umask文件权限掩码，影响新文件的创建权限。  022 -- 7550345 --- 432   r---wx-w-   4225. 通常根据需要，关闭/重定向 文件描述符6. 守护进程 业务逻辑。while（）</code></pre><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>线程概念：</p><pre><code>进程：有独立的 进程地址空间。有独立的pcb。分配资源的最小单位。线程：有独立的pcb。没有独立的进程地址空间。最小单位的执行。ps -Lf 进程id ---&gt; 线程号。LWP  --》cpu 执行的最小单位。</code></pre><p>线程共享：</p><pre><code>独享 栈空间（内核栈、用户栈）共享 ./text./data ./rodataa ./bsss heap  ---&gt; 共享【全局变量】（errno）</code></pre><p>线程控制原语：</p><pre><code>pthread_t pthread_self(void);获取线程id。 线程id是在进程地址空间内部，用来标识线程身份的id号。    返回值：本线程id检查出错返回：  线程中。    fprintf(stderr, &quot;xxx error: %s\n&quot;, strerror(ret));int pthread_create(pthread_t *tid, const pthread_attr_t *attr, void *(*start_rountn)(void *), void *arg); 创建子线程。    参1：传出参数，表新创建的子线程 id    参2：线程属性。传NULL表使用默认属性。    参3：子线程回调函数。创建成功，ptherad_create函数返回时，该函数会被自动调用。        参4：参3的参数。没有的话，传NULL    返回值：成功：0        失败：errno循环创建N个子线程：    for （i = 0； i &lt; 5; i++）        pthread_create(&amp;tid, NULL, tfn, (void *)i);   // 将 int 类型 i， 强转成 void *， 传参。void pthread_exit(void *retval);  退出当前线程。    retval：退出值。 无退出值时，NULL    exit();退出当前进程。    return: 返回到调用者那里去。    pthread_exit(): 退出当前线程。int pthread_join(pthread_t thread, void **retval);阻塞 回收线程。    thread: 待回收的线程id    retval：传出参数。 回收的那个线程的退出值。        线程异常借助，值为 -1。    返回值：成功：0        失败：errnoint pthread_detach(pthread_t thread);设置线程分离    thread: 待分离的线程id</code></pre><p>​<br>​返回值：成功：0<br>​<br>            失败：errno</p><pre><code>int pthread_cancel(pthread_t thread);杀死一个线程。  需要到达取消点（保存点）    thread: 待杀死的线程id        返回值：成功：0        失败：errno    如果，子线程没有到达取消点， 那么 pthread_cancel 无效。    我们可以在程序中，手动添加一个取消点。使用 pthread_testcancel();    成功被 pthread_cancel() 杀死的线程，返回 -1.使用pthead_join 回收。线程控制原语进程控制原语pthread_create()fork();pthread_self()getpid();pthread_exit()exit(); / return pthread_join()wait()/waitpid()pthread_cancel()kill()pthread_detach()</code></pre><p>线程属性：</p><pre><code>设置分离属性。pthread_attr_t attr  创建一个线程属性结构体变量pthread_attr_init(&amp;attr);初始化线程属性pthread_attr_setdetachstate(&amp;attr,  PTHREAD_CREATE_DETACHED);设置线程属性为 分离态pthread_create(&amp;tid, &amp;attr, tfn, NULL); 借助修改后的 设置线程属性 创建为分离态的新线程pthread_attr_destroy(&amp;attr);销毁线程属性</code></pre><h2 id="第十章"><a href="#第十章" class="headerlink" title="第十章"></a>第十章</h2><p>线程同步：</p><pre><code>协同步调，对公共区域数据按序访问。防止数据混乱，产生与时间有关的错误。</code></pre><p>锁的使用：</p><pre><code>建议锁！对公共数据进行保护。所有线程【应该】在访问公共数据前先拿锁再访问。但，锁本身不具备强制性。</code></pre><p>使用mutex(互斥量、互斥锁)一般步骤：</p><pre><code>pthread_mutex_t 类型。 1. pthread_mutex_t lock;  创建锁2  pthread_mutex_init; 初始化13. pthread_mutex_lock;加锁1----&gt; 04. 访问共享数据（stdout)5. pthrad_mutext_unlock();解锁0++--&gt; 16. pthead_mutex_destroy；销毁锁初始化互斥量：    pthread_mutex_t mutex;    1. pthread_mutex_init(&amp;mutex, NULL);   动态初始化。    2. pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;静态初始化。注意事项：    尽量保证锁的粒度， 越小越好。（访问共享数据前，加锁。访问结束【立即】解锁。）    互斥锁，本质是结构体。 我们可以看成整数。 初值为 1。（pthread_mutex_init() 函数调用成功。）    加锁： --操作， 阻塞线程。    解锁： ++操作， 换醒阻塞在锁上的线程。    try锁：尝试加锁，成功--。失败，返回。同时设置错误号 EBUSY</code></pre><p>restrict关键字：</p><pre><code>用来限定指针变量。被该关键字限定的指针变量所指向的内存操作，必须由本指针完成。</code></pre><p>【死锁】：</p><pre><code>是使用锁不恰当导致的现象：    1. 对一个锁反复lock。    2. 两个线程，各自持有一把锁，请求另一把。</code></pre><p>读写锁：</p><pre><code>锁只有一把。以读方式给数据加锁——读锁。以写方式给数据加锁——写锁。读共享，写独占。写锁优先级高。相较于互斥量而言，当读线程多的时候，提高访问效率pthread_rwlock_t  rwlock;pthread_rwlock_init(&amp;rwlock, NULL);pthread_rwlock_rdlock(&amp;rwlock);trypthread_rwlock_wrlock(&amp;rwlock);trypthread_rwlock_unlock(&amp;rwlock);pthread_rwlock_destroy(&amp;rwlock);</code></pre><p>条件变量：</p><pre><code>本身不是锁！  但是通常结合锁来使用。 mutexpthread_cond_t cond;初始化条件变量：    1. pthread_cond_init(&amp;cond, NULL);   动态初始化。    2. pthread_cond_t cond = PTHREAD_COND_INITIALIZER;静态初始化。阻塞等待条件：    pthread_cond_wait(&amp;cond, &amp;mutex);    作用：1） 阻塞等待条件变量满足        2） 解锁已经加锁成功的信号量 （相当于 pthread_mutex_unlock(&amp;mutex)）        3)  当条件满足，函数返回时，重新加锁信号量 （相当于， pthread_mutex_lock(&amp;mutex);）pthread_cond_signal(): 唤醒阻塞在条件变量上的 (至少)一个线程。pthread_cond_broadcast()： 唤醒阻塞在条件变量上的 所有线程。【要求，能够借助条件变量，完成生成者消费者】</code></pre><p>信号量： </p><pre><code>应用于线程、进程间同步。相当于 初始化值为 N 的互斥量。  N值，表示可以同时访问共享数据区的线程数。函数：    sem_t sem;定义类型。    int sem_init(sem_t *sem, int pshared, unsigned int value);    参数：        sem： 信号量         pshared：0： 用于线程间同步                                1： 用于进程间同步        value：N值。（指定同时访问的线程数）    sem_destroy();    sem_wait();一次调用，做一次-- 操作， 当信号量的值为 0 时，再次 -- 就会阻塞。 （对比 pthread_mutex_lock）    sem_post();一次调用，做一次++ 操作. 当信号量的值为 N 时, 再次 ++ 就会阻塞。（对比 pthread_mutex_unlock）</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美国商业大亨传奇</title>
      <link href="/2022/08/24/%E7%BE%8E%E5%9B%BD%E5%95%86%E4%B8%9A%E5%A4%A7%E4%BA%A8%E4%BC%A0%E5%A5%87/"/>
      <url>/2022/08/24/%E7%BE%8E%E5%9B%BD%E5%95%86%E4%B8%9A%E5%A4%A7%E4%BA%A8%E4%BC%A0%E5%A5%87/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b3d574e78cbde5ee18741e136296d9d242fbe628acb9fb5663d6f1005cc3cc79">4630436162ade97ba2718b7d0c4b3b63cb3a3f659c5ca08b4bca0f5845928186022b1c76c2aa430cf95b9bab7b5c45b9577590507533d7713471d090988453ed87fc9cef28136e774208829dc2619b7f6834d2c628ab2ce4342e4b43125f24d3e9097fc54d3b0c590adb513d10fc3c58763b0aec058f84adb88d6e22b4e327d18262466e5928d3e43c86e43ec6704b656958fbda178ea942bd705594995165c5e472f896d2333d0249a4536e59d2b2e53f0c9c78e2a2f325aef83afa84679e6c45bccf1a657ecf3c70bb00381b04cd9ac60cccfa54369bc926898a48847f265aaa439159d320e98dfde04a9d00925cf33f891ad5c7102356f1593ac99368772d5731d3f9411648003841e9baf0c3cd5a42404bc357ce0ad337a91ee8e910c16b0f497ac2253d1fa5b6e9d1aee86ccb6f855cda7d96180bfd1cd87ccb96f9f3754fc364bf6a8466802da7ca8c3ede0b4d132639bc29c2a731468b51f34b36fc2485fbdf80a8990503b6bf0acb4cf7f600dc1792b86b7883fb0b13e21b12164f03f03cd57bc2d855e4f429904260588ac7731bcf8e59806293a9967c86214084dff27a1c17b2696ea3b155c973ccfc7c98c593c17b672fbd440ae9a86cadd61e00e288d92673f2e89c8dc56647455cd3faf29f019349157b52f6b91aa91a61f74073249c4201b036b84f0c77a4f18a2dc13c829d582c79b5bfd238001f6f3c18dd90bcdcc572077d455138852ba07950dd147e5fc567c75452f58a9f46266d8a5415e1bcb1acc862dba509a02b141ddc7b332fdcc5fcce664103475d02bb260d141ac24c3306adbb06dc822083481fb547b1d44f6858c7f3b33f9a471b6d9b55460bc91e15996ea6bfab038c96f7c1a295d9ed2ba8f9d9449d747d9e0c567fcb4e6bb058611536ec2f51341ea63d309b76d1239c400eba3a591f663c0500e08e3784973def9b67a4122410709dd30421c2c1d380449c264ec6d3247b7fc6f76fb38dccfa94fd6b7e8166c45d5deb3b6030e22f35d050ba4af499462cf8616dd56537d634459d5bf7a3a9e0429e7414b439d1d72eb4a80d28643986e242ebc43fc4bc53b4414e084f2136b996258abd80bd1e445a66b3b2aceb779131a83ab49b7c904d85998c55859ed03d024742df6854b952633e1c4a3a96e5d8ee4609534f8d2934fa20fd143488714c7dd61ca763ba849f6b604eedd20abc2bb86e62c70dd3616157ad0ed37367dfdf4f85405c5539b4e5d5fc8c441d34641434bc6f3374f2df287ac89351e6f7fd3e0e03cbcbcad357d691586ff67a0793fd43defb261f523a24b88f4627356ee580d56c68d5b08bebded6b4fa273263bd237283b87dc548a5774334d69a4b96161e73f62ce77c3c41a36c79a6ad8b524d1be30326cc8a7b6370237c79ab50f4219bde060507aa811904ebd7d84355a37df84d5eb8e3d51e49ccfea7f8270ad0101495571259bcc84d3b209034d31712ee6be4984e5fdf6d69131f8c5b6c16232e76b528c23ead9e79bc0855f3115566baaebd8273ac624bfaa693abb9ed8dad1771e943739a24a090db5fad91fb7b09b1a64d6fcd0887d602b2796094f2f8c3e1a863d2a51bf4a25ae9847619844a8a0f3995acbe2a9d865a9832da80630c797ae109616f4eee7c942922b169706e14fced4a761a4ea1e801857e586b066521071494c4acab0f6d2c9f1ae87937b44d46c6019cb8e63f4017be855c4ce7e915875d2dbf62cd704f99383a74cb4a2e2835c36579cfacab29b12c01c018ada54fc3e775ec6c153c7a417dc47b91aadc6632615c2fc6a1917b5880987af8f4ed3e5d62f6d367801d925fcce87f0cfd4098ca22a8baa1b2fe146450a89d73c9550be4998f61a382c0cdcc2a225ff2de010ebb077617d3d96ae81c8182d5258cd854014a71f6c37cb1ed5addc3dc405f01d57d9633c78db25ebb468985314f61c2ec68fdce6b1401b65ca7f4e41c9ef9e620efdba29f202c3fd7b8c030c8cfb4ec73973f745791d8cc721a96d31a714cf9216a2221052e185567f2656e24aa77edbef79364e83e9c188ae2eaee77169ff505e8c1e7fb92443e69984bf80ad88876eb698fbe596495bb5ed7ee6b196fc2ea303248d5c228c5af454cc027cebfe92658cb6b3dc28f78642816d8fe94a5fbc1ff53b17732f025852315f2ae77a5c1d0f014afbe4cb6bf9511db021cde8494d993be3df16294473ec86b9b9a7468ed2e286bb7b4ec3eb5afa63c51b91a185d2e35e051698a0ae061e26338e923bbd314ea3ae204cbf6d79ab3db59d32f4186af5b8b3f2448d739eb4c8027037a65b84a8ea1b0f0e8370fc71e8ad8ab489cf093e94585acbbb36fa71b7e98c6a3fbd0d3ff0adfcaff3a19f7d089012ec182c839c10c6325abbe1be9ca080b1f16fa74e3237d48e477f04c0bec34a03b37c7121c9c18e6aa84689996d15737b62e5da666b4d593914de1ec2f151706d820c37edd750369d8d6b658f9d8d45c2f9ed018acfcb2ba7b93f1e872fe0ab6608888d941dd792358fe9f0a89a4ebd6b20bd44eb18f9df865c6a021d12712dd5a6a8b8d04b7d369e889775fb7dbf4b8954dbd66e19efc21826de51728aacbddc14b8dca7093a0379007fbd84c7450b0044a53ad7460f524b55c981d4547a0f0c6b7ac2825b088a2579fb461b2022b4fe89bf047979bd6d97a43e1c2caf2e4920e825f1dda2189eb65583951e88526e407c324a80ca17701bd943ece0ce2e7fd3697327165c02e8e18e787bcc9e7cd4415ab484539faaf9a1e6b412f97569cea366de0eaf99316eb399cc58db4cd8826d133b2d0c95d93216da024c27dba8e146d254985e7221e2b72d72b5bd0c5bdbf48f023ae3abbe1993caff0d57224cb7b620a04455b7cb033c646816920b2d3d3650eefcfbf5022adc936c67314423389a64b91c4c212e3819c6c958317ad55df40051f4c309b6900a75bcd450cd74cd805153a0e51aefc1a77fc97844066aee4229894d0e50d3c44d9d3e042e1dc8b24d18dad3619038323a17a4212d260f86fe6188df1b59319b1b71a6717c84cdf7869be8eda06f3a0f38851b0911f99b1e11e6e5b0e707567a3a93d897e4f3dab607279d85bf0bc77a2a4f58046f195ab7c3865d4403978b3c9c34d6314c266fcf91a450d0d648744b3ffb1b43da06e173c97b0574758f0eaab042f742028f24b1a15ba96b3eccec30aa261a280aa07667195844df43115b7ec17da0f551efb7108faaf112489c405f6d995ef53f49175cc5ab80cc159faa8d884dd22c65a8bfdd797237cc2a703e292aa42c8e791fd6aef537f3312e478dc2868946b823ad7cab8e3199afa18044a30ab897e8893bdd595b4a482be86855681545c778750c5835e9efd6f462fc30c8ef5400728e9e850204b7407160f4d0b84095d4bb1ed3a80ed4f75fa18c2d24614b8111a5d2311ebdabbd5d8dab758913c0f20c6aee7fb17c01e7be8f98ea05948bd2d6f8e2cf0ff0d1f5f9522a2ff76a6bfad51f9016a067617a9f6672af484deab049b4912ccd416846d061f8098d876ad7b7825a86200b7649df56008213ef44135e7ca45211fdd78b408d3011df6ef8259956c05b3d0c3a0c5afb8bdae0ddce8b3ea28f3ebc271a75b2e8e7f4bef7b5ab4963e223a12549b854cf03ae09c48493d25d311d45bb51770476630cda68ec11478b282ce815fb1ea97c87d31f9badd5b4a9e6ed5ac67ed84b18be7375e0be3d15136fb33dc2fc4acbb69ab853bb27bb23bfda1a1d2e435c50443697125d0e994525d1bc217aec827d9abcf34073d57170f2accbb3c4edfcfd8550588638d0b5682c981b83fd517ad35521cb61e8a9a91053f060348e8cd70d83301dd25d13baeef5c0052f8691bb1b051454357a9827ecca9d603fee3a518fdda33a47fdea259c8d74c7200efcaa4a3775b6a178946da64b937e51fd9395555db70c510b3817f4550be9516936f535cfa5e8207dcc0b177f4d94b5151562d67340c8028185e16eee9fec822d52b7b6245ea58caf61d098da069e82bc0a113c2d0a36ebfb61b78edbc844f883a7c8bb1614652fb67a121e75a52479d34ef7ff85c9c8c2d1a66cde90d9c5071fe91f868a73899194d879117c0440391b52bca7639c8653b9a0a4db23226f9ca417c66330c30b2dde828edf4122666123a0f33de36194cfdbc4f806fa26ee1e4aea35e4f2cc3f6d395a5feb00f57d86fd6cc2fbfdbc7c5f0db13de6d0312c9a9f636a427ac007b07b6f61ae33b4a720d7e3afa33e8d18d2e862503fdd7d5988ca5cac725c3eb69a275e09ae7479445bd3de1e58dd83f9dec41292c11718aacc42f41976210809ebb5c60448db4b9eb97841ef5936068a85808738fd538615cec98aa3c155103830c6aa2863be483e55b49248e7a4178edfc6e72599a3a7ac9861d1219894870a8453d0be17167f594596ab237bfd830c0dcef9cd77873f8d03c1b48d2a5cce651d44f2c667388da18a2a76b45c4530029a6481906636632f9578a159a8466155f44f79ad998e06b3fa4f1d8047269552dbb1adb5d04a1689848c136a2df6106ee4db3082b39c158f6a5d69d4f6b778ba34cc604b3c32c20d12b2d767b560e8e3a66106da52b279bcfa036dbaf772905e5f4af3a976cc8904382115cc09079be50d5e79f5cf384ff48dd595ae186fe771256cf7a1d3000a225e78dc5d7244dc9e5a2b4508c0e3ea1badf78983e637d6627210c9b370d438f929de9730fb592c4d826a2565e0f59b384746da205f8d5b55c44080e5729049dd81e2a224f9262753281690286b97aaab460d1c580caa10a1d96f39c5c3cb096c47fa70ca6af51a62d4a986fa343337e178666daa3a66d1ef91e264b60fe113495037325195f2bb638886d2e986b8cf5750550c2eea4e8f0b854f3804b3f8183845788ac28cc53b0eb93bfd78507ebb57bc894fdf7d24e42964a31626b90a1f5796c137a684ed5402c5fce4eb493348a5dbb47a4c7fb8efaba5a030141f4282a0f12a6a9d441c179f10144e705c38f958c114ec242e11682dadd1c7b9ade916cba42747f721896e187b522748c3c70054462fcf433d9d2764ee3437c672053c60497af82f444f58fd3cbaf58544807257321918a4d7cb6341ddc0867c5a2c61c308573d9483d4f578241895328324b953cefc378475f1d32f8b5822bcc84573db3082a3285c3e09f2f837770583885f7cc315fb706c90b21d7d5002314ce658ddf7b07d50bd734329be02b77d00c6d043f3d4db5afe9346e2822f724a7b4be2b1c637a4511dcb25e75fbb23336b40fe2dfd5f833e015ed9d039c6a504de1e4dbf6d37c618082899be50aba4a7bdefee9313b3249fa95f64f687b44239912359252ca1377e3f2079435139f26c84b4ec167bbd8f8932a464b427e2bb38e7910c85ef1af2344167e9ac9ab293ea7b486724942f568e22ca38a1f44b264dbad6239dac8537beeea7f5fbaf884eb81295d0f49d39efb2bd4a372439eb2d3af3fb304dcc0cd5a2f1f5c909ae0a88d4a46183d09a3d480b0e5573b02b0ca9c7e47b9d76c66962518af1925168ab2ff8c39f6e4404ed1ee09efd36e9351ca2cc2c20b91c50358cc94c86e5eda5d019cc6b3a424fbfc94749071b67e1873efea415993b71f6f95832cf096e42ae87444ad930dfc7b1ad33bc563ccc7aa9c095c741c02f84407ecd68a85c0674b5f921f057abc66cb858d1459b7449a1dee1bfe1235cb9d7001b5f4a304cab2a21253e7e43cd8d51da05a665d96495efce7542de94f6f8b7e90e50941477cf3db69d88715f2b98f0a810a01e093a8cdf4d10c129ce7d6b455d97c8577a220d9118ae0b3a92b42c0392624f733305745c814f03172b41171fd3c589058e90610c7b892a11f3ba9e58f0bdd075207f8089439a1a147179e8d9aafd3c649c0bed724fad6ed68ae9cc40a27a62fc54b7bfc382fdc2e8f727488356b396555edc6e8479fd50ba6a261d536aad83efa78c8d6b54cc399919ef2f332414e1b531629c3fe7f4b16d474f538f4ed5de1e5b2fd99dc07a34e4336dc887d42bbb89a2b1878ff3202a77f4245adeac73ba4622cf556eaf8d6b7271fd9963ec8f90b64e307307ec03437f0c0fec342b738d26d4e6bb2add859075a99b39e4726f1ef62cd31498dfaa25d80e96d72873ff5db19aef82ca53f295408ced5d9ecb790cb9daf874ee31c15ceeb0d9f01848f34a7e925e9da48030d82805ca109f73f3e1906b05718300911b8162601d5e9ac67e10d8c74938c31bb12ccba89edacd65ebbc2958b9e78f4b569a3265014a3fcabbf5ca9c1a0a66cdd43f7713044aaf15e8c4029f9f677e9784cb9b9337e2c62952989dbcaac4b8bc2ffbade56ff2f88d63635588ccc936a7bfa20603cf0a0d12303bfb2bfbbad293417d38d67db58d0faba9938ae538cda1626152ccb25076a42420934d48cf88597f582c3abe2ee0ac430d9cf3ca717b13e8cb2179be7f9044937ce07830d5ff42d36aaf31c4523a116aac4cd5079042cc43624fd1e75025122215e52c6a88c0d6ff537e5ff67327dc7a2f2554ae6d01503e140217e0ea353e9d8d21b8b01de56786525604dbd3440889982bae77234d427fb65ed33903392908375fb90517dc46e79463bdad5bfb172376194c556f01ce2141dc67f709527821af1d1232f7e383f642ad5debfe23b06590031ba236f01b78ca21fec2268a6fd36186166cb0a84e2515c631c4bb802498fd66d80b68ec9c198bc50036c551f4f65e43563433fee2c37486e6663aa7b44e5cfa044c8be230dca86d54dfe74a73ab9563d200986e6cdb537b3e1e226cc79b219d31b30e48b8f8cbc0f9ed3959bb43edbcd68c954757512bf2f6dd5ea780e6545416c03cfa0512b4aff4807c74326151124f87dc2e2a8fda6f07b8c392c3343f1f0221fbe5cd2d7b9ae51d4a754db58bf58f80e347fa0acddd3451d3bd8412c4c564ddd043f68a7dbc77f761a92aab31c303366f045244029f5d98979c522148c3df51eae2408f387ed93b208bc75448d19f6468f437a1f2889f140ac258151e8440a3a4b2919c0e38e991e5bb72f2c759b7b9eac06b32c2498c3adf6d7bbc2e644324fb8692c16372af0246560f40323550547a8fb6b4476e23d113f6c7364b5d9c7e9a01c27dc338e5d8359fa4466d45c41c18caa2771c10c521c248e9a14eafb92c5caf03e2ccd6675c4d60b87eda7d657ac6bf012c9f6debf9e4a6e055aa4be6a0511f8da81db591e5f5eb5a5dbfd0e6abb705a4ef0dc83915303f34ff1c0efb1a1488da52ce2cba90653667b65da15eff5da187c89f14ca5ff7cc3a065230bd94459c360fc2c415f0439edd9e2daf26164d7c1ee920c1e591b5d5174f54ad79746dbdf37b227d1bbf86d83152a1f24413454ea46adfe23611c9f2aaa38d2919a950412826d0b2ce8d4c1e80a4f3cb39e1ea339b3955206d41c5a7d93aae374f2bdc6f866a413d93d151dda7d74d0aa001377e33e9032e24421b96b76124b8c118dc57d37dbada40654c7786fa4a52b71edab2e166a3221bea07249a91c0eeb30130fdd9f8bb8a72d017f20e7cdf9d72897791a7aa3312f1eb8ed4daab743daffcc67ac1cccdd2ebbc9cad476b8bbd4f49edb8ac4875ff3d092da1118ec883e056a6a2b10c1f8b366bed10462475e657f45cc3b7549433637c96bdf3ddab45d4a304196e841764d4be6b66c7bc5ec0850d2aa5f6a8866c31355c6479014cd948e6b992c879c9d3a59ff1d13046f80742e715c3a01dac33bf158093d0fddf364cf88d8f5e20bc0aa4f4b0b91b916dee4be7534222fdb38e7b5a776ff6452d5fee79e8e4068645ca69516301ba2c7d91d469c1b27bcc128433c5df33b2c335028cac78a68fba56ec5806fc3de8b8e7d556318d6df343cfd5435090074f212f984a9a5e4fb26449bae438d48c8f849f56355e888cc866ade178d6090e23cf1cb7ff89e4b114108120334cf046d0d4f9eb4ebe56a5ca5d39638c0f1449460e41cca1021e9117a01bc21a0a59b85a5eecf027b1cd9144ee99b2ecf6f4bbc22e8f2652958e9c837ec9316039b4a02c713cc54d86a6abf040e40023328fc6bbf1c9f9d17ff04097212c0dbd0610e60da3f24e638871f9f9fc49581133eeb770fe059f4460229f3743fd3ae9c3a1ac8fc842afe255a3928f5e20d808fa57a19eb14f9e2cd172cd966ae4df6c4a9c377125de10ed2f50a5cce1c981b5aa1b2f3b3980d449c84658064940e99221f5ad9f1cdef0b07cf3878422fec4e638208b4efb6fc0298694347b6eb0721035ee01ae55229784bf1f21cc713dbaae1a36f8df620d84eedb9e875c16db2fc2dd2adda37ec55f0c62d1d90e2bf779d712cc20c6cd1a6bf996b1a88877e62deef38210fd0bcd5bfab6283e641adc0504af0fc0a405ff051c09f2d58322ccf1bea9320a184e9df16c91fc5121351f958268643499c89a90ac3f79035f8aaf5f8074fb465076e2838d8f5a7c6d9e41facb45374bcf840162f32d8ad98acbf597686a27a8e616478011fa813a97b16c9da8f653579d543d8eacc5ddf845c3a1bdc6e741a167259bb786ccb0d6a3d731d9644e5073c310fbe552bb7e649b2b56b5f4e75807b04b1aa70e689aef61a05e2f07b1713d90f3180af53454e9350941a65ba480d844763e2cc1bf9d49106dd41b35e5bcab9efc5ae7465e8a654a8efd9034ce07f14af6b3a4b984c732e60b290f224b3778db6e355194f7e954c7aec585c5e0f56e12cde0d35d7a32980a16cf80298dcc75239c5d4267f973652de814ef5b448b1c96413a4f90bd02b408edca1175b93bb4f1c596d0f8c1fa0e3eb35d0edcd5539305f00b0612b0eeb0a309931c93246e959e389f05cc866aed93d5a5e0951772acaed384dba9b894f57d2368d10f672c9de29565f46b0131de59f3b208606aefb799bd288979fa663b42813f64aee601042162f01980120b894274e063e8e2b77dc12ad602b9174fbf99f63cf2f862fc2754b791ef23dd407bec689f3e514a69b417d4c0f58a92e95964fda649750895f94382b3af6f9551a444ee75624b3b6af2cf5710b59f891ac82ed5541beeaf2457f62e04102b19f70e54c1629c760f3920a62117e7b6116eb7a0bf5ef60474250cb483894f2401d59710b7b86fe92e568d30a8d97860ee6cfc800bf5e2933b7176b464bb98e7e9d745a7952036fd30b2b3a2f28b9b21c8e15a88e668e65d3bc12a79f1971ac5d7a9a861bd8358570aa1f9a3bba77d17a458cce7c7d0a6333f5df13b6520b7e0c16684a6c4d533a8ee339a12b76d55904e61d4b8acbd8cb476efc3584bbbe9899f32b3630f3c9012413f0b73698b13c818ba376fc9f9bc8610b55a3b1dd2e70a3403d1f84aa56e3edfd6efc2ba1789f5956ba766b3fc4f0f7e5944264de225f5d5af20a3f1fbe0219f44fe31b3350ef5f61a8a563c58faac10a997cf2d5bd624ff503bca3eb1832071b171a6577e520eade8e571ff32983f244e4fdd81eb1708c530fd054970c347e92e2a38a116e992d6244b383e8a891c73760c401c67dd49c3a726df3c85824fc258faf37dd19c62a85abf47e6968ce4ff40036a62789593ef01cf19b0db003f412245526dc585e1f95fd2e79fc8784cbdaf70ca16147aa6d29e394e0ddfa7beb69958553f9daa8d359fd9a706811ee806b7dc384c3a572d5da90be79b416bbd4841500c66d64520bd80627e583789536566ac6176ecaec416337b7a6204e2609a699fb29703847f044bb76767603d287ba818d9a85c8e9f18318f10a84f278498171ab45c502975ec66cc7a934958166720578ca4a4d42569147d821d7542856d34600ffbed0029b0c8c9b586525666cb48b93932b6f649354418def4be1b5c171258526548b39bab207b159438005a08112d502806640840dc197b08008d5b7fddceb549a019f5e1fa6aa38c44173e7e003eddfdb7e831203bb88b1a3867be6920f5a59f9047478b82ff04f47e6284ef524f3844c7d59cef31245d7600a99df539999e1ca40455543571672016331d16b354fd2ea96af53157e60cf01f3e5422576c3239f85924851fc8b50c4c90cb67cb311930cd779a4a911a50eda52e2e2cfc17fe679d5468cbe9f727d64c7752117bfd4fc06c308c9ee18463480cdbccf6d23b3e2fb03276dc2b6d9d2cf23ec2cc22901b07a892c147c4e4a9a890c1e841a98c788b3f18dbc02845341c76099b6319cd586321dbd80c54b06248d252d4d080cd54a473f29cf3c38f4b18b753cbf1603da13a9cb8a9cfbaf8e8544ff9363c6c907726990b3a991bd6844d684b5aa26dedf6022a04bdd7b584a5d392d899edf38b7fbf4e46baee75c75d759f56087d6c5cf41564f4ee3f1d7c1ccd8ad597ea4537706a723017593c0ca30ab275ea7cac4e564431bacaab864997eefba1bbf3e107955bf9d85953349e2481f70e18bd0580d73a3ac3250b67cfa99abdec6a7f86a3bbadbb875d3af3f52dbb2dd9f6335cb06389002c5332196334084f6aecdda4f3df5746dd1498c439d7d16dabf8e92c0be035f67c9570d1f35ecb9eb863740a874a264056fc9f4cea92dd958bc5b3cbe55898b2fa3a0ce1d633331ad595d0f59059eceb751dbfd6c63f08a42d36795b7eaea8d5e1631896e8d027a76a6746d4d2d68822f1813de64f1271aa784625cadd1956ee9d983c393684dd4628f6d9b54ebfa55bee26b33ae4031a09e8ae93f90da0bdab2de0ae7e473e6a051c52fc5940e98f4d807414c6d1e09f9077078502aad7cc49753f9571acb481296d7bbff057fde8ab6c0b3e60c7906dab6d030476723d9b7009cfd1a06bf754fafd77f36764a45f0b7da0d90059482e96f8c55101026fa8c416f096df71621ece26b9d07a8af963f93ce3c5d5a9bce976b46c7757c7ae86c528488aa9f782300e21c735db8a438f0c60e98b0c3fde1bf57d6d11f9f1bdd1b4c96fe0f5d587204b542b7e71240e1d550fb550404e26727f48ebc9271f8664d2aba5fb93cad4582c4d92a558d76de22ec29c826c863ec087d36964ae7867ac230e8aee010d0a35ad81d5c6a092f38ff57d09cc3c45eb48822810c62682d35c9e15e7dd4130b6ed6e3eac4894c755301ee98743b36c1bee11754867be4770ce40f937456cf81bb4fee02ddf2fcd45c538746b277564b0d55a99b3eddd68e482c3a0a2f500b6e14af285681a302519c96f4a93899eb7121e0a752975648bc12ec94ab7d814d883dfae17bcde9d523995b615a6b54ac8cede3f587224ed015a8a52473b3017de2b46037ea90ea785c7a57027d1643cfe06d80aa2b54e3094eca48bc021d59a4d382784acc4050bbc5f073e1eff01519b5f36478cd5b461e89d72128bf61de0c56b392881bc5ccfcf55f990957bdd3a22d34776d7f05cd4aa497717cc640df73d5658fcb1aa78f962b2d1baff1c4f1e956c328ae43909bbf04d05a8677493e559988bf4049f4b8e745c8cd942db37b34fe4df86649de49811dc1b29f47387570987241d19c6a89dad1f4c92b50ea6d30fa4916bdfceb16e8c41e8721fb87eb36cf3dfa74877e34e13c815368ece9d5c2b290c57c816a99936cbe16a247bf54a88061630419570f8f3c0791f019449e03623aa94925bd3a7ca8758944e2c33ff3bda900d69486b28f3daba0c9bfd486427a9f96828b8c1a77ba639e75c79a0b035894f2de9282e588f18f5db65fca1077de2383ff85d5cb1c030294cec2154f33b8c355cbdff8da876f43bf119fe3c58468e412e001a8e56a093242a20ab1ab2598e7f841e2f1941f6895b809d02b8196cbe4de3125f9d64c9eb8078a0f28c924aa5a188890fa17ce671c04762b4f0cf8726df5e62cd057d35d2a7acdc63ddd3e992cace9c06fafa1fc2f6caea6fa8312c965bceb99fb6df2f50f22676355ea1df1e298104b9630a1996fe4a2758d0ed5500a2201f1ed53397cb7c397b461c7cdf106f9e4788e590a3b779feaecb4b86d661579f9481d2a596e651bbd7599a68eb0c0a6525ff0f1286c6021f1d7d2f821637d66e9af3f440fe1b48b66878a3fc6c82d1dd0f12785d452591a6d2f6f2f4b73769fffb10de8909864666e1be50dcf782e71950721a890c73fede2401a1dca0dcb5501e1d933ee1cce0739366cfd7030d2277fd87bdf99867e9b62412270a6902e94ed0d7e129d7c7724cc12e7028a5cda8f62d1762c2fa81865e5c7b1d61b5fd6ef78feee3c2250c7398bf01b269f92464bd0e02cdd85fb0795e0eaf0f25c51590942fa926053efa4d9713c3f39b4be116fd6d78e662327d3a2cbf0af8dea7da01ab136793b756bb4b221584680e8ecdb404faaa985288062a3b57508385396d26bce1ea3fe24a2c21f975ea79bde699f58b2933839aaae2d2b48d46570eba1b43cd89b3a61ad05d127403404443a19e01cb9e0ab486bc2555f5c56cb755e8e4155913b50236484b29ecdb3a37cba7bad7b2d7ba4c05887ab21fe43dc537ca64518c6201578a81f8c4028089e14009cf199312de4c9f94c4baf38694c26af6f0d382d3980acd0b3cdb9aa7138368a66a4d82ce8b1f23fe93d7751f69dcbb770076d35da2c16ab12f66d3f475a43856fa95d2fe8c0ae097d5e60e1f3f1b4b96bf62b7cfafd5bc543dd8a4d73b8b4d265928d1aa1101cd44fcef90218bf77604375abd2b0808bf7cc54428bc596191da3ab6d75d5bfcbeefdcc3e5f6a7aa86f802c30f7e9146dd0d6e1868add926f85d1545810c12ce0d948fff7bb9694ecdc2379309afc562a72c146a28cb784436a62458acf62ffa5dfa4e8045b584c5ab119f03437731c3822b75d230b699ed0ddf53c553dac8a7a268f25bf216bbef1fd2bce2b84acaaf7fc14c82567348561b6de2ff88df080daf33e2c97d663b40f9ae82ab0fb9af2650284d567596e5dc0b4c9d397af800832da327fb862312f9cb2f2d81892b5ad06d7bcb3c147dffef9146d2bd8deb12f0fe402c93d12f9a6bd938d2a54ccab310eb472fc27a73a44d8cc7d1777886efe4e3546928f22ef56888e95626dfa3373c42d4ae76cd752e1531a0615d43daf2ed4aa8e3e249e3ca48bddad4cc120760c97aa10ac027879c1cbad0dc907a0429c20942a74d161ab05bc8b549cc66a475ec9ffed10d3d5beac2bbbee585f6039bdb016f2a12edfc707a664b147592e8eb781bd74079f1a00bb0a2d74091b3162ae41d52d31c824348f3841c3535007c2d5434137de8e273bfa0bf3b5d33ea67f90221d97a8c498f845e37b19ebd5dc9292efdb1b5b13df4278b2e04cf33f6ab83b8bab9a5cad4ebc2c2ad14f8b6e000454c4bd3e6af219828c10587cce488c77f9b261f88b625069505b2e4ed0ca367979a9e9580e52966384e830f6bcf8e63bf72f8650737e617126ce306da0bf4f8ce10a082073a4d4b042c086128bc3b14e91cb0d99be9c29f741d89094f943153ca76c8a9702bb4585ff032bfe44aeac870367b3c34e2c45ac6ac712fd235192d8a4d159b23496f271afc737f6c31eaeede6ecb624d744a74cf1a80811eb8d75edc4fb9ab906f37d69e6aceb70b0b79119ba790afb568b0f234077e893559158d00618c2682b8c9c79eb27fd31736069d5144d25a10f945cf0a819eb45edf0a423ba1ceae4650b1f95c9b26a6e1fb29bbfcaa9d1f6946a97d2d010d78d555d130b3b684ab470f1068b7a107a80c938792caed7509bb2fa5c05bda413132ae1324c3a54b5fe156eddea1c183298690b297eec56f15de3f9d517d02b715ba7082a453698848d425cec552648cabee2e4d19c047f5a278095b83d4192bff335d3ba8184b050acca9823762d0133279aaa425fa9773ae239b965f0ef7fb5be8e643b60188a30e64e696fd692a3c3b9ff29f7cdd2cdec039eec42e305a1f4f89a2259e2dc12430bd755cadd9157ca5a5277cff165481f47703667a0ff3af97b61f63cfa0b04d5fe573e96e4d3193ba6c775013a616337c6bd9a81c6ab40de4248905df02fa05d917e878b570f82c1e97743de9ceae6b0ce556ad4cf6f4d7ebcadab3af631f600bbaac49c587f0f200e8d3054c911ed086fda03a7b4851a7529c7a9bd561c0d34cec3b31089a2e419f40a52161e600766c5944f80be31bd4f3e1823cd8e689c6fdf04274d00c8c02ff0bf15bc8d6daf9c10a5b8beb5f45ce7dfb8461e68a460d65e434ea31f4bb07f3f6cf59aebe31aabbcf25b032be6b04ceeada02d812a886f44fa52fa9d2964d41a66e065ad9f91594f24857ec5d4f66a99cf4ac71fce1d38fd4a83cbf546fa8561e7a484466965bcb9d45fb55cfa73a16e467f9c693bf59378c48079c24864b570235ff3a8fda60215f9c70694e65192e4adc8c1acf551466babd2b73741854e580e9fdf35440f8473728a1817e2499f30657476e9308d95e65e6ad892e28abd104ab56a8e95dee1b6592bd034e82846200dcfb8e6aef5d43ba41206ecccb4cb7b33a10c2aec6242f18fafd08a0c399c7ccf9288b2c9f3154f59afb576067afea9d8a1ace68556b8941c3a329fdb4e1c5c861ed24168f47f1b1d171535904274f1ccff3bf401bbec1965ba233782458c353bce971f7bb994c8b5da3d23a871283b33c27d39d41e4201cb73c1cf17decc2a86100c858dd12482d66be910db5224705431fef5dcdd38a6e871cb7fee8e038e4185790483defe2b91bff494ef6d84fd41dd3bf96d7bc65c39bb7b898a14b1610368f0533944423cf9d67b9d51e657eb10b4309f912e3ca10bcee9a92e37a48ef02e6a26cff6cd2552301c887f0529562f5576f0e48f9082937ece67b077f2d77c4fc33a9d7ca3867fbcf86cb278b040f85e6c483c1a874bf3ba28318f9522bc99406be9f6a137b11327b83c5e87c95464277f51269859df97b4751dbb15db7ca70b5b5d88284ad1b9618c6ec34784b46f33bf6b57d04d234b1afc584f230103f039465fd52878d81754521d2c915cf061f8f1a0f09e7af81fe2d42f98521c0ceaee8a8f91c42d4f63b73fb2111892fcac3d506360262aaf96812c4e1e328e302747a9e9ddb8e213e192bb33fe1a5fe01da8decf2f4a609086f1a962a0920d2fa6419926bb2165d53161ebc5856e7810390f8d5fc4e9ab911c491ba243471f50fc4b0d17844216b0c17abccbb7e052c09685a09a9fb3b9014941aadeac413089e0c79537d70082d493ee4f6a62e1b77a41224a71f601c3ea6e8c6a27938b91bc7d58f1f3b78bce0c1394fc2d786a9e8b689af7367b707d144454656da0d043c9a0ff6861638097bfe7a4aac0a8aca3fbb8f4a9c98cd1a58e194b64c6a2c0ee6dc9f96f2d789e0c9ea729f9a00cb2e1140581d55bc0c721eee36e2077b2ab14744670b6861e4e26d79605a0dce7ed0018ff9b80b75a5b9430cb87b4d67302e9bb7ca7980c69743d333da8fd22f5cf2214b6ec80ad461cca2bb4bf36d4f8387c5406e3bf30b5c534e6170a2a3e423053b9fb06327f8ebd103b9346c0475cee6153f26397107001b9828b9d3c8e45b69ef653c859291bd447acccdad6ec91f66426b2706444ac20c8952f8539e1895185ded916fadbcd3390c77ccd66ff423d18045446fa75fc13b4079d79f22ce62ed88c4caf1ff4ad8aac43b2b3687f5be762c2ad9b47ccc02a42757e7e6b484e0b7d9febe68933c4f0f1fae76c2bb64839bd695dcb2620d84fcda83d8e3cdd16554ac08348471ecfbbf93d18ad1d5256fbcd9ed8e76e039839902fa18a52bfe210770ddb99b20f6431d2c46697ca5dc899b08274df3d3fb8257267860703c131e53360e3d8679439f93d873c2837a9fcaecbab7901c0376f2fb697b3edd9c97193a995ded3ddcaee5323d5c80ba49cc51a097718ec06b3db55da6bfa98fd77b189a3435f307cb94c0fa5ceebf96836da8183565ea92765ca5ccfd6c45ac6d35cb884cf3a84e7ad54e10701b71a96cc5a826a483d605a9dd301c3fa91ecd12de907e47e227c52820a3054830b0af49829a6cba8f1c0d8216230a89592731f4e37ef7518cd94bee84d19caa31132e37fe37e552496ef7076853848b90fe8dbc9c24d7540827fe6a3fdbe04af158b3568b1f39969ce1e20c30b2b9c85fc0dff8f11fcb388fa33142dee3747a89f771da7394581f9bd65b50c76b85e0af093641566099e6f269a0aaa5e5a18e8d110e7f82168812fab969dc313ad26e290405547f828f937b73a07e7e4cd62e895c77e619f0c738a907a0d04e8cd9bdb9073f539f4fbad7365284e03aa0ba9f1a668b452dba2aa1889c975e9de97b4a0297bf3474e24f751c9504f609f6a1a7ee4ad8789c8e280022e69cd13932eea7b999bf9f7ad1d60d7e9e95c6ca15f3d37902e1e6a79baab5091b4fadda3fd81ca353b04746bf6daca7e06972c95dd154ae09353f9e0b635f898a9937d790d1c18aff9439cecda3c402680a596822325f41a364ab748fe1055e0b7c0f348d30f8963fd452dfe1b56ac331ad52fc591c9fd4110b81e53d3d018c02f00ad1fe0beae059b4a4b1794eb2eaf590658921842d20c874c20e26eb57f0d202517977c5a794038e7045a1ac12d6b7f6a00904065ac91acd09327469094f0e0811e407a9c3a34bce94addf6ace85981d2756688d61fe4ce8ddbe2556baa0fa421e23c11132d57d932ead3ec8dba09ae0d0ea10f1c17e37d9f5d9d99b3881b5661ffaed2f32cb3ad131ebc6bd48997280639149d53b3c65ffb631f72c7abf48add02d81d01faa258a9ac8e828a8118e87aec15111f45f254660ad825c66c2c7785a075446bc0a09be9999c822f11afae3171e7702e6b9c730341b75fc155220ffb07018b52b6348fd5b164463897b86430c063ea40b81d9abd590ed7c52aa95c071fa5cb9d01cd1d2a21696e6c5a1d30f37c73a4b77e98959d0e3549f62c1fd71945ef86f543d6aab0d54ffb9aa513bf077e5a4ba788939235393748ed6372748f143d43e8b286bcca9d9f3a2bd39d75e0472995ee217ae3ffb20cc390dfa1494bd40e7f0fd8050467d49bcdb9f8dc325e8cdace82c1ebe2d56160c6ee769905dd923a119491c3cf2ce6236b6f7e03df508d7c0cf581e8d3ee4f6baa650e7596c011f181ce70f909bb4fa69c3881768321c08b593bd103bcd2760d3e85545576a627183176e0d419fb901ee042c8b2d7da84a433d9e71a4ca32c782c435d1de208891ab0b5ebaabe1690e0040e612473272d54ef7f99515fe0f3a34ba4d16fa36e8f9f52953677ccafd63120ad605563d6440787daf80ae6a7db874c3fb6d40b119a6f227920de109ac897d2cf8221fa813bc572877ef809856fcefaa861e384d5334fce8a1c5ec9ee27778b9f119120a3e8930d7461e16f2de712d84a58cefd5d9ae16577ae2b6584ee383f84175890b25853712a875a8b6d1a0b8678ca05d225b03839fab704ae1f31ff012713d1334baedb1d419a88f33251cca3cd7e6dd315d0f14f6dea720e0343bd7c7252cded63d4073e647d73b66787f2e5c68eb0e8c67b96790ac749533d4c4eca2442d80c412d339481d2f9bb791cf8ece34f17a05e36b7ecb956b4ee2a5986ad4aa8f2009440231e6e9085020062e60b3ad69e3edc71e06215df7ed2acd12641efbb9f01ccac8a71f51418ae80db635bb0382d6fa43f5f8abc25fa88b11cadd74c5c760463e97b994d162290019849a51e12390158d25f6d062146b3ce39eb6fc8e43d4f8ca710bdec425fb41cee381f186e0c428d762da911096b3c113ea12e7ca41d89a4c8eb7ac0413012758baab20968705e6e3689aeba18c763a1b80056d8b9eababd29dcfc29d49fe4dd5cb642bcb370083540e69aafdffd5a85383ab5bba6517b131e2dea1a2ac513481faca59c441bce51c952ff7d547b0c27f950ee02654ca70c88c990eb6ab5874d0d20337c024d9749dcb9553e4ae35c3c91c1d6cc2ee928e284725311b3cc723a8f2051313fbed9719d8661ef9c15b93998ae0bf935ac28adaee757e67cc743aa23ab830307311bfc057eaee512763f4417e565e233b1a3caacb0f6f8d55f297ff881c080b62f2e6f7dbda7e248035463f79af969b03b5d6a83c59f19f329ad8d8d52a4140e283606910758a14283646447045c3f167ac32c5c27098de6835800685b3b8b7ba31a0f230bc519cb246535845b8fe0e14132d46f7336cae19ad6b60c0286bf6feee19569d2ed70ef30f0459f2cb8e752f6e23e38cf7cd17c20994b9a5627e7862b238a01d32d5d1b38015fdc82bf3dc06e381c27d02b2dafa47d12acad9e0be48948da9b54cce73580d500d24960076689dc0238099269fa1d75b595bea6f38c2206f516ad3a7da18399544f7538c3e6f6381058eb8212da18534efca58ec5d8cd3b2c5b1c37c784c4d477aecc740d421a0f376fc82646a704e25f2eaa8e16db8ede5ade5f37cdbe8bb0d100cce34b42806ab0c447648860fe00dabf433688ecfdb8250bf7346250b9a23aee8f655610c520ebc3570c8ab2acb2a636e88ba2a1772b1a0ca4d08664a4f0f43eb899fca2ddf19b5dbfd95c1c973af0e0f844a0c0f8171b90389a0a39e9a13a221fec308a6177f1765121f1420dd0fb0c64f1ad0174f198fff40ea698269a92bf0ec1bbb981ed8f9e95b8b662f36cb4c65bce69c84a20bfa82456444bf0d258d8221649549aa4d67cc21ffee108a78d3ad81a4f9cb785943c1f5b4e52780bcd6c50a43568247045e3e41c4757ef471016d7cc8c2c17a08c518513c1a988d71bfd568e7e7b73f8909ad62a4fda3a10cde6aede68e8945cb5da94a71edb23bbe85078ac3abea91fc0d8a57721cc34645e2bb433f1276bf4786ba30a391a8e07f87b2dd183a592093f8d223e5909d113f0c1e6a570eca5902101da94171b70efd3ce50928d86a4b1026469cd51856393e713728d05a0199590784b7e78e86f2884c5f4e84746ccaf37520f15df8805104749853a866064e84116e3f0f0f929fa76d3ac0aad28924d0ddf2da774973d83deabc5cbc89316461b48e07fdfb306eb36a976ef4405f4d227bed6444fb153bc2613b5f2aa59bc562b2e0b5a437a36840ce586a60bf6126e5177086895a19cf476ddc5a9a7afc57f110ac685792ddbb12586e62a9411ed748a0c9fbd674d06d38dfcbf84df45e94ae9d7ecf917d6cc6b2583e18fb88b35ef2597952196774761f797e0f74dd2bf9337aa134abb91756a6c981ef381f359f234eb9df23a988dd48be1ac45370b52daf779c175a1f9be2feb32d8f6e512f891b907826452f4b4fdef0df0083b035f3f7a9621d2a4a561e4840d68ef4ab5768316c7458de431e4b1913d63c2ae8ccb3ff6b0ad96f2bd85b09aa9a9d86c308841fcd2114ed68c7b5b7530cdf8df35f2e166a80f6d70e697f7a813f43db01c3e87f7b5c9a22af46d0d24a515216cd5a82753236e23c0fe2394afa8067c367d81dfd4c92d5b8c7f6685660c7bc9563abb5ea3f7caf7df2753559be970d3f2960519edd40fd4f598205aca85e93c6d009244d158fd98e2fda1b8a49faf9a69947a77c999a02d69ddbf314da9e824764d16125bec7430892187f47b93006beec168d55b449673bf374c2fe3fda351d89bfae587e9cc95cf8f192c175bb9e5522cd5bad133019630cd245b55759728e5a7c657bf52347ffbf4a7c5f6957fce56ad6f7778fe9b12e802dbf1b9944316ac40de37ecf07e6e4ad33d8499c492276407b78c20c5c6a3e932201f2d10644059ac39cf42e561d35f19e2d115774afb6a5cdfe0a690ce4f31e5d2c9b354d725b04418a521d81874885e116a202cfbcf65777c25a010962f4d356e87b1039a3de6abef13c9ed8f34ccdf20d254490e84ec858638b13a7672f24254c91c2fb7d0394d99f3ea4e97808b6f0fe7a6a86756aad480f78eef300bdb7308dca067549097d44393e53d8d83881e72459c3c07bc41ca21ec6b9eef494a3772e4dcc7c8217cec678ffd404d0a1550f3c0cd47e4bcd3b1df39490a581d53e7a3124b48b01f9616dd26513268d5f19668c818fa2345bf7889ed64f7fbf7ce739be4e665e7875e56876df0e79c7bdca67024ca098f46adea2989a8e9a99655c0aaa6996a59e1b3a0f33884cc58fb41d8ce594529eb18df188e42b48af52fa4558a27f74ef3d0e2a256a90b653d77927fdc8de2cff5af076fd4cf8d3437965c5a7c57dd9ab1c0228a8ed1c85da017177ee6edf545c2e0be00ca3467363dda5caeba6a9569dec876162daaede1406a8402fc662826759ef262f38d48a249cc68f355ac74d016681b49c51cc24ff8dfa21815abd0b8cfe19160e8863ca41968ac778df04ae13049850b799780c0a69ab4b51cf76b46df40ecd3568af3c43e189d212636de95d319644657215042f3b1b2d8df338a8960b5216b32d261e9ecd2f9f38dbcca9a9b492b0b676aa6370f4efeb32a441996f918e80dc3d53fd9299272b0655265088d4bcf7aac35e377345900184ad35b4520509fac473d6def1da3c3f64c9d104de6447d81ebb4705629916a5436aa0c9f33d6fb3581e67472f5e6949037168a2f7bd8ee26e0152c2ad52e75201ba3af761966799170abb9b8eb1abc0c9ff3bc1aa48c7046019e279e276be3554939881acfcfdfa38b91d18781cf0f65944558e5cb4426993c63b8ba80edc9a12be09d18a6acdbe17b7acb37c8540405dae9174009f37f6666caa12e050656bac1cf8aa4143d57df96b224163c9c1b9b4c85b18d84bd3d0789c1bf547bb6a86f2e0a4da68c38f586f1834f6b9698324adb56922b63fbbcfd4a4ffa7e9f023255b341ed69fc948f19c667e10effa83509b4d64dc3deba71e6bbd05f3bff0e0cef96779172726e507c9ec7ebb290240c60c6477b35a794187fbb9fef7cabe86367a28bcb2d01e6dc20b2c83a0f9dcf7e26165b6348d5396e135104ae07263e7bfe780e03849106dd1f38f906c363fac0f508d4fa257351b4635daf31b7c69a9bb321fc5809468e3f3ad915bd9bc161cbf27a34467fe171fb1e712b4aa0bf91050c7ecc4b85949c132f3dc8c409de8a876d00be9fe02880777d3f54c3429fe2d31fca1740bbc86ecaa42dc0ecf5f95ff666f6ebebaca6d6841e85a852377bb735a6c845696ab5ea7151753d477c1de17027a10c93d78de7e0ba19439caae8701b0059febe6ef44222f21048b07c7505a717ffb06d0d45c8bcee1ada65bb21648d98a90768b945aa6f2eebb469e3297367c08767abdc12e792711ba8f90f09ecdb4a3d0d9741ab5d95bce907b8a048cabbdbee50709d616858c021e0b4840655172843de320481a05a14f0aaca50caaecfe963f489b8f3f34b8f181cf57e872a3ab72e4ec9792f201d8ed274c9cddd10001ac2c31cd7b9308ab6fe5cd56c51b1bee75d95e1c2668a2d18ec3ce8ff134897c627abb9547484d4d324fc3a2042c181fc1c0d5a0e9523131ad20f1af3398cec74a60d712eb2605fd31986a42506c25c279640c76cdb0099320d4b3521f2df91b76b0550f1db70622588f9e968d23e3d4531dcc1d6bae5a0f01a806e607426ffcfe97ed3a7127564b41588fd9522df2c985c2ab656f61d1205790c7565e1048f428d13e63721ce46b99678f83dace88f9e3f24b4319012564fa060aef83e570f413630fd010529c3157d392a901ad2fb80dadbd2ae29ce3480128c8919d4b5252c7d6a2810c02596899bb919d9bd2950e0e46783d6e8dece2e0ff70645a2c46c6dfeb82ff037f93c9fc30206cc54b1f2db4d87ee4e47ad580ea3e0fd405b8e50dc06ff7adfb5ec98e4573a91ec37266f9536be4c9d744f5a4bf4926ae99a7c24fdb6b8e1138d5ccd1ea71e3cd29362fc349002799463a72ed556e6fba3d3ab1c071c6bbdebb2dc415c2c30dbe3fa46d75de66dc5c58df208b3172ed6268cbf99646ccdc36a99618ee4d6afacf47ac7909004f04a84766b93dd0cfe7f436d9ef521d9396441df29a8b1eb5faf8e291b71aa66e0a3d904c450b471d1252c892f861c91ec34b008c2d9d087a4e90ab5f06850135c88d51550667bff676e25de185864795d864d141d407184b883e0196c568d0d2812822540082c07d32bc6f540100a8f5dff46635f21780a3bba318617ca8c5e7bb607ae115470a1458b20261a8e368f0b22549113852ec3aaddd7e69d45b0ad684987cc9daba72954f061972dbd786cbf28a35e0fe724bf61749077bfdf638b38f6e831d4e32fe5616b3df2c9a072136f2a731f906ff0463e45988353698845180854469045dcfd62a8721b298c4cd120b0efb7878757eb79b0e2d09c996846087e14eaeeb14cc978e79fe46b889569dd7011fa763fa2ca5a870d77db291c3930e2f573147d5f983e1770d90c7cbc4f6591c787d0a541e41fd2d90ca9ad12f3edaa968336810cf6591a527241d03cba8b9c79cafbb47d201aafea289fd4936f20aff4915af19d5c7aacd011d79b51bb2a0badf6f10fd7bcdfd8e817f99e0bdb8df3a66d3adf51aec54e5382c9da59c1df2e424d3c389defd604e640c160d12704ffcc50edaf2bb2e19e9fb9ca9408b7d80082e6995277ab296a588070dfc1a5b4ac9e66241092ab6e924c36e19670e14d7c5d681cae8c8a33e05410ae61b9987f770ad1f778a242fc7a6c18c34da81380cb472deaea2b2897774e5f1ed5b6e3fb941185f01658c04e1405ac00c7ec5e0fc205a2b75c63571b563bc6826097b3bc2cd96cfb07e80069d75f90820fbd5206039b4546711dc7d259101551ef8d342f162765948217bd5e30e88772529170bdad631ef066499356c6cc135ade5c11093a144d22bfdc2446469a4274f979cb0cf286b4e0b827f75f7cf7ee314ebea3c675a99f0ac677dec06f8639e4e84f96fa29966729081a25d2916411f0244108671708daeb728821bd92734f62a52528bcd15613ba07935daf81952126372f5ce9bf12f7263309c443e37f95f6cfe0872989c010dda0f4b18ece1a03fd59ee3cb0ace95fd262f2fb530f143bcb09006f1fb883c6065a8fb0d7c0b995e03be0f3b807ab74635e046b147dbb419b63ee82911ba846e694ff8dee1337fc39b1b3c5986af3ed75757a2ef18f9640c29c7e997d4c723571c74a275b15dd3e1950d90e75c3b86d5f5abaa686769c59eb353a0af9796b58c8409c4a1532832bd2492461cb3fb4e9ba296a487fde39be82cf63567d54c4eb4b6cbcd52f75dbc893e0a8bf7c98e6bd9bebca707da5e3ceeba127567e6b7c9ce44462b6c6271326a63c2a26222c6eff358a3ccb08e4059caad199464c2f219133dc57d3d26736556f631989df7244c17aa19de3eda244d8fd86638912a983503f70763461c8ea509cb5c9d1f179acfe7867a099af7f5be41d5afb23c0fcbc8d061f046dc171e554c6191cdb91367e2ee9a255813dfbb7950b821899a469d84aa2a114edecb6cf2c93d6af9a5261faf6a2bbd078babe0963a3ee4219574c2ae4b0a50fb73d6de890143e3ddb77ca47d715982821ee219240066a278b0178b4f04b9b7e9690ef8fd533c1107173b8ab5c8f4930a6e32492f385f30b0d228410bf4992ef32d4435fb127f887632d8ef5f96502ecec14be8004374de90dc775082577cac9902c0a313186f1d1c9855729216ead6280bd142a267eb7d96435fbbfc1bde04aa2253be5f34582cef42af6fa2510bf5308bf121cf393dd46e31fa2f15ccdf1b66ba7e824ae89c6a4545260518e17d07913d2db192dddddbdb4ed6e03b097a6f32a73efce79785895fa056842f7f4c112022dca7a3e975630572ff938359335669367e9997361d7542921d8ae462052b5da6dfa8ed0b1f089c891aaa8691b8d4a94552683cbeb219c0fc2f7a9e61312defaf8cd838c56418b3971ac4d39d084796fe7fc6f8dae2c8dff5cdd545e8912c8e3fe853543788cc0ae0b4b1b55df826d83671edf292556c2b74a8d7645ed3a9861fa5ac459219ff03ee5fec88e180811a86d63b52f4a5c596bded7f303d6240a380cda37dd1024e8efd28ed3f565790e1e08dd742b8e68a5d8a076626e7071299e4e9aa637ddde40c6406da45151cf902c1675d88a5743cb7f0aa307923c550c71380bd040b751d5ba320cba0a0dee414967e66c78d567b6193d265fe0f7a1cde38cae3225ff78703a591872e5ee8a444e1f1a7370985d14874cafad081fd75dc6d8d2adf44b1f9849dbfaf37fe325d727223f79c8b3fe3f504f9885667db6112882f64cbb46251c71d57416679d4d2edc3e3442fdbaaa6afe15debd384f5ea144caa036b30952cc6f589d888efe65b7f960811ea2a130048045fcad1c5a1c834a9d3c35426cfdf22aaf939d871daa13c2708a1fa78f8efd02a3e6a81dcf1351ea782654c382075b05a670b180c8d32688d6d142cc229a8e6c08aeccb6ab8b5054cca09712664a5619c1a8e9b686e4d052a27ad406a83036aa8829e82b4e242e4f84efcb1c444feaa7f173d701d91bcf46abc818acb5db8a3566f756416ab59df77a1a6447006150de9263471f39dd1623ba08835f17b6bb2fd87ae8a0e4c329c8738ebd2e655be038dd74357cccf1953e252616517355ea340a8375c5da09b8f900a9d7c4208783c11c09cddc6a1d14558e888249d93eb84e3e89f278e714c6b5b59c199dd35c943b80a0ba64bbd7beb4fa4aacfd28e1512e4cba0b2240309598ff14f92f5fcfb0ced7fb6eadc9ad9a6825ab0b609a0e4e483f7b8824b71b7a60f9ed33b7dd96a7640adf73fdf50030334b7672214a088f4ece38f5a3c73ff619a41cf28e99824ce9499f3b22bad4bdd708f6bcaf529f1aa04f7e93f58fad063660f6c760c53580ede15ec269d68e5547ec3558d22af432d67cfe7b341fec5588ed34f6cf404fe254e176aaf10ed10c86c9b5bb414cc0388c404b1f3e1a08e548b41b07d66bbefb7c19ab16fd9dd829e013136eec3b54107c2d2bb802694eb459fac643a13037158c0fb8fedd628066f37f75abd2590c2f6f60ee788b876358771156091ebab2a3070fb8dcf58b55779cb047e5596eee53e3f42c118a075af9c22f0426ddd1e443c815d6344291549e2f1972ba609c37a5e08b575a3f4d3b115af3d639343989d7530b1236358c1034ca63a6f43db6e8ae304847b26a04d1345fc4d6ec1b87d8cadeb091ce3d96f6404fb484ed5ef6d2d6a114b1ece175c2f731f5312e086be91f9d63e684a852861b09f245472f13c0199a75b7715634306710c868162d48d1334298702c1b8995ca31ce6404d4c8a34d18f78b26496b9a319e21aca3b5f0721087b0f3eb7d846db8aad817b4d9acc77d36ed99034e36f29280e2975185df4eaaee6335374bc9197c9867e47eaa1dc806819a5c462749e92973d8a995df844d1c6cdfecfb49635242244264e7f458d6bf8a3684114f482d16a9825d2895095f7c3ad4dbd5017844fb9cdb89ac06a6fe264744106f8628b61fef4531bd9492a481721fdfbefaa83504105a7c7e36eed77269d0584c116bad2ae73a0df9e491f25717b6816efe8277b9080308beea896e8d109ac38889c8109e3ef2f2ff30d4df22de0b6b69dae476aaa0804983b6b5f61d4b92761961c0739d3f50ee0deec17037ac5ae42b46ca7862c96d1170b4cd4c5768acab5d5f4dd9802fbb2413382bc7cf52c1a04d88529852a1c16e69538f7a03c2ebc20da06914455abe5fd1f7a19b4a99cc493cf20655f6ce5d7aed85b7f917cd78739500cea56b1ba2df1243dcdef1cfe0735ec0a559a5f60bd966311023c3bc6873435d688056268c2ca1d30b3a6c537865d845f56277a7abff5f4cd5981fb32d2ad72583e0d9086e283060841232b262390b9d5baf0404a227a319f1836ee477f1e618686d68e44e7a0af3b0cfb0b3c035914a2ffa44ede2c526fcccacf1d77273d102c230e23e0fdee9789c7818267f63ce7d35b4a55360c5a7dd750c586dacc036719637917f8861ba2792ac892eaf4deaa3faec133d33297ab0b2871d1636146bfa31ac8243479c26a1ea9ab9e2159063d47ea343a24976dfba008f9bdf849396caadaf938cc2c837bf50fe74dbacb7e209606a3a9b38c472f8c0b0f57d733be0fb3ad04536c779f61a01a74c31cdd0aebe94f1439596ae10d0c83e55c9a36b73d4cd6f3a918a10dc1afa7b83cdd3e70a7fc4e8399171936dda2dec832d2344a6cff3cfb9436aeac7543925a9fbbbbac6ce93c9ec92428ee5b35682d8adad452a43156b6ebfdf00208096a2ebed784a2ece0152f692628cede822b558b1e7d48beb1d15baa4882167a19029acbaaba555440fc045bc42aafe87f8b44f089b43cde13a124eec390bf98b6e79bb589d798b37e9ae26139f3fb50c8420caf0bc7fb2dfc135f31ec3887661b5399cbca9dfa1d428a8b7ab52cadbd8bbb870836831f2b6b81bc6a7798525c323d7f70221f4f7e037d5578239d2180d1fcfb11d885a82eac64e760e9a4aa5d247f8dae61ea7c07c58e691753a7cf8259ac662392629516a068d3245d946f6c10ea54cf19dc3fc8bdd94a735f1e4ad36880a52e9fbf23347327e525f9b372ca6428aae749b6efe3677779bf7e87a46f2deecccf2103f15c7955ee80407101b76dbc96a4055c771e22388566d0c56090a7810eb2512add89020f50a7142f7cca6a98a7968aec868f883e297c9c8ba0e3689add294e6dea790af4169f955f129d0fdcd0bcac2bbf878decac52366af37419d920d08e54c4dad4ac68ac34005b13bd8c39e09dbc97f5421055487a969bed1007126a658c9667f724532f31f3a73b9f486c148281dab3bbf54c39a0dc893c7805ee31133be2e8f101edcb2493383b825f74dda17983984d4c56f517c537a0a43b56d86369332725b55467e56282f6a0a137e3ca8566b8f688218d4d99d5a11ec4bea06be441d3bb836e529f25d8c316886b599d3cb875cfcc003f27d37288d747295403cc9607a342d0541386cff27c53ed1dae02390fca4c0b19870ef97bc72c98dfa85cf28c960503858d0270c8d73388d4a1f73af111a9b1f76796cb2649c9c44d9be26b98635acd7d29937d40402aac2bfb69962995dd2da491a7d5050f4947c7cf620df27682ef486d01629042b88eba3bf130e20233b3df800d97483dd83b1dcef3e0f9da54bff4c440f2bc52340826a375c07f267b0d0c8b13fb6cdd941ffdd42ea50d16cf643b61b717f5a7edd9dd3101a3eb707a13292c0afb6e98ac1bde2029ab004386d355275b347bdc83e6b261ac00db5d8d4929c5caa394e4db683e234a64f5a3a51574c21c35433e5549df1e9f7e144222cab5eead0d89da1ca3f6a92ebb53772d0daf2e59c4764a4a02bd3cd932f438a44d750047d0f7f883e61018e18eed7b21959b7b42beea65e758f416c5135f14ac315b8858634dd442b2d6b89eb9a6ffdd25281dd1ac320db8231a90372271c787e17f56f1be7544619b46c53ce29d11a719f06c7b3222fa832bae8061c7d2d49e40d9e5ec3cfdc4cc2ae3d11b29c39f375fe5e7113a6d7679e503b6c2410d2bdcf1e4e4e213caa113021cc2d362cc75a62e5082296d04d14ad133218288150c6d12fdba02405d9590d2243f2f9f77b750b0a0f8900c78f3744914f61a540e61af429bd0f973f1913b30dcd481e64e7c63af7d484ab6b02ef4e5aae957a152f2a3caa2221d9e7371d1dd883fcbbe969edd4fa1aa05c09527e577c94fb2ecc4de89e5df22a516618bfbc843f48bb1a491b1a223e450e4148d6f63cfb576e56bfd5f6ed0a386b59f4c0a00fb7e51c79ba67caecacb6946f2f31f3b3d59663c0501170fec7361ea46f09cbc5597418e899e12fb7bbdd6ae9cc6d85e6ebde853a4c49cd69c7322b661885c04d4e7abdbe5f6f679d3c8c469d13a7ec5ca617c1fe383c552b24616366c884a550bea7c9f0d5291ae970e7436ddca851b9cfc30d5393a20ee635158576afdc6848313429d69628bfa5c5b813149e9d1752c55eb0a9c6e49be3c35e3a3cad78646b9521ba4c3a6bd018be5b978d952b740745058d6ac8ee51eb20c22d82adbd08b052c11f1b9b9bda507d0e38f16208ddbf0f5daea384b433b11a4faa374a4bd3d1369f1197d4c883189ca60bd11a0666b95a3c0e5d94c0d0f744ef3e976fdf20fe03d942bb93d76db2fb6b877ccb53c76d7ba9d799db42f844a36bea2a2c2ac926bf55aee40b673bc2705c3f4e30417967a6d78a835112fe317665f7fc959e7059dcd5bdd8a20e2c1cc876220c88b51e26deb6c7eaecae67ac25acca4bd312de1d20b0fba0060f6640fd150682b81e90e0ca8098bd529937f25d8cb80345998ea98cfb1c27372da6e16cd57193a31553f230ab92465401739d06c18b475ebdc1d63370454e09c0fe2b33dd0d3bd39f85acf885667a84413ab77633b2ccc875821625f6257e805835c53d2278ccb587446ab5c81382e53b8e8f3a2d9c08b2f82ec7b3b739336796a760d684a5fc8ecab48c3f37f71ed6a85f2118d4bd43fdfca367e99f79db7905eaf30b936774219cd67d0ace4eb08ee5c126ecf8f25cd8187c3a0fa98b2426ffb93e5a03e401e4e0022b22b99ab412a9d8456846c949e791659326539b38fe4927fb67a4d9569a5041dfc636eb26138fc6aa855ca1002dbe0bdb57864cdbeaceb44f34199ff169657bd7f707b5248712bc63bd848ad25ec8e4ca9dc37003d84fb146aa17274be04a5670a98da330489759f59a38e3ffc5ce9ee629473e1b416722b1270baa181d160c5bbf43804a24a1b7fd9e7dae5b4362befa707c1e0b1c4d7a75664eb758fac7eec2a31390f21e05340cf6f82d23621a810f3e4e852c92b0433a9fd15ae0a5d01d15dcddcbeafc0bf21e92b5b9c5d191aae266dbc8ef7b5e4f18afc54bc3b729f6f422fa7e53200854c472fb6c5b4f6c1bb455d64350c0b9b248e16f7e88c8be002744b72ec6d379844d47b3c3b6fbaffd26f1711ca1f94b8bf17b8a41f63f247098d5c34706dfba7ff912cfacf3a3e5ea0b612d7fd7915aea3df5c77c7691eaa31981debc699c1353eddb3534150f3266de507ab80613eb5f259166a250ce1da3a68d0ce15a6955c7c7c5e037f64a79c8751821f6c6b19f02113b04be918937418812c56ff8a650c20ee1c61d11d211e4c2a9cf449acd834f6dd77e90e287bd135a158e1bee5b3389c3061c05826400854fb4dc17f58f77ae5d4d86545a5ecbb62e96dade33833e2c318838c2fd729f2790fdc9bcb30536ad3b92dcaa66f2d9105a76371af591d9d06fa388093fed7792cb7ec0f2127fd0ac13c275ea1360306c544913f4d4bff445925da7ed9ecdcf8df78e4abed64551e3bc3c13cb51011e6bc25d1163a7cde6ee59ce98716cebe535aab1b32b97caf93b1903075b8699c5b6ae4bc6a91b6bba2cde55ee25caa74df7e14869c7f4af10d1b13d7a9a8bbce0484596feedd6b0a8f002c01dd3a0b94d2636bba1cc58b9f8bff7f52303788560a95f6f544c464e0a47e9e35a5047024e6d386755265a52efe041c06695f0d29da4ef39d544339e364b71eac0e259f3944af94b2472a498ca2366f6a96d4a60e4383d057f7ef99be8749bd211d25f6289296a18f9909fe56d1ab72c93c509554516bba37636f264857eb86800f62d8f82a68a21f045727dad7a0ca602f1bd455dc1cbad8ec4e481addd146d73608644fe5538546abf571c4ce3a77d4812c46734d5c3686ce2e075fc6727f30064142292a902adba0878581207e1ba52641cd09da5c396b1cc11d2f49441b15e556834b1d328c829cac03a489632f45d13e6cb9989fb599a83f1e305d05e289c3cd577fd2ef543c0da0865d83e49bc57c00d713abbebe0f71ffa1a089c0db4c429362db49fab6343dbe9c166676bc8822197e7e84af76383ade27c379dc077549f59a8a77c3a2bb430ac48d356981ddb5de9a965e39d5882b1fcb4e68a943b962b9838984a022e42c161cd768d4c66beab51024254fdfbd6f612bfdda02d559e72aecd42a075cc655434a4a44a06080cbc796a350c83c49219863ae16de306f352bcf70c510d3cf9b01f33b30527a5ffa29c1edf81c969b60e013b81ce141ac0587554da22db38f2e5b5bfd137d216ba7b5a281e5a85360f0058f2e9f9e0c8b919fd5dadcbdccf6d48d8ed442bed5e0197afe611ac84c738d17ea35836ddbe12608d2fe97bfb32dfe659e9209fa6306cf802b7412ac24578422c0c1702960393e2b0cebafccc9ff98c5ae14e1220bf2fc09a4164c5a5d913790a0159680327da0c017238e0db4e7e2ffb36ce093b68c073d58e3a96ba082a922ec772469d85cf01e34e038aafeeec812dad72cdf18b8173f3b64cb35d519f4e407d8260b0a36958609d49f37dc00dce3f747c4267e82d1a72085dd7322ecd7041dc84e922ce6dd41a74d7e87207c3d2f012cbc9219a7214e8277d1df1175e06d4e82b498652e23a863bb88d796b9b607cb7a1de8f2650c324b56585188cff53a276f51bf0dce1ac1e6e2f44daa04b5523f02698e5be80982a3dcb6478d154a97a58fac0c5f1fee5ca1d48aff2d8e691d7bc3547193c4dddada02742b478d77a50b1f47a12a14168f9310768e946115632c66306d3142fe6891cb5c64ddb78767ad41d06bc8e9c3947015d941aad286193f39eb79346e5e214f4d71bb036437248869ff8fda58ee8175343f63684838ff62d7da50d734211adfcfe96e1bdbdec9b441a5b2c7d7e08974470016db1b197dc906e35cae8fd5d3fcb60751b8d9d2c01401eba82fdf4e828c7c880bdf7b6c6bfc159ab23030fc725e531bec87ce8fc4f90f1edd54fb63487da49473de65fe2a3ae5f1fa3de8e874dae9a20b8634dcc5be253c027b4062d790bea3836925b48acc772a88053245fdcb0e1a622f193546a8dbf34fe7b9f848a525b5b90dea41d2db2f823a7062853ee4db0ec315fd7da58af7b9091a3d90ad8ade1a31b7843b491866dc9dda7726be4ddf88ddae08520f6a8638a5d20d1f5f6a722825c6f970713d4899217e1913ac3721d2e795925c28d773003efe2819a22c03d6fba0a628d75e5e5dce75e268db6820ef237ce9829573323b5760ddace0e79523c682302fa149808b8633508cee7ba06621590d5e5c6c21a44a818f77522b002fa758217c0f9cfd76c93a231ef2d324563fed13cfdd5b9b3793be006541989e462b5d683f91dd96b8c0e2654e7e8eeac6dae27501a3e55c110f6a666e4444d3b91f7137271f59d6b122a331e8bde4d2e261812cb67b6fb288bc2e57972d8dd0c1bd16b40246f13a41d88e84b64ab6c0db394e841e9b59119d2b1b26d6681184594fe054e68794f06199830d50845ef401d48159bb403cd13cd0564d020e5b57f59a5d7115ef0a8ed374506a95fec750a11a73ddaedab71850b17ff80e93f2ad2da492158ae097caed463c510727bd6a51ba541d7e3ded450d9c2ac28bf2f7aec4c9091848f94d6426d7ee5c43ea1a7193d27c3c225c44bbce15bed45d6fe67374a10fdab2f80c3f968f9c59018e2b62e2f6b5011fa4ea91268ec29490403d8f96a9d3a6a9ceb971e302c38f41c546dfc4975eddfb54a06fa9867ca9ea63a974ac694904e1d90c651358e2fd976b498898e4d401e9985f12f486c832ecbd971d4c360d055009da68fd75e70163d4872d18087b602c7fb2b386ecb94064448122a9c032bd73fcff8019597567db5a8e4cbd3718cf732554732f0c0fad5606e9cb571d7a0db7265b9e27815d132b6beaef6f209bb6ee897d6dac9d380768fb89bffe8c9d6f0ffd9f0719ac5ea135dc58c77fccbafa46de00de031ae8a9272406f28111a799b8c8654bd7d35c42a596839f152538b387bca7673f0cab78df08ea7461499d117291e9a9bb9d3ede1eb238c8578c5fdb54c7aa1d513caf6a43c2a9745e8145d54c172142deb0d11495e52cef69a8de2124575f71febc6bfbd15646ab4d8b8ab230cd63f219ad6c06524a25e3963f6a57b37ac40911a7f05866edf68580b5765b95aba9e409927e91d22f0f4847dcd3a0ea1b554a3483586b5e79292fb5c15c469960d41f5665e52269baadd50385dc73be7f4e82684a8b42c92b549cb0ac70c39e97c2677193613a6044be41554fbc9c4f9dc702e896bb90af817df6844f53f63243b5e3ce2f934ed36f93de79de729bc4f28d98be31a8f9e434c08a36711e339effc8c48f0f5461b9ff89c7e2d00f81977a4bcdecbefcd10565580389f8b1860a6dcc203bbaec5adbc70b600f9d7a272663264e1ed783397f01c92092b5ca540497c5de74697af9d2dcb3c3a9210c0d1305c2aa86974b3724b5bddc17d4699d3d19e58a0f6300edd6691d19bc7d4c30fd34cfdfff52fb58739ff552a405a613674f02e9603b3d73c5b2fa0a68128e5fcee3c9be2ec30d3a947ebcb4aa7648c2da9ce1b29da7ab358dc9713fb16417d6e84c234ffd8c8ce0b1366c45220bace2f0cbd7ea33c4ba02fac3eea0e88ef06557f398cd66caed024f6302958038064834b9c67d2b0c0733d667f2e07ab25628d4520f15336b61884783c61042b6e30dbacc98a436772fe45f0ba2807db3415d2822d1fe083671b0b19411fa030aa3fb69109d9c8372cf24224cd6d52f83dd0f6ae1756268653cd5b121140a5b65c54d9d9f8bb197f581e2807a707083e3d8fb4726daaae59abf19fb35e12b8ea94aa6dbf5e5139ed82f956d102cdeb2ec1d0779bcafd0fde27dae9a50eb0a5bac345c8869f6886ab3501638871e295a1161f47349125ef9581d31ddd9df1000e310c6176881c83e187245468cd85919da3734d9bede994de28c628b7b2eb6b59f25506e3d91a626d99eca57d943f58631f7c73cfa350ddc0d4d67bcbab608646c8f52e57bd3226f68a6e82b8d91eced5beabde88783ded2bdb8aa3ea6245ff5a535c2cc3c77f83006468971694b64bf632af45c4d9b4fe05e91e4c2028c27395b7185d764aa4a580a7422053cedbc25089d4e4e6af677d120f74cd0975afed126ceaa2e9027631277c906f6aef85f2855a8be8d1a5e667560518be4156443cbae41946a694298cde320d1fe34bf3738ce46036bb517f9c881b406dfa523a4ca5a650b5ee61350c8c267ba215339f6638992fa4de31dc652718424476e5ef396d9a217cf535578422928d9fbbef7d4158fb86f7a3a7fe4cf4f1cc06d70790d24013f3f328b04e0c25c752bc260ec5ddcc1841a621ea0f902ed8712eadd36375eb3422e506ab0c3b5b0b5fda3afa3a8d454f26c8444e639ac61d4cd2fca571057204bb7abf19645ed65044e408d30f50475df334df6b0af0107151d0cd86b8c78391e9d78ba2a5090983b2a15b9c8439f159eecddf491bb67c5164c7ce28bd1388496411f12f319f77fecec543dbe3bffab4d8a23171aca5489043bd5419e39581cf2dafd02e02464daa2a4182a843c783a474e8fcb4f25a5c2b4bd31729bb371ca2e68f5e265a4ac45b3acc93241d19ac40d441106b4a12be86a305ea81a1845232921d82ca724d9a5ed660e3bfdc4c85d4c726710d47998b099269fd997dd85e81301ca08a9890f35dd892e2913ba19776c087b9bb4926fdaf66bba1934fe6ed259d6ef899c9b120201c9bab2c58d51adc976f63f139229c98f69656c625cb9b2d3d6336820b6a53f0cf96fee8fb291fc16fa219df428f2b57612a7c03d9bf545cedbff4f7c1de89fa0a42e6b032f9f04ae68cbc3f9fd161bfdb03df3464d0b5b5452da9ed619597aeabf064a4bb1c2d71f2e5e458ede9cdcbff15244c1eb712e069f0ad96a6586ac2542e6018dd0e22a5f8818120e84343b188d67951ebfbf06a423b6f032947fe8c7248ca026e8bfde00efa66d09ec79da1bf9c1fd1984b68681620070280200e5276ce7f43b528f833c7ae82e3ef1cf3684fa09d5834ca4d03ad7ade3061cd61b45a8125db026d55c094e7ca108ca38f80679c4b5932175376b9c3e3c2f6fdc45d3f0f72ddfeca8e3a88524f2e4c7c7a6760d70206526828c8184a03bf011a574c80c502c65a21f1100eee5e3af2cf1532c0c02b1286af3b1804a710bac6b1e1327df050e15e2bf7da133b160676b15ca8f66308de03419e322021fc0b096fedd8b993f6167a4460acf4f20026b3aea40bc452af3622797b98365f7488922167d166bd02c109d3ca3c93f644f341f66ff9a5b789b43cc3213df1f49e5f16c35e615e21e443f349a24b104aa39f309e92dc8754ea420e093d2db203c6ecf2463321b4190b493878345bcaac1a3d67a33915e17f11083cdd58c8c7e8923015defa19b7727aa72d86ba581e95f437a1bf74b1b31c96472fdd3d0adae0ffc429fcf4894f3292563bb9da80c95db64980c9ebacce0f58c43b1b2fb0cc929777e91c8a4417949c401f5429384385c2284619a41a5121ca3b70cdadd59d1304dabb9d9568f67b7bc15c42e3c6df23e75d86036f1c0c616fc9b415b0c70a0b44848c27641e75dbae6ea87ea6ec6e14106293c0f9d53ca8b2e596c0781e3db2a9375de5f45677927dc618f13476c254c35a9617f9b317e88b03e1fcb7ed01276b037427fea4d317cceacf7986cae50a877ea044cb4fb46e414d6da71c66427c7f054893bb1041ecbadc79c8824d9dabd217f05ea29096349819e4d955ec270f60ddc0cfd7e2d2ac0e57f6a1b43c7980b032ed17ae656a731dce27a04bfda8f63d3b41b1426a7b96c911623d1b8a3a9050893a904d36fa58686dd35ea5f7bb6de2363de7d7f3c3351ed6f5b09ba6908995047ad49022e324957a6711f98d7386d11114f21d4515bdbcf6f2a7a4f983d59d854839674c4db339fe8adeb99a7f236e5ec9ff66e0c0214d8abc9c4dd0da84540ed1dc98417498d74f6b103244cccf4f676b5992ab01c2081d1136ac82bebe6265b087c9a0f024f5eb14bd47b914578e59d9ef239e8161f5a847e6019feb166307069d8b235e9c46f5ffe2caf4b22f2d244b3428a2b902137ffe699927befe45e9adba79fd93c925299ac221e06e6e9d55be71b6f570083de898846f66bd3443fa6f49fb432103f19a9149be2ad8271812d6cfb3783b87ad19a05edb44df988013636ddc2d0a3df3dc06519cf62fb59bf53fb601285a96667e3a865eea24d563310ebcc7db744de0696a7aedbb75ddcee5e1ad08a825101b91b629bbe688166096e73be65a91e7aa4ea1b691d5225299334d17d82ae8bdaa33a2de6d7717899c10617e7a24963387e14d45148727987ae41e8f3c3cebedf622000f4cbb41a9a6008cbe4fa92632ee4e47e2c0939e969764d33b738d221fcd0a1a18c666d3ae0b6efb5432c9f7a81f2c6651ae769785a31086718ddb348af910dfa66cce55396588c47c31f83ab784be91e842167299447d2e6e6d7dedb8b7960a4dd71739aba703a134e7ff76e5b225e1c41417bd560f913564b1cd82cadbb464f84c155e672c8c735e1ebe45a849fad35fd52151fbc9f51ab322852fd04ed31c10d75d213533ab4732433dc37a0538b623054446e03b4d1435738842e9ac19f4db2b6697e48742e1929c4af2c6d5eee44795a0e1beb34e206954062b9d48f5b7e2a1a5a668788b2a1eaf654ed25fc69255edc19818b4dcf20be03d082fa8de99ddd16fd199f9091624e0c3df020891ab80e8f2d02be8ed9fb1007e6f2a41134aea9f7cbd0e9c1af0f503e70ff1e2c4dfd5c505da645e45acdf88ba84f4d132d15b301923fab0c3d0b8be162b765051db78d999b72f00fd52bb3824bad0b774b0a9daecf37672c5b014e9780a659ef55bc02e406c98b520075c1f739b86edfa1803f3ac285dde7b579724d02bbc75cd4db6c55348d87515b168af31318c9c33cf4355550c23804cfc11b8a2f5c2a50009293a72f68b6a389c5532a55138807e6754fe49c28a3d9145ad5da64c85583ffd65f3b66217e274fdbee08a91ec3c7ad4eafa6abd08af2341ebeace43799bb814f391cb1e1d89842901e4c9094c24166f16d92cdf9d56a21455a0fe415efcb0c83ba53e44a8a6703cb91844c8c243d9d4a5630f639e3bb9ad3d71fc2144fea1830683ba9883e2bce76830f8113b9e823419bc0dba0ebadb86a78c598ed716400c3e8f9cd5e82ebb8721f87558e7d1e9a8f225ece78717c2c81e7fbf7d0a1e68f9e27b0b911c573c35be9b7a3d97cdc27d1523df924d37061193f37bf033d56bee635893b2cab6b805322414cbefcfbe6a9f20b959e6b81c2187c9c82c61e425db1560309414329eff8169d014c1bdf67b1ff888e771e403211015e79e0f6ccc8721896ae1db351c32c7b6b756b62a922fe6ba9724a0670f819b9e53db35ddae59b246fbfdcdb0dedb0b0921ab976df5d9fbe5b24c714e33ea7dbd2f220b1e203242b774fea0ebfb206708155a37b13e52c3e9d93b7f14e5800f7390abcf95d5cc8e694facd060608043ebd3b768295df310b2be09f936f65d4e83f77e84c06ab7a3ee07a502efc97ff44be5a6742f548dc0642093a2cc2eacee4d1666a29644aa0220b822c809ca47e7ef858a6acb5c7f04f87a319e7c2f84ac8c21c2bc10d1d90cb8fd477f42c2039b0bb8c764b4051d2fcb88db3c572daedaff6b57e0a147c36f044dd0e4101719282d4fa863bc64edd495147665b397f11a523d4adb134f210ab2b4a64ef7002f45778a4e7d16398b9d37d572aba798d49c13d4064b54d8ab5297cc99d9f2559a68105ef12648094b9531de5b1f7796f86dc43730911c584743471a2288570aa1853f9275cc012f6471c0ebac3fdf622829957566df1c497fa6dde2cc2ed79222e376aa42397d280f17722a7297315bc831162f91703959a54b598e35fcf73eb01bf0156d00dea013866028d38cda6a7ac561b16945d66fcd4e4aef442982c2b51d231d0e5702ed7b3d3670e1e18006a11c1d3b3663dfbd3b922ede709d23edbe8d8c8b527640d0c80f620c75b07a9b71e71aae217f5fb219ca60d47f7a47fa089d41fddb629e7a62bc6f2b43339eaae087f0e05e58007713f14ae3aa4ff5f98e671a7c7102f03124a98d8d6922f009d9eba525726468cc69dde2638f94c12793d336e46403cab9d579d87e6eb4b4356f8655c0873ff37555950ceef6e1b777daeb34d8c28de508a40f2da0b4f30f1def8d9dda626153244fa344ed72cefe5d6af7aaa2238e5c20f9a63380b383d2f78c8ed66d5bcb82d131a952d316c10c711e3b5d6fdee887f5ab8093a7cada63f2527b63e1cd808976370bb6d64af4707fadfc29b05af18b1513d83ca17584f9652db5177ddd568d34b252692c33e1b6dd815a2faca2eb1e0152aa18bb9efc67944ce7d8864abe437d69a5592b709bd4226709784f199b3b2c0d732a6d10a4e0afffaad632ee05363731e521e404240d2dcca55390ddab1a6cea51046ce8f7a18e19ed1e6ee64f2e8e25afcd6bc7fd5f511390947dab01ef25643e4c330e772fefca672c437e8158efbd9b59415cb677ec35b335dc15b602fdc6cc3b5df6f554c7067bbaa0de0e5fec8f75b44df2b213b22a0ccd6d94246c8c1662142dc827cdef7ebbd974a4544bd6521eda156348a4d9fd428cf761e59fbcbae48159886cee511f62071d0ecb4f0ad5d12eee59880fe21b72dc9352fdf22cfc0c7843885186ca625a83b0b78f734b49c8089fa7ca2872be8b6ee10523e9e511fecf87c3159b67d91c396fae9d837ae44f4606c97e8ee88c0e2d149bd51e4fc2d524ee0399666f2a5acbf5ad225c65305370379f5b7e58e8e419c8702f445c838a59b8c86184e387ec9d99943f5bb3e3b8a83402db39366f7fb5f5c272a3dd9f1e483d17e43ac7322f02ad7fdf7838f4fddf20591d25fa2736ea3d4b1065413a79b118f0384ebb203e8946a990ec4846c1f136ae9ff776af917df8781d67da8b0c8dca1ae63bbd26392571fe5076784a001c34b9ac5e7b1975e2b50e418b0fa603203d5b486800a039d5945fb8bcdeb7e895063ca337d62f3316929374c31dda3b2af2d4f37bdc7d57ad7c0b53a466618e242d5e920c3df33337bb7809815565b96b11be82a19eb55061bfe041092e9e5e9d9bac261d0b12d45c0d6a7fb91c353f8c5989a74a513d5e74ce0e1f9587d1e0491c6a2ebaeafb55f4f810f9449a6f056316b2a7983b2e815bd165e61f0d9a02bd4203be233311fc54cfc5cf48fedcdbdd62c05afb35a22b081ea8a9e5eb427b1d6ee76a8f1e27599e55804dbb1fb441527c7d621dfc8e75644bf732ba8a90b0dee2b298fdd570ea4f20b64be34809673f67c49507d6e57792b2ef7516b4b399407187a7699ae863c82e3353d6808aad59ca68361df63dc88a62fc2ae979105117df1f6106c4f15c41feee662334b6e8a74b6f5fc2b93b4f895754a1e593c445acd5666c206b228126f63996ebc7d0e94b86fd4581c778a612ce70cc4694ae12740f1e36096d94b067d65a422275d083144f8ab8dce67f1dbd521e378b8aefb4a7519c9b4944f4beff17ebd16b2b0e17863a2048fb26b9faf3bffeb7811619454d15324b8ccced4db643ccd77cc8d12688fb311d3b94fea65148714e4225594e7eafdda431efe2e835c803421101b4b662195768d165af454cbf229ae9280ff8f60ea2b62b9dbbf824ba8e39894e078898414db21fad1f526315d07515ac1e74f25f1116cca509346356c09f6474a8bc1823fcbcea518a361165ee51d5076aafffee1763755df31d0a363e826a55b4d6540d72fbeb106592deca75d29c55351ac26a270d5676f061ab92715141e7789972e0e742a705ee038a95f0f5bbfade13189eb4250d73aec2c80529bf47987ba669dff7b0e6e6c702e93f03724c2042d4dd11f017aee0728865bf6e92372b81496efb7cc03397337dd5d04f2c7ba6bf6cd457420d997782899c37c1ef82728ddcc610b106f9749e95d3f10ddac37d979757cd954f9462901ca2ecece278c7c88652d08712ba6792d7b54899e312cdc167270d2e744f63dea06dc435f5bbafd7abebe55c5c0076fe2203dbd5332ce73ea03b85e52c2f4f4c82e8fa1e6761c1b02868c31940ef624d2e5343c37b9649baf7afd50f29a6fad7b4686e6f44fd901cee3099e238257ed42dc6cac62918ec5f7131502d06005a0f324914203193850d4e1d12bc9798ea919e5e745961765a9fcc7ab594053cf7dfbfbce0f6d57f45a3456bcaf773f508b9605bf7eb0f92fce9a519ba2156a3e7c525ee05ea3194688dab129fb5c1902a6f1437976ba8fdaf4a2b3d6f5fde782d0c9a173aecc821d96fe2c8e3be820df64da2a7ef21c2c71d37c32b866daaa06dd73ce7401834d8c4d709419651ec1b33749023c91d6606934c9d1f56b3427dd7d6eed626b363f0546e715d60d4669980375fc6745013178fbaa3fd20456a09dac9bd1ae3f7f66ae9a8f04381acc5c6e6a420564863e2734be5aa0c03039e5e351160da5e66289bcd6913fdbcbabdefd38910d5d5c3fdd1b3f61b944d33c55c86360789dd0aefaf631881377f9cdff7c315dba1c9ee81c3883cf14db77533916596d6e23f68263af083130b2846af17dcd82828b5056edf267da970259e78d03fe4de8637d408bb5974b41770adcee7ef09dcd49b98d50d97e05c708d89d516d7d0a25c3838fe9432cedc577278290a3f032bc04016bc8b4319d53aaf23c100c8d9bf56fdc1c06fe9b9292aaf91885b94b817756048bf7161735c0abc0a5b044ccbea73581a7ef2de0edd4e231eb001c6692db4c7804af5a422dd2f338b40365418a9c5a32704fb9b2d78ff6a286b0c7e2977a2cf868f97c22c140c1579839c3c7f76e2554fd11f4a8d10a1488d6278d92a6578df41064116e29402d178b7e4d73bfa4a0448b9e11512035436838b285fd4aba7e9114f60b34bea8f215faa29582ac091bf7dea3706d63de6c231490a68d9bce7b09c4fca58b75a201cf156584edd421fb506fd7632777844a6481ed1c677781c3d69d66b9a1828d691af06393b5bf93ed66e487d7bfd9a7e067ab776d63509e50c096a74a2751a7476fc9c8c913fbf08d4710a314a00700844616161075df208d768a1989ab36af6e6473e7c2bb380ae9a125a37a348e1c5f07ce8099bd05ec0ce03c3aabee3c25808a3f2e6dc28c8fb45a02cbf0c9c32808439062e4a062e6affc4286c3648f76354ce02388785f59e7fcf9a273284a057bf3d18c9875d42007720a25a41a08f02cd8b026638a9cb1b9e64cb42e2a0349d7d7cdbdcb8c11ca9241249f744ede3e79635634a14e3de469c93cc386c0ab22571ee7086a5634d3a1053281a20dba259b305dcb400f444787ea442ddf899e779938cd65047b7c1557017ff087f546d4dde93ea36cd4ecee8463ef418be692e0ea9b5aeb1bba9ca3c7e86bbdb2866241c9298f3e67e7833dd5599f40118ed5cb6b0151d8db40a6497e7f676b19fdc6f01b03f86e017e55c226fe24cf589831dfacab557e43b98ea6f001fddb80157dd650f5d5a62e9c23fc63ed30e7105f862119eba9dc2698a46eb0fdc7812b3ab9b8c6e14022df4128ebea1ee1854375bcb9b2f890c41ef6ec0674a5616b76845abf4cc87f9197dc6283ba907d96f6ee962e4b7d0b2add77ee55ce18320552221224776f540efff9d5d4dcc7651bbdefa2382990dc90ac1e25cf35383533c9c94a1deafe20cd75bf973901be812cb7364b73fceca5ccd3957c46da1524ee5a97e7f854c9e7ceea7132084d0dec977449c4a1566d29005572556d40aa21add9375fa47a44effbd2ae4f6affebc4bb73aac2994d25e7643e8bdc720a51045e0d594b6e734b818221187554411877db305736d97f65877ade0c88bf5c384b9cbc592fa89d3afa8120c75826aba44b71b8c8ae7e2251e090c4eb40538f26ab81572ca6fa9c84d8ab38271d8ad0274a5a2491937f744fbf54f1f14e57626ec1e34f6b5e627f11ec5342e0687af0906d42cd126222a1505a2f3c19fd25e30a5907d69a20a34ba8696f793478d36482e39a85c650007133af2d779a12945c06ec1ae251b88a0c364cf4ab73f8b19f38b0f0fd6e68ce96559efe7a24a57280ae675a70e5675a3b4f7888157c1d88c4134825bb86a1bc5cfd416a1c6a2bd7c282c5f86d7e3d2ff2c23a9badf2d8c3223e0f564f949ff7e406fce219fb79ab3da40d7fb7b47d2dee549201376afc8c084d340a7c8b7ea6df7b02257c373f187b8de32447b1777f4ca2b93f1197c40fffa359ddf732a88c0870bb685670f56bdeb9a3ef87c7072743bc9da4b310baf7756282ef6f07386330a4d6f8fb4ca373581f4871d3d3bb485a58dd4c0c9975a5ca1bd8e1cdcc974db2cfe0703e3823f598410eda746e13dfef06057b120cae3a48a118d59dc63b8129bfb799105aa51cb0b94c6a8c1a820fbb8efdd08b095bc4d2890cbcb75f66503932134c1715f3b349715c9c99e99478a4462bb9c3d341726fbdbca6116f344b3bee379cc21cfb5465c836938b64014e55b7f38d2f14ac30895505cd002959bbafcb7109bb05da81f4ac3b8f7ece0b8e006bd382a50cffab52b2c269580ebb8dcb41b41336dafa347658a317917aae4597728e3e822c1296cc6dc043dccf5502fc9c7a704d525761f98627a40a356428204f8aeca257a858997cd91f464fd1b57bd7c076926d99eaf8318fa38ade5022e43adcdbbdf85cac3c9b2a1040fd7ef95209ceada06b809bbf7f431eb73da69abcd22dcf49136528182cf548c904ecc84d3f090434797d11eaa527bc67356eb1ead809cfd6567c6ee88fb3c4bef6b7525817ad2035bf82c25e038aec8b96233877e38b0b462cca235f7abcc1a444d32a77ac96cc3f84ddb32a3906ab0af8c0b1178ac7ae9a80f48b50861647d5f17ac9ee8c23abeccf257f8bdd57682031affe4e742e03a3432154a65997f768fe92e63aeace406700fc0fa5ed46f903ee96b62b838c03bab0ce3869b49c4b28edcbab72007e011d88296dd82b166a4e7ac89f0ed34c6478d67d93e6acb2018942323daac9971719005c4272a39f8b14bb169fc6ca88dc6c896a18de8a61193f05368c57aaa0b10eacda82386d17263bee5a76e686efdf4924eb43186f2f01683239b88b541649e6868bd020c0cc649980d02408e060bd491d5d8dda4ef947b8c14be4a72f160661532820c7c29586770c9f6fe93dbaf14428631451ab2e6047faeb67ee63afb45c33de4be268855ced492dfdcecb731e58db1ce80d84b7282108af70ccd1621c8d78652f368ce79bade3f6a5d57dc83bcd74ff8537f6050af76a55ec02d78f26cdd8d897711020ca895c2d081a2525458ccea95436b79ac58c463c95a64f74ea44422d3aa69268683a6d949eac8e8c722cc08084521a19a01b35a854aad8cfea73a3200c2468e84413948b4238a0712e6bbdacce3a4be6357a4128db9b445950c25e0f0d09ec7684f190dbf5c9bf2f7a562ccf771a0dab72ca291faa2b400c85ae3088c331db3e6ad6de8fca8e93a414826dc6024cc97dae44ad039955a1370be0e2f13ea52ff1b24ee2ac76588acbec030cf213a7fc54651d83af40721c6cd848da1c205c2b0977379af69d7c76c216120ca0efd674d9de4e7d8118a7bb1f9b1e92ed7b599ceb019c5412270a3e8f2800e58f412d89d98db90053e8a11de22f19a44989ad23a979b2f23617819a0c8d0048ede40f21f215d4b6e0ca832c97fb7e26d2a703013ef173562b1442819af80bb8b1d019b7303e829f204d517eccb6c45fbf3d0f3bb6f0d5e29e22a49e9449a58e60977b814d6925436cefbb3a4a480a1bfea752b21c0e4085a71817ee5c4296b12991ba0227972f2a10780c2872be6eb88f60aabe1373c46c5195f7729fb0982bc60994e43f56796cfac91ef6fba7ce88e2b67ff90c780ab87430119cca0ef73cdf619f74e487de421b6a3a4605e3e8582dd2f9e8d8bd6bc22a22ae6f2866d442258106f611be69c0c7110372b862a45a643fa93fb1fdfa1ca98ecc70168233d85514a1cb6c1e2e6a67eedf079275b68f0767a4ef29ab645d68fb8596e334b52cee934fa32d870a0c8300e203c95005682f516b1d56e9a4ee8e55d4dff17c49cdf366cc850861a3647aa771a590c08dd716101d56edac1b1f003f7a041208f5e8f4c232a080817b90523356a720ca0b1ea5651de44d024fb8e6903107c1bd957f00ff5f287db5a230578b0ec0c49c4df099cfaaf6c3cb05f4b07ea413a2674381ace7a1bdcc3ed3d0a1238c8cc8f70bb76637f835299a0b0e13485f7834d465254518ac0bfc5f289053c491b180f0f482f7ddc690d6e8b18aa87778ba1735e329928d64c38e0316e1b67496cd3feb2ef7c66817f5ccf3ea8403674eed301d0b0ca07bf32b13b584ecccfc362a087e63c94aefc1047871beab624951b0557e32c7f95aba1ef09e04ad526ee18c23358c2cfc2ffa1d72ac4d5408957d97ea9085a354041ea6345567fcb0ee2aaa8a7e777c64192d76798c942698d4550d1a6d156bd4e57bb172eec426b0bd84cf2af73b90a43b4d9af6f02aadd891c4d30326e4ecef97758e20a1a3d33692436823e054107cdb03075940b661528c574d8b659637b50c42148f0f1713bee8b7297f0a055cb0deba8617b7d017da6f91905705228db0a67effe626a21006aca7334ed82ede64f16abdc7501ea3ac5b6</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 纪录片 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows</title>
      <link href="/2022/08/16/Windows/"/>
      <url>/2022/08/16/Windows/</url>
      
        <content type="html"><![CDATA[<h2 id="1、Windows基础设置"><a href="#1、Windows基础设置" class="headerlink" title="1、Windows基础设置"></a>1、Windows基础设置</h2><h3 id="1、D盘下新建目录"><a href="#1、D盘下新建目录" class="headerlink" title="1、D盘下新建目录"></a>1、D盘下新建目录</h3><ul><li>Program Files</li><li>Program Files (x86)</li><li>GoogleDown</li><li>InstallationPackage</li></ul><h3 id="2、常用软件安装"><a href="#2、常用软件安装" class="headerlink" title="2、常用软件安装"></a>2、常用软件安装</h3><ul><li>应用商店：SoftDownloader软件，现名：三点下载器；华为应用商店；联想应用商店</li><li>软件卸载软件：HiBitUninstaller-Portable      可注册表清理，系统还原，垃圾清理</li><li>压缩软件：RAR</li><li>截图软件：Snipaste       可将截图固定在屏幕上且置于其他应用窗口之上</li><li>影视播放软件：PotPlayer      该软件可以使用电视直播源播放电视台</li><li>录屏软件：Bandicam</li><li>记事本：Notepad++    与系统自带差不多，优势就是可以打开更多格式的文件进行编辑；也可以安装一个VScode编辑器，支持多种格式文件编辑，占用内存小</li><li>文件版本管理软件：git    下载地址： <a href="https://git-scm.com/download">https://git-scm.com/download</a></li></ul><h3 id="3、其他推荐软件"><a href="#3、其他推荐软件" class="headerlink" title="3、其他推荐软件"></a>3、其他推荐软件</h3><ul><li><p>PDF阅读器：JisuPdf</p></li><li><p>思维导图：ioDraw-v2.0.1-win32</p></li><li><p>围棋AI：KaTrain ，Lizzieyzy   GitHub开源</p></li><li><p>围棋摆谱软件：MultiGo</p></li><li><p>围棋死活题软件：围棋级位测试6000题</p></li><li><p>网盘：aDrive</p></li><li><p>Markdown编辑器：Typora（这个现在收费了，需要免费使用得安装旧版本）</p></li><li><p>杀毒软件：火绒</p></li><li><p>远程控制软件：向日葵    免登陆得安装旧版</p></li><li><p>微软常见运行库安装：MSVBCRTAIO</p></li><li><p>博客搭建环境：nodejs    <a href="https://www.cnblogs.com/liuqiyun/p/8133904.html">https://www.cnblogs.com/liuqiyun/p/8133904.html</a></p></li><li><p>野狐围棋：下载地址：<a href="https://foxwq.com/soft.html">https://foxwq.com/soft.html</a></p></li><li><p>B站视频下载：鼠鼠下载器（高清下载，支持批量下载）下载地址：<a href="https://dmd.moyu.moe/">https://dmd.moyu.moe</a></p><p>另一个下载器：DownKyi，下载地址：<a href="https://suo.yt/J2nWUrs">https://suo.yt/J2nWUrs</a></p><p>项目地址：<a href="https://github.com/leiurayer/downkyi">https://github.com/leiurayer/downkyi</a></p><p>DownKyi不仅提供了解析下载，还有一个工具箱有一些水印去除之类的功能。</p></li><li><p>百度文库下载：小叶文库下载（下文软件获取公众号中的小白资源库中有安装包提供，可以下载VIP才能阅读的文章）</p></li></ul><h3 id="4、软件获取公众号"><a href="#4、软件获取公众号" class="headerlink" title="4、软件获取公众号"></a>4、软件获取公众号</h3><ul><li>办公软件安装管家</li><li>火耳软件管家</li><li>软件安装管家</li><li>软件目录</li><li>软件科技汇</li><li>小白资源库 ：<a href="https://mp.weixin.qq.com/s/uHPpFebNyFWnPw7g9hwc_A">https://mp.weixin.qq.com/s/uHPpFebNyFWnPw7g9hwc_A</a></li></ul><h2 id="2、其他软件设置"><a href="#2、其他软件设置" class="headerlink" title="2、其他软件设置"></a>2、其他软件设置</h2><h3 id="1、谷歌浏览器打开报信息错误"><a href="#1、谷歌浏览器打开报信息错误" class="headerlink" title="1、谷歌浏览器打开报信息错误"></a>1、谷歌浏览器打开报信息错误</h3><p>处理方式：删除C:\Users\用户名\AppData\Local\Google\Chrome\User Data\Default\下的Web Data文件即可；</p><p>可写一个bat脚本作为Google启动方式进行处理</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off#执行脚本时，dos窗口不显示执行命令</span><br><span class="line">#删除Web Data文件</span><br><span class="line"><span class="built_in">del</span> /q &quot;C:\Users\HASEE\AppData\Local\Google\Chrome\User Data\Default\Web Data&quot;</span><br><span class="line">#启动谷歌浏览器</span><br><span class="line"><span class="built_in">start</span> &quot;&quot; &quot;D:\Program Files\Google\Chrome\Application\chrome.exe&quot;</span><br></pre></td></tr></table></figure><h3 id="2、bat关机和重启命令"><a href="#2、bat关机和重启命令" class="headerlink" title="2、bat关机和重启命令"></a>2、bat关机和重启命令</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">#运行时不显示dos窗口</span><br><span class="line"><span class="keyword">if</span> &quot;%<span class="number">1</span>&quot; == &quot;h&quot; <span class="keyword">goto</span> begin</span><br><span class="line">mshta vbscript:createobject(&quot;wscript.shell&quot;).run(&quot;&quot;&quot;%~nx0&quot;&quot; h&quot;,<span class="number">0</span>)(window.close)&amp;&amp;<span class="keyword">exit</span></span><br><span class="line">:begin</span><br><span class="line">#下面是要执行的命令</span><br><span class="line">slidetoshutdown#下拉关机命令</span><br><span class="line"></span><br><span class="line">shutdown -r -t <span class="number">1</span>#重启命令</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、非常用软件安装"><a href="#3、非常用软件安装" class="headerlink" title="3、非常用软件安装"></a>3、非常用软件安装</h2><h3 id="1、手机投屏到电脑"><a href="#1、手机投屏到电脑" class="headerlink" title="1、手机投屏到电脑"></a>1、手机投屏到电脑</h3><p>1、手机投屏到电脑软件（用于投屏）</p><p>软件下载地址：<a href="https://github.com/Genymobile/scrcpy">https://github.com/Genymobile/scrcpy</a>     （该软件支持无线投屏）</p><p>2、调试软件（用于电脑端操作手机）</p><p>软件下载：用bing国际版搜索 platform-tools 然后下载zip</p><p>3、安装， 上面两个下载解压后就得到platform-tools和scrcpy-win64-v1.24这两个文件夹，然后将这两个文件夹放到C:\Program Files (x86)目录下，然后再将这两个文件夹的路径添加到环境变量里面。</p><p>4、手机端的设置，打开开发者选项，打开USB设置和USB(安全设置)。如果仅仅是投屏，电脑端不操作手机端的话，USB(安装设置)不需打开。</p><p>5、连上数据线，vin+r打开运行窗口，输入cmd后回车，然后输入scrcpy，手机就可以投屏到电脑。</p><p>6、安装该软件（Bluetooth Audio Receiver）就可以通过蓝牙将手机的声音投到电脑上。bing上搜索安装，win商店自带的软件。</p><h3 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h3><h2 id="4、一些临时想用的偏门设置"><a href="#4、一些临时想用的偏门设置" class="headerlink" title="4、一些临时想用的偏门设置"></a>4、一些临时想用的偏门设置</h2><h3 id="1、系统于软件上的设置"><a href="#1、系统于软件上的设置" class="headerlink" title="1、系统于软件上的设置"></a>1、系统于软件上的设置</h3><p>1、清除应用软件使用后的一些默认基础设置信息，(自己用到的就是想删除鼠鼠下载器里面的下载记录）  &#x3D;&#x3D;》 在运行窗口里面输入：%AppData%   之后回车，然后找到对应应用程序的文件夹，将其删掉就行。</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python组件</title>
      <link href="/2022/08/15/Python%E7%BB%84%E4%BB%B6/"/>
      <url>/2022/08/15/Python%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="1-生成6位数字随机验证码"><a href="#1-生成6位数字随机验证码" class="headerlink" title="1. 生成6位数字随机验证码"></a>1. 生成6位数字随机验证码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">num_code</span>(<span class="params">length=<span class="number">6</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成长度为length的数字随机验证码</span></span><br><span class="line"><span class="string">    :param length: 验证码长度</span></span><br><span class="line"><span class="string">    :return: 验证码</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(random.choice(string.digits) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, length))</span><br></pre></td></tr></table></figure><h2 id="2-md5加密"><a href="#2-md5加密" class="headerlink" title="2.md5加密"></a>2.md5加密</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># md5加密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_encrypt</span>(<span class="params">en_str</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用md5二次加密生成32位的字符串</span></span><br><span class="line"><span class="string">    :param en_str: 需要加密的字符串</span></span><br><span class="line"><span class="string">    :return: 加密后的字符串</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">   </span><br><span class="line">    md5 = hashlib.md5()  <span class="comment"># 使用MD5加密模式</span></span><br><span class="line">    md5.update(en_str.encode(<span class="string">&#x27;utf-8&#x27;</span>))  <span class="comment"># 将参数字符串传入</span></span><br><span class="line">    md5.update(md5.hexdigest().encode(<span class="string">&#x27;utf-8&#x27;</span>))  <span class="comment"># md5二次加密</span></span><br><span class="line">    <span class="keyword">return</span> md5.hexdigest()</span><br></pre></td></tr></table></figure><h2 id="3-生成唯一token"><a href="#3-生成唯一token" class="headerlink" title="3. 生成唯一token"></a>3. 生成唯一token</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span>  hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">only_token</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用md5加密uuid生成唯一的32位token</span></span><br><span class="line"><span class="string">    :return: 加密后的字符串</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">md5 = hashlib.md5()  <span class="comment"># 使用MD5加密模式</span></span><br><span class="line">md5.update(<span class="built_in">str</span>(uuid.uuid1()).encode(<span class="string">&#x27;utf-8&#x27;</span>))  </span><br><span class="line"><span class="keyword">return</span> md5.hexdigest()</span><br></pre></td></tr></table></figure><h2 id="4、发送手机验证码"><a href="#4、发送手机验证码" class="headerlink" title="4、发送手机验证码"></a>4、发送手机验证码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#验证码管理表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthCode</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">10</span>,default=<span class="literal">None</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>,verbose_name=<span class="string">&#x27;姓名&#x27;</span>)</span><br><span class="line">    phone = models.CharField(max_length=<span class="number">11</span>, unique=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;手机号&#x27;</span>)</span><br><span class="line">    code = models.CharField(max_length=<span class="number">6</span>,verbose_name=<span class="string">&#x27;验证码&#x27;</span>)</span><br><span class="line">    purpose = models.IntegerField(default=<span class="number">0</span>,verbose_name=<span class="string">&#x27;用途:0-&gt;注册验证 1-&gt;找回密码 2-&gt;其它&#x27;</span>)</span><br><span class="line">    sendNum = models.IntegerField(default=<span class="number">0</span>,verbose_name=<span class="string">&#x27;发送次数&#x27;</span>)</span><br><span class="line">    isCanGet = models.BooleanField(default=<span class="number">0</span>,verbose_name=<span class="string">&#x27;0-&gt;可以获取,1-&gt;不可以获取&#x27;</span>)</span><br><span class="line">    recentlySendTime = models.DateTimeField(auto_now_add=<span class="literal">True</span>,verbose_name=<span class="string">&#x27;最近一次发送时间&#x27;</span>)</span><br><span class="line">    creation_time = models.DateTimeField(auto_now=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;创建时间&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        verbose_name = <span class="string">&#x27;手机验证码&#x27;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实现逻辑"><a href="#实现逻辑" class="headerlink" title="实现逻辑"></a>实现逻辑</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http.client</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="comment"># 使用互亿无线</span></span><br><span class="line">host = <span class="string">&quot;106.ihuyi.com&quot;</span></span><br><span class="line">sms_send_uri = <span class="string">&quot;/webservice/sms.php?method=Submit&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看用户名 登录用户中心-&gt;验证码通知短信&gt;产品总览-&gt;API接口信息-&gt;APIID</span></span><br><span class="line">account = <span class="string">&quot;你的用户名&quot;</span></span><br><span class="line"><span class="comment"># 查看密码 登录用户中心-&gt;验证码通知短信&gt;产品总览-&gt;API接口信息-&gt;APIKEY</span></span><br><span class="line">password = <span class="string">&quot;你的密码&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_sms</span>(<span class="params">text, mobile</span>):</span><br><span class="line">    text = <span class="string">f&quot;您的验证码是：<span class="subst">&#123;text&#125;</span>。请不要把验证码泄露给其他人。&quot;</span></span><br><span class="line">    params = urllib.parse.urlencode(</span><br><span class="line">        &#123;<span class="string">&#x27;account&#x27;</span>: account, <span class="string">&#x27;password&#x27;</span>: password, <span class="string">&#x27;content&#x27;</span>: text, <span class="string">&#x27;mobile&#x27;</span>: mobile, <span class="string">&#x27;format&#x27;</span>: <span class="string">&#x27;json&#x27;</span>&#125;)</span><br><span class="line">    headers = &#123;<span class="string">&quot;Content-type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>, <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/plain&quot;</span>&#125;</span><br><span class="line">    conn = http.client.HTTPConnection(host, port=<span class="number">80</span>, timeout=<span class="number">30</span>)</span><br><span class="line">    conn.request(<span class="string">&quot;POST&quot;</span>, sms_send_uri, params, headers)</span><br><span class="line">    response = conn.getresponse()</span><br><span class="line">    response_str = response.read()</span><br><span class="line">    conn.close()</span><br><span class="line">    <span class="keyword">return</span> response_str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    mobile = <span class="string">&quot;手机号&quot;</span></span><br><span class="line">    text = <span class="string">&#x27;123122&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(json.loads(send_sms(text, mobile).decode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5、生成二维码"><a href="#5、生成二维码" class="headerlink" title="5、生成二维码"></a>5、生成二维码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> qrcode</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maker_qrcode</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成二维码</span></span><br><span class="line"><span class="string">    :param url: 需要生成二维码的url</span></span><br><span class="line"><span class="string">    :return: 返回图片字节流</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    image = qrcode.make(url)  <span class="comment"># 创建二维码片</span></span><br><span class="line"></span><br><span class="line">    buffer = io.BytesIO()</span><br><span class="line">    <span class="comment"># 将图片内容丢入容器</span></span><br><span class="line">    image.save(buffer, <span class="string">&#x27;png&#x27;</span>)</span><br><span class="line">    <span class="comment"># 返回容器内的字节</span></span><br><span class="line">    <span class="keyword">return</span> buffer.getvalue()</span><br><span class="line">    </span><br><span class="line">或者</span><br><span class="line"><span class="keyword">from</span> .settings <span class="keyword">import</span> BASE_DIR</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_qrcode</span>(<span class="params">name, url</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成机器扫码支付二维码</span></span><br><span class="line"><span class="string">    :param name: 图片名称</span></span><br><span class="line"><span class="string">    :param url: 支付路由</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    img = qrcode.make(url, border=<span class="number">0</span>)  <span class="comment"># 创建二维码片</span></span><br><span class="line">    save_path = BASE_DIR + <span class="string">&#x27;/&#x27;</span> + name + <span class="string">&#x27;.png&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(save_path)</span><br><span class="line">    img.save(save_path)</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-微信群发"><a href="#6-微信群发" class="headerlink" title="6.微信群发"></a>6.微信群发</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf8</span></span><br><span class="line"><span class="keyword">import</span> itchat, time</span><br><span class="line"></span><br><span class="line">itchat.auto_login(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">SINCERE_WISH = <span class="string">u&#x27;祝%s新年快乐！&#x27;</span></span><br><span class="line"></span><br><span class="line">friendList = itchat.get_friends(update=<span class="literal">True</span>)[<span class="number">35</span>:]</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>  index,friend <span class="keyword">in</span> <span class="built_in">enumerate</span>(friendList):</span><br><span class="line">    <span class="built_in">print</span>(index,friend[<span class="string">&#x27;DisplayName&#x27;</span>],friend[<span class="string">&#x27;NickName&#x27;</span>])</span><br><span class="line">    itchat.send(SINCERE_WISH % (friend[<span class="string">&#x27;DisplayName&#x27;</span>]</span><br><span class="line">                                <span class="keyword">or</span> friend[<span class="string">&#x27;NickName&#x27;</span>]), friend[<span class="string">&#x27;UserName&#x27;</span>])</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;备注名称&#x27;</span>,friend[<span class="string">&#x27;DisplayName&#x27;</span>],<span class="string">&#x27;昵称&#x27;</span>,friend[<span class="string">&#x27;NickName&#x27;</span>],<span class="string">&#x27;用户名&#x27;</span>,friend[<span class="string">&#x27;UserName&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----end----&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># 发送文本</span></span><br><span class="line"><span class="string">itchat.send(&#x27;Hello, WeChat!&#x27;)</span></span><br><span class="line"><span class="string"># 发送图片</span></span><br><span class="line"><span class="string">itchat.send_image(&#x27;my_picture.png&#x27;)</span></span><br><span class="line"><span class="string"># 发送视频</span></span><br><span class="line"><span class="string">itchat.send_video(&#x27;my_video.mov&#x27;)</span></span><br><span class="line"><span class="string"># 发送文件</span></span><br><span class="line"><span class="string">itchat.send_file(&#x27;my_file.zip&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="7、微信自动回复"><a href="#7、微信自动回复" class="headerlink" title="7、微信自动回复"></a>7、微信自动回复</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> itchat</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment">#图灵机器人</span></span><br><span class="line"><span class="comment">#http://www.tuling123.com/member/robot/1380138/center/frame.jhtml?page=0&amp;child=0获取apikey</span></span><br><span class="line">KEY = <span class="string">&#x27;你的KEY&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_response</span>(<span class="params">msg</span>):</span><br><span class="line">    apiUrl = <span class="string">&#x27;http://www.tuling123.com/openapi/api&#x27;</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;key&#x27;</span>    : KEY,</span><br><span class="line">        <span class="string">&#x27;info&#x27;</span>   : msg,</span><br><span class="line">        <span class="string">&#x27;userid&#x27;</span> : <span class="string">&#x27;wechat-robot&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.post(apiUrl, data=data).json()</span><br><span class="line">        <span class="keyword">return</span> r.get(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@itchat.msg_register(<span class="params">itchat.content.TEXT</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tuling_reply</span>(<span class="params">msg</span>):</span><br><span class="line">    defaultReply = <span class="string">&#x27;I received: &#x27;</span> + msg[<span class="string">&#x27;Text&#x27;</span>]</span><br><span class="line">    robots=[<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>]</span><br><span class="line">    reply = get_response(msg[<span class="string">&#x27;Text&#x27;</span>])+random.choice(robots)</span><br><span class="line">    <span class="keyword">return</span> reply <span class="keyword">or</span> defaultReply</span><br><span class="line"></span><br><span class="line">itchat.auto_login(enableCmdQR=<span class="literal">False</span>)</span><br><span class="line">itchat.run()</span><br></pre></td></tr></table></figure><h2 id="8、提取Django中model中的字段名变成字典、列表"><a href="#8、提取Django中model中的字段名变成字典、列表" class="headerlink" title="8、提取Django中model中的字段名变成字典、列表"></a>8、提取Django中model中的字段名变成字典、列表</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">t = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    goods_id = models.IntegerField(verbose_name=&#x27;商品编号&#x27;)</span></span><br><span class="line"><span class="string">    label_code = models.CharField(max_length=20, verbose_name=&#x27;商品标签&#x27;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 字典</span></span><br><span class="line"><span class="built_in">print</span>(&#123;k:<span class="literal">None</span> <span class="keyword">for</span> k <span class="keyword">in</span> re.findall(<span class="string">&#x27;([a-z_A-Z]+)\s=\s&#x27;</span>,t)&#125;)</span><br><span class="line"><span class="comment"># 列表</span></span><br><span class="line"><span class="comment"># print([k for k in re.findall(&#x27;([a-z_A-Z]+)\s=\s&#x27;,t)])</span></span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">&#123;<span class="string">&#x27;goods_id&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;lable_code&#x27;</span>: <span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="9、数据库中给表创建数据"><a href="#9、数据库中给表创建数据" class="headerlink" title="9、数据库中给表创建数据"></a>9、数据库中给表创建数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">createData</span>(<span class="params">dataDict,tableName</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    给数据表创建数据</span></span><br><span class="line"><span class="string">    :param dataDict: 字典</span></span><br><span class="line"><span class="string">    :param tableName: 表名</span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment">#连接数据库</span></span><br><span class="line">    conn = pymysql.connect(</span><br><span class="line">        host=<span class="string">&#x27;192.168.0.188&#x27;</span>, <span class="comment">#数据库所在地址URL</span></span><br><span class="line">        user=<span class="string">&#x27;root&#x27;</span>, <span class="comment">#用户名</span></span><br><span class="line">        password=<span class="string">&#x27;123456&#x27;</span>, <span class="comment">#密码</span></span><br><span class="line">        database=<span class="string">&#x27;名称&#x27;</span>, <span class="comment">#数据库名称</span></span><br><span class="line">        port=<span class="number">3306</span>,  <span class="comment">#端口号</span></span><br><span class="line">        charset=<span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment">#拿到查询游标</span></span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    clos,value = <span class="built_in">zip</span>(*dataDict.items())</span><br><span class="line">    sql = <span class="string">&quot;INSERT INTO `%s`(%s) VALUES (%s)&quot;</span> % (tableName,</span><br><span class="line">                                                <span class="string">&#x27;,&#x27;</span>.join(clos),</span><br><span class="line">                                                <span class="string">&#x27;,&#x27;</span>.join([<span class="string">&#x27;%s&#x27;</span>] * <span class="built_in">len</span>(value))</span><br><span class="line">                                                )</span><br><span class="line">    <span class="built_in">print</span>(sql)</span><br><span class="line">    cursor.execute(sql, value)</span><br><span class="line">    conn.commit()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Done&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="10-捕捉异常"><a href="#10-捕捉异常" class="headerlink" title="10.捕捉异常"></a>10.捕捉异常</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> 异常类型 <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">异常类型</span><br><span class="line">Exception  全部异常</span><br><span class="line">AttributeError 试图访问一个对象没有的属性，比如foo.x，但是foo没有属性x</span><br><span class="line">IOError 输入/输出异常；基本上是无法打开文件</span><br><span class="line">ImportError 无法引入模块或包；基本上是路径问题或名称错误</span><br><span class="line">IndentationError 语法错误（的子类） ；代码没有正确对齐</span><br><span class="line">IndexError 下标索引超出序列边界，比如当x只有三个元素，却试图访问x[<span class="number">5</span>]</span><br><span class="line">KeyError 试图访问字典里不存在的键</span><br><span class="line">KeyboardInterrupt Ctrl+C被按下</span><br><span class="line">NameError 使用一个还未被赋予对象的变量</span><br><span class="line">SyntaxError Python代码非法，代码不能编译(个人认为这是语法错误，写错了）</span><br><span class="line">TypeError 传入对象类型与要求的不符合</span><br><span class="line">UnboundLocalError 试图访问一个还未被设置的局部变量，基本上是由于另有一个同名的全局变量，导致你以为正在访问它</span><br><span class="line">ValueError 传入一个调用者不期望的值，即使值的类型是正确的</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="11、获取当前时间"><a href="#11、获取当前时间" class="headerlink" title="11、获取当前时间"></a>11、获取当前时间</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">current_time = <span class="built_in">str</span>(datetime.datetime.now())[:<span class="number">19</span>]</span><br><span class="line"><span class="built_in">print</span>(current_time)</span><br><span class="line"></span><br><span class="line">输出格式如：<span class="number">2018</span>-<span class="number">10</span>-<span class="number">20</span> <span class="number">10</span>:01:<span class="number">43</span></span><br><span class="line">local_time = time.strftime(<span class="string">&#x27;%Y%m%d%H%M%S&#x27;</span>, time.localtime(time.time()))</span><br><span class="line"><span class="built_in">print</span>(local_time)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="12、订单编号"><a href="#12、订单编号" class="headerlink" title="12、订单编号"></a>12、订单编号</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_str</span>(<span class="params">randomlength=<span class="number">8</span></span>):</span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    chars = <span class="string">&#x27;AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789&#x27;</span></span><br><span class="line">    length = <span class="built_in">len</span>(chars) - <span class="number">1</span></span><br><span class="line">    random = Random()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(randomlength):</span><br><span class="line">        <span class="built_in">str</span>+=chars[random.randint(<span class="number">0</span>, length)]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">order_num</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成付款订单号</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    local_time = time.strftime(<span class="string">&#x27;%Y%m%d%H%M%S&#x27;</span>, time.localtime(time.time()))</span><br><span class="line">    result = local_time + random_str(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(order_num())</span><br></pre></td></tr></table></figure><h2 id="13、mysql自动填写当前时间"><a href="#13、mysql自动填写当前时间" class="headerlink" title="13、mysql自动填写当前时间"></a>13、mysql自动填写当前时间</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CURRENT_TIMESTAMP</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190312172747658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">为表添加索引</span><br><span class="line"></span><br><span class="line">ALTER table tableName ADD INDEX indexName(columnName)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="14、drf动态过滤查询"><a href="#14、drf动态过滤查询" class="headerlink" title="14、drf动态过滤查询"></a>14、drf动态过滤查询</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># page.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserPagination</span>(<span class="title class_ inherited__">PageNumberPagination</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;用户分页器&quot;&quot;&quot;</span></span><br><span class="line">    page_size = <span class="number">10</span>  <span class="comment"># 默认的页面数据数量</span></span><br><span class="line">    page_query_param = <span class="string">&#x27;page&#x27;</span>  <span class="comment"># 定制取数据页码key </span></span><br><span class="line">    page_size_query_param = <span class="string">&#x27;page_size&#x27;</span>  <span class="comment"># 默认取数据页码key </span></span><br><span class="line">    max_page_size = <span class="number">15</span>   <span class="comment"># 数据每页取值的最大上限</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># serializers.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> user.models <span class="keyword">import</span> UserInfo</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserSerializers</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;用户收货地址&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = UserInfo</span><br><span class="line">    <span class="comment"># 所有字段</span></span><br><span class="line">        <span class="comment">#fields = &#x27;__all__&#x27;</span></span><br><span class="line">        fields = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;title&#x27;</span>,  <span class="string">&#x27;province&#x27;</span>, <span class="string">&#x27;city&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;quxian&#x27;</span>, <span class="string">&#x27;address&#x27;</span>, <span class="string">&#x27;code__gte&#x27;</span>, <span class="string">&#x27;code__lte&#x27;</span>]</span><br><span class="line">        <span class="comment"># 显示外键</span></span><br><span class="line">        depth = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MachineViews</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 从前端获取出来的过滤参数，解析成字典传进filter()函数中</span></span><br><span class="line">        <span class="comment"># 动态过滤，</span></span><br><span class="line">        kwargs = &#123;&#125;</span><br><span class="line">        <span class="comment"># 表中的字段名</span></span><br><span class="line">        columns = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;title&#x27;</span>,  <span class="string">&#x27;province&#x27;</span>, <span class="string">&#x27;city&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;quxian&#x27;</span>, <span class="string">&#x27;address&#x27;</span>, <span class="string">&#x27;code__gte&#x27;</span>, <span class="string">&#x27;code__lte&#x27;</span>]</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> request.query_params.items():</span><br><span class="line">            <span class="keyword">if</span> k <span class="keyword">not</span> <span class="keyword">in</span> columns:</span><br><span class="line">                <span class="keyword">return</span> Response(<span class="string">&#x27;参数不对&#x27;</span>, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"><span class="keyword">if</span> v:</span><br><span class="line">            kwargs[k] = v</span><br><span class="line"></span><br><span class="line">        users = UserInfo.objects.<span class="built_in">filter</span>(**kwargs)</span><br><span class="line">        page = UserPagination()</span><br><span class="line">        page_goods_list = page.paginate_queryset(users, self.request, self)</span><br><span class="line">        ser = UserSerializers(page_goods_list, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> page.get_paginated_response(ser.data)</span><br><span class="line">        </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="15、linux后台运行python程序"><a href="#15、linux后台运行python程序" class="headerlink" title="15、linux后台运行python程序"></a>15、linux后台运行python程序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nohup /home/project_venv/user/<span class="built_in">bin</span>/python3 -u /home/user/user_server.py &gt;&gt; /home/user/user.log <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;   </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="16、追加外键"><a href="#16、追加外键" class="headerlink" title="16、追加外键"></a>16、追加外键</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ALTER TABLE tb_commentPhoto ADD CONSTRAINT FK_comment_phone</span><br><span class="line">FOREIGN KEY tb_goodsComment(<span class="built_in">id</span>) REFERENCES tb_commentPhoto(comment_id);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="17、写-x2F-读CSV文件，查看是否存在，若存在就从csv中删除"><a href="#17、写-x2F-读CSV文件，查看是否存在，若存在就从csv中删除" class="headerlink" title="17、写&#x2F;读CSV文件，查看是否存在，若存在就从csv中删除"></a>17、写&#x2F;读CSV文件，查看是否存在，若存在就从csv中删除</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_invite_code</span>(<span class="params">random_code_pool=<span class="literal">None</span>, length=<span class="number">6</span>, num=<span class="number">10</span>, is_append=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    创建随机邀请码,并写入txt文件</span></span><br><span class="line"><span class="string">    :param: random_code_pool 随机邀请码</span></span><br><span class="line"><span class="string">    :param: length 邀请码长度</span></span><br><span class="line"><span class="string">    :param: num 邀请码个数</span></span><br><span class="line"><span class="string">    :param: is_append True追加,False 覆盖</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> random_code_pool:</span><br><span class="line">        code_pool = string.ascii_uppercase + string.digits</span><br><span class="line">        random_code_pool = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">            s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">                s += random.choice(code_pool)</span><br><span class="line">            <span class="keyword">if</span> s <span class="keyword">and</span> s <span class="keyword">not</span> <span class="keyword">in</span> random_code_pool:</span><br><span class="line">                random_code_pool.append(s)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入方法。是追加还是覆盖</span></span><br><span class="line">    write_method = <span class="string">&#x27;a+&#x27;</span> <span class="keyword">if</span> is_append <span class="keyword">else</span> <span class="string">&#x27;w&#x27;</span></span><br><span class="line">    <span class="comment"># 写入文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./invite_code.csv&#x27;</span>, write_method, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        writer = csv.writer(f)</span><br><span class="line">        <span class="keyword">for</span> rowData <span class="keyword">in</span> random_code_pool:</span><br><span class="line">            <span class="comment"># 按行写入</span></span><br><span class="line">            writer.writerow((rowData,))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_invite_code</span>(<span class="params">code</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    查看邀请码是否存在txt文件中，</span></span><br><span class="line"><span class="string">    若存在就返回True，并在txt文件中删除</span></span><br><span class="line"><span class="string">    若不存在就返回False</span></span><br><span class="line"><span class="string">    :param code:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    code_pool = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./invite_code.csv&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>,errors=<span class="string">&#x27;ignore&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        allFileInfo = csv.reader(f)</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> allFileInfo:</span><br><span class="line">            code_pool.append(row[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> code <span class="keyword">in</span> code_pool:</span><br><span class="line">        <span class="comment"># 删除查询的code</span></span><br><span class="line">        code_pool.pop(code_pool.index(code))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 重新写入文件</span></span><br><span class="line">        create_invite_code(code_pool,is_append=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># create_invite_code(length=9,num=100)</span></span><br><span class="line">    <span class="built_in">print</span>(check_invite_code(<span class="string">&#x27;WJ4PSTJG2&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="18、django中从request获取访问路径"><a href="#18、django中从request获取访问路径" class="headerlink" title="18、django中从request获取访问路径"></a>18、django中从request获取访问路径</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;获取相对路径&#x27;</span>, request.get_full_path())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;获取绝对路径&#x27;</span>, request.build_absolute_uri())</span><br><span class="line"><span class="built_in">print</span>(request.build_absolute_uri(<span class="string">&#x27;?&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(request.build_absolute_uri(<span class="string">&#x27;/&#x27;</span>)[:-<span class="number">1</span>].strip(<span class="string">&quot;/&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(request.build_absolute_uri(<span class="string">&#x27;/&#x27;</span>).strip(<span class="string">&quot;/&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(request.build_absolute_uri(<span class="string">&#x27;/&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(request.META[<span class="string">&#x27;HTTP_HOST&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(request.META[<span class="string">&#x27;PATH_INFO&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(request.META[<span class="string">&#x27;QUERY_STRING&#x27;</span>])</span><br><span class="line">iphost = request.META.get(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>, <span class="string">&#x27;&#x27;</span>)  <span class="comment"># 获取访问来源IP</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如：</span></span><br><span class="line">获取相对路径 /QRcode/?d=<span class="number">1</span></span><br><span class="line">获取绝对路径 http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/QRcode/?d=<span class="number">1</span></span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/QRcode/</span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span></span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span></span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/</span><br><span class="line">----------</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span></span><br><span class="line">/QRcode/</span><br><span class="line">d=<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="19、Django收集静态文件"><a href="#19、Django收集静态文件" class="headerlink" title="19、Django收集静态文件"></a>19、Django收集静态文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">先在项目根目录下创建一个static文件夹</span><br><span class="line">然后在settings.py中设置</span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">&#x27;static&#x27;</span>)</span><br><span class="line">最后执行下面的命令：</span><br><span class="line">python manage.py collectstatic</span><br></pre></td></tr></table></figure><h2 id="20、xadmin插件"><a href="#20、xadmin插件" class="headerlink" title="20、xadmin插件"></a>20、xadmin插件</h2><p><a href="https://www.cnblogs.com/lanqie/p/8340215.html">https://www.cnblogs.com/lanqie/p/8340215.html</a></p><h2 id="21、uwsgi自动重启"><a href="#21、uwsgi自动重启" class="headerlink" title="21、uwsgi自动重启"></a>21、uwsgi自动重启</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"><span class="comment"># 使用nginx连接时 使用</span></span><br><span class="line">socket=<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">2019</span></span><br><span class="line"><span class="comment"># 直接作为web服务器使用</span></span><br><span class="line"><span class="comment">#http=0.0.0.1:8000</span></span><br><span class="line"><span class="comment"># 配置工程目录</span></span><br><span class="line">chdir=/home/user</span><br><span class="line"><span class="comment"># 配置项目的wsgi目录。相对于工程目录</span></span><br><span class="line">wsgi-file=user/wsgi.py</span><br><span class="line">virtualenv=/home/project_venv/user</span><br><span class="line"><span class="comment">#配置进程，线程信息</span></span><br><span class="line">processes=<span class="number">1</span></span><br><span class="line">threads=<span class="number">1</span></span><br><span class="line">enable-threads=<span class="literal">True</span></span><br><span class="line">master=<span class="literal">True</span></span><br><span class="line">pidfile=uwsgi.pid</span><br><span class="line">daemonize=uwsgi.log</span><br><span class="line"><span class="comment">#启动uwsgi的用户名和用户组</span></span><br><span class="line">uid=root</span><br><span class="line">gid=root</span><br><span class="line"><span class="comment">#uwsgi自动重启</span></span><br><span class="line">py-autoreload=<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="22、谷歌浏览器快捷键"><a href="#22、谷歌浏览器快捷键" class="headerlink" title="22、谷歌浏览器快捷键"></a>22、谷歌浏览器快捷键</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">浏览器缓存</span><br><span class="line"></span><br><span class="line">Ctrl+Shift+Del  清除Google浏览器缓存的快捷键</span><br><span class="line"></span><br><span class="line">Ctrl+Shift+R  重新加载当前网页而不使用缓存内容</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="23、git克隆分支"><a href="#23、git克隆分支" class="headerlink" title="23、git克隆分支"></a>23、git克隆分支</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b dev 地址 </span><br></pre></td></tr></table></figure><h2 id="24、mysql更新语句、新增列、删除列"><a href="#24、mysql更新语句、新增列、删除列" class="headerlink" title="24、mysql更新语句、新增列、删除列"></a>24、mysql更新语句、新增列、删除列</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">update user <span class="built_in">set</span> name=<span class="string">&#x27;张三&#x27;</span> where <span class="built_in">id</span>=<span class="number">111</span></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">DELETE FROM table_name [WHERE Clause]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加字段</span></span><br><span class="line">alter table 表名 add column 列名 类型;</span><br><span class="line"><span class="comment"># 删除字段</span></span><br><span class="line">alter table 表名 dropcolumn 列名 ;</span><br></pre></td></tr></table></figure><h2 id="25、删除指定格式的文件"><a href="#25、删除指定格式的文件" class="headerlink" title="25、删除指定格式的文件"></a>25、删除指定格式的文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_specified_format_file</span>(<span class="params">file_dir, format_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    删除指定格式的文件</span></span><br><span class="line"><span class="string">    :param file_dir: 文件根目录</span></span><br><span class="line"><span class="string">    :param format_name: 格式</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(file_dir):</span><br><span class="line">        <span class="comment"># print(root) #当前目录路径</span></span><br><span class="line">        <span class="comment"># print(dirs) #当前路径下所有子目录</span></span><br><span class="line">        <span class="comment"># print(files) #当前路径下所有非目录子文件</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> re.<span class="keyword">match</span>(format_name, file):</span><br><span class="line">                <span class="built_in">print</span>(os.path.join(root, file))</span><br><span class="line">                os.remove(os.path.join(root, file))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">remove_specified_format_file(<span class="string">r&#x27;D:\学习\LDC\java&#x27;</span>, <span class="string">r&#x27;\._*&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="26、计算文件总数"><a href="#26、计算文件总数" class="headerlink" title="26、计算文件总数"></a>26、计算文件总数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file_count</span>(<span class="params">file_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :param file_dir: 文件根目录</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(file_dir):</span><br><span class="line">        <span class="comment"># print(root) #当前目录路径</span></span><br><span class="line">        <span class="comment"># print(dirs) #当前路径下所有子目录</span></span><br><span class="line">        <span class="comment"># print(files) #当前路径下所有非目录子文件</span></span><br><span class="line">        count += <span class="built_in">len</span>(files)</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(file_count(<span class="string">r&#x27;D:\学习\LDC\java\Java学习\newEstore\estore\js&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="27、计算文件夹大小"><a href="#27、计算文件夹大小" class="headerlink" title="27、计算文件夹大小"></a>27、计算文件夹大小</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file_size</span>(<span class="params">file_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    删除指定格式的文件</span></span><br><span class="line"><span class="string">    :param file_dir: 文件根目录</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    size = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(file_dir):</span><br><span class="line">        <span class="comment"># print(root) #当前目录路径</span></span><br><span class="line">        <span class="comment"># print(dirs) #当前路径下所有子目录</span></span><br><span class="line">        <span class="comment"># print(files) #当前路径下所有非目录子文件</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            size += os.path.getsize(os.path.join(root, file))</span><br><span class="line"><span class="comment"># M为单位</span></span><br><span class="line">    <span class="keyword">return</span> size / <span class="number">1024</span> / <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file_name = <span class="string">r&#x27;D:\学习&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(file_size(file_name))</span><br></pre></td></tr></table></figure><h2 id="28、Django实现jsonp跨域"><a href="#28、Django实现jsonp跨域" class="headerlink" title="28、Django实现jsonp跨域"></a>28、Django实现jsonp跨域</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># html</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">                    url: <span class="string">&#x27;请求路由&#x27;</span>,</span><br><span class="line">                    <span class="built_in">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">                    dataType: <span class="string">&#x27;JSONP&#x27;</span>,</span><br><span class="line">                    data:&#123;</span><br><span class="line">                      code: <span class="string">&#x27;yes&#x27;</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    jsonp: <span class="string">&#x27;callback&#x27;</span>,</span><br><span class="line">                    success: function(res) &#123;</span><br><span class="line">                       var selectData = $.parseJSON(res);</span><br><span class="line">                       alert(selectData);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    error: function(err) &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        code = request.GET.get(<span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="comment"># 跨域请求</span></span><br><span class="line">        callback = request.GET.get(<span class="string">&#x27;callback&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;%s(&#x27;%s&#x27;)&quot;</span> % (callback, json.dumps(&#123;<span class="string">&#x27;code&#x27;</span>: code&#125;)), status=status.HTTP_200_OK)</span><br><span class="line">                    </span><br><span class="line">cors解决跨域</span><br><span class="line"></span><br><span class="line">https://www.cnblogs.com/wxiaoyu/p/<span class="number">9578848.</span>html</span><br></pre></td></tr></table></figure><h2 id="29、微信获取用户信息"><a href="#29、微信获取用户信息" class="headerlink" title="29、微信获取用户信息"></a>29、微信获取用户信息</h2><p>参考：<a href="https://blog.csdn.net/weixin_39735923/article/details/79202563">https://blog.csdn.net/weixin_39735923/article/details/79202563</a></p><h2 id="30、uwsgi初始配置问题"><a href="#30、uwsgi初始配置问题" class="headerlink" title="30、uwsgi初始配置问题"></a>30、uwsgi初始配置问题</h2><p><a href="https://blog.csdn.net/weixin_39735923/article/details/79202563">https://blog.csdn.net/weixin_39735923/article/details/79202563</a></p><h2 id="31、django中drf序列化"><a href="#31、django中drf序列化" class="headerlink" title="31、django中drf序列化"></a>31、django中drf序列化</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 序列化器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MsgSerializers</span>(serializers.ModelSerializer):</span><br><span class="line">    addtime = serializers.DateTimeField(read_only=<span class="literal">True</span>, <span class="built_in">format</span>=<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">    hasread = serializers.CharField(source=<span class="string">&#x27;get_hasread_display&#x27;</span>)</span><br><span class="line">    msgtype = serializers.CharField(source=<span class="string">&#x27;get_msgtype_display&#x27;</span>)</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = MallMsg</span><br><span class="line">        <span class="comment"># 可以混合使用</span></span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span>  <span class="comment"># &#x27;__all__&#x27; 所有字段</span></span><br><span class="line">        <span class="comment"># 数据库层级控制（序列化链表操作）</span></span><br><span class="line">        <span class="comment"># depth = 1  # 外键层级</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#分页器</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLimitOffsetPagination</span>(<span class="title class_ inherited__">PageNumberPagination</span>):</span><br><span class="line"></span><br><span class="line">    page_size = <span class="number">3</span>  <span class="comment"># 默认的页面数据数量</span></span><br><span class="line">    page_query_param = <span class="string">&#x27;page&#x27;</span>  <span class="comment"># 定制取数据页码key ？</span></span><br><span class="line">    page_size_query_param = <span class="string">&#x27;page_size&#x27;</span>  <span class="comment"># 默认取数据页码key &amp;</span></span><br><span class="line">    max_page_size = <span class="number">15</span>  <span class="comment"># 数据每页取值的最大上限</span></span><br></pre></td></tr></table></figure><h2 id="32、第三方库"><a href="#32、第三方库" class="headerlink" title="32、第三方库"></a>32、第三方库</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">安装openssl</span><br><span class="line"> pip3 install pyOpenSSL</span><br></pre></td></tr></table></figure><h2 id="33、requests请求https携带CA证书"><a href="#33、requests请求https携带CA证书" class="headerlink" title="33、requests请求https携带CA证书"></a>33、requests请求https携带CA证书</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> OpenSSL</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib3.contrib.pyopenssl</span><br><span class="line"></span><br><span class="line">urllib3.contrib.pyopenssl.inject_into_urllib3()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">p12_to_pem</span>(<span class="params">certname, pwd</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从.p12文件中提取pem</span></span><br><span class="line"><span class="string">    :param certname:</span></span><br><span class="line"><span class="string">    :param pwd:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    pem_name = certname + <span class="string">&quot;.pem&quot;</span></span><br><span class="line">    f_pem = <span class="built_in">open</span>(pem_name, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    p12file = certname + <span class="string">&quot;.p12&quot;</span></span><br><span class="line">    p12 = OpenSSL.crypto.load_pkcs12(<span class="built_in">open</span>(p12file, <span class="string">&#x27;rb&#x27;</span>).read(), pwd)</span><br><span class="line">    f_pem.write(OpenSSL.crypto.dump_privatekey(OpenSSL.crypto.FILETYPE_PEM, p12.get_privatekey()))</span><br><span class="line">    f_pem.write(OpenSSL.crypto.dump_certificate(OpenSSL.crypto.FILETYPE_PEM, p12.get_certificate()))</span><br><span class="line">    ca = p12.get_ca_certificates()</span><br><span class="line">    <span class="keyword">if</span> ca <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">for</span> cert <span class="keyword">in</span> ca:</span><br><span class="line">            f_pem.write(OpenSSL.crypto.dump_certificate(OpenSSL.crypto.FILETYPE_PEM, cert))</span><br><span class="line">    f_pem.close()</span><br><span class="line">    <span class="keyword">return</span> pem_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">post_cert_request</span>(<span class="params">url, data,header, certname, pwd</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用证书发起https请求</span></span><br><span class="line"><span class="string">    :param url:</span></span><br><span class="line"><span class="string">    :param data:</span></span><br><span class="line"><span class="string">    :param certname:</span></span><br><span class="line"><span class="string">    :param pwd:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> (certname != <span class="string">&quot;&quot;</span>):</span><br><span class="line">        cert = p12_to_pem(certname, pwd)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cert = <span class="literal">None</span></span><br><span class="line">    r = requests.post(url, header=header, data=data, cert=cert)</span><br><span class="line">    <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure><h2 id="34、django创建缓存命令"><a href="#34、django创建缓存命令" class="headerlink" title="34、django创建缓存命令"></a>34、django创建缓存命令</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py createcachetable 缓存表名</span><br></pre></td></tr></table></figure><h2 id="35、Django-更改超级用户密码"><a href="#35、Django-更改超级用户密码" class="headerlink" title="35、Django 更改超级用户密码"></a>35、Django 更改超级用户密码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在工程文件目录下敲入：</span><br><span class="line">python manage.py shell</span><br><span class="line"></span><br><span class="line">再在python交互界面输入：</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line">user = User.objects.get(username = <span class="string">&#x27;用户名&#x27;</span>)</span><br><span class="line">user.set_password(<span class="string">&#x27;密码&#x27;</span>)</span><br><span class="line">user.save()</span><br></pre></td></tr></table></figure><h2 id="36、restframe使用缓存"><a href="#36、restframe使用缓存" class="headerlink" title="36、restframe使用缓存"></a>36、restframe使用缓存</h2><p><a href="https://blog.csdn.net/Odyssues_lee/article/details/80872586">https://blog.csdn.net/Odyssues_lee/article/details/80872586</a></p><h2 id="37、数据库"><a href="#37、数据库" class="headerlink" title="37、数据库"></a>37、数据库</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">select * <span class="keyword">from</span> user  where ISNULL(code)</span><br><span class="line">update user <span class="built_in">set</span> code=<span class="string">&#x27;111&#x27;</span>,info=<span class="string">&#x27;微信&#x27;</span> where ISNULL(code)</span><br></pre></td></tr></table></figure><h2 id="38、linux常用命令"><a href="#38、linux常用命令" class="headerlink" title="38、linux常用命令"></a>38、linux常用命令</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tail -f 日志名  实时监控日志</span><br><span class="line">tail -f 80_v10.log</span><br><span class="line"></span><br><span class="line">netstat -na|grep <span class="number">80</span>  查看端口tcp连接数</span><br><span class="line">netstat -na|grep <span class="number">80</span> | wc -l 计算端口tcp连接数</span><br><span class="line"></span><br><span class="line">ps -ef|grep python  查看有多少python程序在运行</span><br><span class="line"></span><br><span class="line">gunzip <span class="number">2015.</span>csv.gz   <span class="comment"># 解压</span></span><br><span class="line">unzip <span class="number">19.</span><span class="built_in">zip</span> <span class="comment"># 解压zip</span></span><br><span class="line">wc -l <span class="number">2015.</span>csv   <span class="comment"># 查看行数</span></span><br><span class="line">apt install lrzsz  <span class="comment"># 安装</span></span><br><span class="line">sz 文件名  <span class="comment"># 下载文件</span></span><br><span class="line"></span><br><span class="line">查找文件</span><br><span class="line">find / -name 文件名</span><br><span class="line"></span><br><span class="line">匹配执行过的以find为开头的命令</span><br><span class="line">history | grep find</span><br></pre></td></tr></table></figure><h2 id="39、xadmin禁止增加、删除"><a href="#39、xadmin禁止增加、删除" class="headerlink" title="39、xadmin禁止增加、删除"></a>39、xadmin禁止增加、删除</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"><span class="comment"># 用户管理</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserManage</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">&#x27;用户名&#x27;</span>)</span><br><span class="line">    phone = models.CharField(max_length=<span class="number">11</span>, unique=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;手机号&#x27;</span>)</span><br><span class="line">    code = models.CharField(max_length=<span class="number">11</span>, unique=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;编号&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    user = models.ForeignKey(User, on_delete=models.CASCADE, editable=<span class="literal">False</span>, null=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;管理员&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># adminx.py</span></span><br><span class="line"><span class="comment"># 用户列表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserAdmin</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    list_display = [ <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>, <span class="string">&#x27;name&#x27;</span>,]</span><br><span class="line">    search_fields = [<span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>]</span><br><span class="line">    list_filter = [<span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>]</span><br><span class="line">    list_editable = [<span class="string">&#x27;name&#x27;</span>]  <span class="comment"># 数据即时编辑</span></span><br><span class="line">    readonly_fields = [<span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>, <span class="string">&#x27;name&#x27;</span>]  <span class="comment"># 只读字段，不能编辑</span></span><br><span class="line">    model_icon = <span class="string">&#x27;fa fa-square&#x27;</span></span><br><span class="line">    model = UserInfo</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_delete_permission</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">    <span class="comment"># 禁止删除</span></span><br><span class="line">        <span class="keyword">if</span> args:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">has_add_permission</span>(<span class="params">self,*args,**kwargs</span>):</span><br><span class="line"><span class="comment"># 禁止增加</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_models</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># 用户级别设置</span></span><br><span class="line">        self.new_obj.user = self.request.user</span><br><span class="line">        flag = self.org_obj <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="string">&#x27;create&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;change&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> flag == <span class="string">&#x27;create&#x27;</span>:</span><br><span class="line">        <span class="comment"># 对密码字段进行加密</span></span><br><span class="line">            self.new_obj.password = encrypt_oracle(self.new_obj.password)</span><br><span class="line">        <span class="keyword">elif</span> flag == <span class="string">&#x27;change&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">in</span> self.change_message():</span><br><span class="line">                self.new_obj.password = encrypt_oracle(self.new_obj.password)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        <span class="built_in">super</span>().save_models()</span><br><span class="line"></span><br><span class="line">xadmin.site.register(UserInfo, UserAdmin)</span><br></pre></td></tr></table></figure><h2 id="40、时间格式字符串相减"><a href="#40、时间格式字符串相减" class="headerlink" title="40、时间格式字符串相减"></a>40、时间格式字符串相减</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = <span class="built_in">str</span>(datetime.datetime.now())[:<span class="number">19</span>]</span><br><span class="line">time.sleep(<span class="number">60</span>)</span><br><span class="line">end = <span class="built_in">str</span>(datetime.datetime.now())[:<span class="number">19</span>]</span><br><span class="line"><span class="built_in">print</span>(start,end)</span><br><span class="line">link_start = datetime.datetime.strptime(start, <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">link_end = datetime.datetime.strptime(end, <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">link_min = <span class="built_in">round</span>((link_end - link_start).seconds / <span class="number">60</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(link_min,<span class="string">&#x27;分钟&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="41、显示循环进度条"><a href="#41、显示循环进度条" class="headerlink" title="41、显示循环进度条"></a>41、显示循环进度条</h2><p>参考：<a href="https://blog.csdn.net/zejianli/article/details/77915751">https://blog.csdn.net/zejianli/article/details/77915751</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm,trange</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">text = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> tqdm([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>]):</span><br><span class="line">    text = text + char</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_bar</span>(<span class="params">percent, index, total,start_time, start_str=<span class="string">&#x27;&#x27;</span>, end_str=<span class="string">&#x27;&#x27;</span>, total_length=<span class="number">100</span></span>):</span><br><span class="line">    <span class="comment"># 进度条</span></span><br><span class="line">    percent_length = <span class="built_in">int</span>(percent)</span><br><span class="line">    bar = <span class="string">&#x27;\r&#x27;</span> + start_str + (<span class="string">&#x27;\033[1;31;41m \033[0m&#x27;</span> * percent_length + <span class="string">&#x27;\033[1;37;47m \033[0m&#x27;</span> * (</span><br><span class="line">                total_length - percent_length)) + <span class="string">f&#x27;  <span class="subst">&#123;<span class="built_in">round</span>(index / total * <span class="number">100</span>, <span class="number">2</span>)&#125;</span>%  &#x27;</span> + <span class="string">f&#x27; <span class="subst">&#123;index&#125;</span>|<span class="subst">&#123;end_str&#125;</span>&#x27;</span>+ <span class="string">f&#x27;   |已进行时间: <span class="subst">&#123;<span class="built_in">round</span>(time.time() - start_time, <span class="number">2</span>)&#125;</span>秒&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(bar, end=<span class="string">&#x27;&#x27;</span>, flush=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    data_set = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">23</span>)]</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    total = <span class="built_in">len</span>(data_set)</span><br><span class="line">    end_str = <span class="string">&#x27;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(total)</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> data_set:</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        process_bar(i * <span class="number">100</span> / total, i, total, start_time, start_str=<span class="string">&#x27;&#x27;</span>, end_str=end_str, total_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式三</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">d = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(d)):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    sys.stdout.write(<span class="string">&#x27;\r&gt;&gt; Downloading  %.2f%%&#x27;</span> % (<span class="built_in">float</span>(i) / <span class="built_in">float</span>(<span class="built_in">len</span>(d)) * <span class="number">100.0</span>))</span><br><span class="line">sys.stdout.flush()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="42、把列表中的字典转成csv文件"><a href="#42、把列表中的字典转成csv文件" class="headerlink" title="42、把列表中的字典转成csv文件"></a>42、把列表中的字典转成csv文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">lists = [&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;,&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">3</span>&#125;]</span><br><span class="line">df = pd.DataFrame(lists)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line">df.to_csv(<span class="string">&#x27;result2.csv&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="43、windows添加右键新建MarkDown文件"><a href="#43、windows添加右键新建MarkDown文件" class="headerlink" title="43、windows添加右键新建MarkDown文件"></a>43、windows添加右键新建MarkDown文件</h2><p>在网上下载Typora软件安装后<br>1、在桌面上新建一个txt文件，输入以下内容：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version <span class="number">5.00</span></span><br><span class="line">[HKEY_CLASSES_ROOT\.md\ShellNew]</span><br><span class="line"><span class="string">&quot;NullFile&quot;</span>=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;FileName&quot;</span>=<span class="string">&quot;template.md&quot;</span></span><br></pre></td></tr></table></figure><p>2、另存为，改后缀为.reg，保存类型为.txt，编码为Unicode</p><p><img src="https://img-blog.csdnimg.cn/20200526232015169.png" alt="在这里插入图片描述"></p><p>3、双击运行，确定，重启电脑，此时在桌面右键就有了新建md文件</p><h2 id="44、redis设置值定时过期"><a href="#44、redis设置值定时过期" class="headerlink" title="44、redis设置值定时过期"></a>44、redis设置值定时过期</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">redis_client = redis.Redis(</span><br><span class="line">    host=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    port=<span class="number">6379</span>,</span><br><span class="line">    db=<span class="number">0</span>,</span><br><span class="line">    password=<span class="string">&#x27;123456&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">redis_set</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    redis设置值定时过期</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> redis_client</span><br><span class="line"></span><br><span class="line">    redis_client.<span class="built_in">set</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;ldc&#x27;</span>)</span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line">    <span class="comment"># 设置‘name’50秒过期</span></span><br><span class="line">    expire_time = now + datetime.timedelta(hours=<span class="number">0</span>, minutes=<span class="number">0</span>, seconds=<span class="number">50</span>)</span><br><span class="line">    redis_client.expireat(<span class="string">&#x27;name&#x27;</span>, expire_time)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    redis_set()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="45、linux根据端口杀进程"><a href="#45、linux根据端口杀进程" class="headerlink" title="45、linux根据端口杀进程"></a>45、linux根据端口杀进程</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">killport</span>(<span class="params">port</span>):</span><br><span class="line">    command = <span class="string">&#x27;&#x27;&#x27;kill -9 $(netstat -nlp | grep :&#x27;&#x27;&#x27;</span> + <span class="built_in">str</span>(port) + <span class="string">&#x27;&#x27;&#x27; | awk &#x27;&#123;print $7&#125;&#x27; | awk -F&quot;/&quot; &#x27;&#123; print $1 &#125;&#x27;)&#x27;&#x27;&#x27;</span></span><br><span class="line">    os.system(command)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始执行</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    port = <span class="number">4237</span></span><br><span class="line">    killport(port)</span><br></pre></td></tr></table></figure><h2 id="46、监控linux网络流量"><a href="#46、监控linux网络流量" class="headerlink" title="46、监控linux网络流量"></a>46、监控linux网络流量</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">iftop -n -N -i eth0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nethogs eth0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vim +/字符串 文件</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="47、win10添加右键打开cmd"><a href="#47、win10添加右键打开cmd" class="headerlink" title="47、win10添加右键打开cmd"></a>47、win10添加右键打开cmd</h2><p>通过添加注册表项实现</p><p>win + r 输入 regedit</p><p>找到注册表位置：HKEY_CLASSES_ROOT\Directory\Background\shell\</p><p>右键“shel”l,新建“项”，命名为“以管理员身份打开cmd”，</p><p>右键“以管理员身份打开cmd”，新建“DWORD(32位)值”，命名为”ShowBasedOnVelocityId”,值为“639bc8”</p><p>右键“以管理员身份打开cmd”，新建“项”，命名为“command”</p><p>右键“command”，点击“默认”，点击“修改”，填写数值为 cmd.exe &#x2F;s &#x2F;k pushd “%V”</p><h2 id="48、xadmin后台无法显示下拉框完整内容"><a href="#48、xadmin后台无法显示下拉框完整内容" class="headerlink" title="48、xadmin后台无法显示下拉框完整内容"></a>48、xadmin后台无法显示下拉框完整内容</h2><p>解决方案 在根目录中找到&#x2F;static&#x2F;xadmin&#x2F;vendor&#x2F;selectize&#x2F;selectize.bootstrap3.css<br>在331行后加入 position: static;</p><p><img src="https://img-blog.csdnimg.cn/20190704184201572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="49、xadmin单点登录"><a href="#49、xadmin单点登录" class="headerlink" title="49、xadmin单点登录"></a>49、xadmin单点登录</h2><p>使用中间件实现。</p><p>新建一个utils.py文件，存放以下代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.sessions.models <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XadminMiddleware</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;xadmin后台单点登录&quot;&quot;&quot;</span></span><br><span class="line">        PATH_INFO = request.META.get(<span class="string">&#x27;PATH_INFO&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> PATH_INFO <span class="keyword">and</span> <span class="string">&#x27;xadmin&#x27;</span> <span class="keyword">in</span> PATH_INFO:</span><br><span class="line">            request.session.clear_expired()   <span class="comment"># 清除过期的key</span></span><br><span class="line">            session_key = request.session.session_key</span><br><span class="line">            <span class="keyword">for</span> session <span class="keyword">in</span> Session.objects.<span class="built_in">filter</span>(~Q(session_key=session_key), expire_date__gte=timezone.now()):</span><br><span class="line">                data = session.get_decoded()</span><br><span class="line">                <span class="keyword">if</span> data.get(<span class="string">&#x27;_auth_user_id&#x27;</span>, <span class="literal">None</span>) == <span class="built_in">str</span>(request.user.<span class="built_in">id</span>):</span><br><span class="line">                    session.delete()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在urls.py中设置：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">...</span><br><span class="line">re_path(<span class="string">&#x27;^xadmin/&#x27;</span>, xadmin.site.urls),</span><br><span class="line">...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>然后在settings.py中注册中间件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">   MIDDLEWARE = [</span><br><span class="line">   ...</span><br><span class="line">   </span><br><span class="line">   <span class="string">&#x27;utils.xadminauth.XadminMiddleware&#x27;</span>,</span><br><span class="line">   ...</span><br><span class="line">   ]</span><br><span class="line">SESSION_COOKIE_AGE = <span class="number">1209600</span>  <span class="comment"># 设置过期时间</span></span><br><span class="line">   SESSION_SAVE_EVERY_REQUEST = Ture  <span class="comment"># 每次请求都更新</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>【参考】 <a href="https://blog.csdn.net/Python_anning">https://blog.csdn.net/Python_anning</a></p><h2 id="50、Django-restful-多个models数据表序列化合并返回（一次请求返回多个序列化器数据）"><a href="#50、Django-restful-多个models数据表序列化合并返回（一次请求返回多个序列化器数据）" class="headerlink" title="50、Django restful 多个models数据表序列化合并返回（一次请求返回多个序列化器数据）"></a>50、Django restful 多个models数据表序列化合并返回（一次请求返回多个序列化器数据）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入第三方包</span></span><br><span class="line">pip install django-crispy-forms==<span class="number">1.7</span><span class="number">.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在settings.py中添加应用</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">...</span><br><span class="line"><span class="string">&#x27;drf_multiple_model&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">...</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在views.py中使用</span></span><br><span class="line">    <span class="keyword">from</span> drf_multiple_model.pagination <span class="keyword">import</span> MultipleModelLimitOffsetPagination</span><br><span class="line">    <span class="keyword">from</span> drf_multiple_model.views <span class="keyword">import</span> ObjectMultipleModelAPIView</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">LimitPagination</span>(<span class="title class_ inherited__">MultipleModelLimitOffsetPagination</span>):</span><br><span class="line">        <span class="comment"># 多个models数据表联合查询，分页，每页限制数据10条</span></span><br><span class="line">        default_limit = <span class="number">10</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">StudentSerializers</span>(serializers.ModelSerializer):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;学生表序列化器&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># merchant = MerchantSerializers()</span></span><br><span class="line">        </span><br><span class="line">        register_time = serializers.DateTimeField(read_only=<span class="literal">True</span>, <span class="built_in">format</span>=<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">            model = Student</span><br><span class="line">            fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ClassesSerializers</span>(serializers.ModelSerializer):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;班级表序列化器&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># merchant = MerchantSerializers()</span></span><br><span class="line">        </span><br><span class="line">        add_time = serializers.DateTimeField(read_only=<span class="literal">True</span>, <span class="built_in">format</span>=<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">            model = Classes</span><br><span class="line">            fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">SchoolSerializers</span>(serializers.ModelSerializer):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;学校表序列化器&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># merchant = MerchantSerializers()</span></span><br><span class="line">        </span><br><span class="line">        add_time = serializers.DateTimeField(read_only=<span class="literal">True</span>, <span class="built_in">format</span>=<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">            model = School</span><br><span class="line">            fields = <span class="string">&#x27;__all__&#x27;</span>      </span><br><span class="line">            </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">StudentInfo</span>(<span class="title class_ inherited__">ObjectMultipleModelAPIView</span>):</span><br><span class="line">        <span class="comment"># 获取学生信息，班级信息，学校信息</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">            uid = request.GET.get(<span class="string">&#x27;uid&#x27;</span>, <span class="string">&#x27;&#x27;</span>)  <span class="comment"># 学生id</span></span><br><span class="line">            cid = request.GET.get(<span class="string">&#x27;cid&#x27;</span>, <span class="string">&#x27;&#x27;</span>)  <span class="comment"># 班级id</span></span><br><span class="line">            sid = request.GET.get(<span class="string">&#x27;sid&#x27;</span>, <span class="string">&#x27;&#x27;</span>)  <span class="comment"># 学校id</span></span><br><span class="line">            </span><br><span class="line">            self.querylist = [</span><br><span class="line">                &#123;<span class="string">&#x27;queryset&#x27;</span>: Student.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=uid).order_by(<span class="string">&#x27;-id&#x27;</span>),</span><br><span class="line">                    <span class="string">&#x27;serializer_class&#x27;</span>:  StudentSerializers, <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;student&#x27;</span>, &#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;queryset&#x27;</span>: Classes.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=cid).order_by(<span class="string">&#x27;-id&#x27;</span>),</span><br><span class="line">                    <span class="string">&#x27;serializer_class&#x27;</span>:  ClassesSerializers, <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;classes&#x27;</span>, &#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;queryset&#x27;</span>: School.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=sid).order_by(<span class="string">&#x27;-id&#x27;</span>),</span><br><span class="line">                    <span class="string">&#x27;serializer_class&#x27;</span>:  SchoolSerializers, <span class="string">&#x27;label&#x27;</span>: <span class="string">&#x27;school&#x27;</span>, &#125;,</span><br><span class="line">            ]</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">return</span> self.<span class="built_in">list</span>(request, *args, **kwargs)</span><br><span class="line">    </span><br><span class="line">        pagination_class = LimitPagination</span><br></pre></td></tr></table></figure><h2 id="51、-Django序列化器返回外键关联数据"><a href="#51、-Django序列化器返回外键关联数据" class="headerlink" title="51、 Django序列化器返回外键关联数据"></a>51、 Django序列化器返回外键关联数据</h2><p>通过 related_name&#x3D;’goods_price’把两个表关联起来，当返回Goods的信息时也会返回相应的GoodsPrice信息</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GoodsPriceSerializers</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;商品价格表序列化器&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = GoodsPrice</span><br><span class="line">        fields = [<span class="string">&#x27;price&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoodsSerializers</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;商品表序列化器&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    goods_price = GoodsPriceSerializers(many=<span class="literal">True</span>, read_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Goods</span><br><span class="line">        fields = [<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;goods_price&#x27;</span>]</span><br><span class="line">        depth = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Goods</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;商品表&quot;&quot;&quot;</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">&#x27;商品名称&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;goods&#x27;</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;商品信息表&#x27;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoodsPrice</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;商品价格表,通过外键关联商品信息表&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">10</span>, decimal_places=<span class="number">2</span>, default=<span class="number">0</span>, verbose_name=<span class="string">&#x27;售价&#x27;</span>)</span><br><span class="line">    goods = models.ForeignKey(to=<span class="string">&#x27;Goods&#x27;</span>, related_name=<span class="string">&#x27;goods_price&#x27;</span>, on_delete=models.SET_NULL, blank=<span class="literal">True</span>, null=<span class="literal">True</span>,verbose_name=<span class="string">&#x27;商品&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(self.price)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        managed = <span class="literal">True</span></span><br><span class="line">        db_table = <span class="string">&#x27;goodsPrice&#x27;</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;商品售价&#x27;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure><h2 id="52、python-Django通过User-Agent判断请求来源是微信扫一扫或者是支付宝扫一扫"><a href="#52、python-Django通过User-Agent判断请求来源是微信扫一扫或者是支付宝扫一扫" class="headerlink" title="52、python Django通过User Agent判断请求来源是微信扫一扫或者是支付宝扫一扫"></a>52、python Django通过User Agent判断请求来源是微信扫一扫或者是支付宝扫一扫</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Footest</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">     <span class="comment"># print(request.META)</span></span><br><span class="line">     <span class="keyword">if</span> <span class="string">&#x27;MicroMessenger&#x27;</span> <span class="keyword">in</span> request.META[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>]:</span><br><span class="line">         <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;访问来源是微信&#x27;</span>&#125;)</span><br><span class="line">     <span class="keyword">elif</span> <span class="string">&#x27;AlipayClient&#x27;</span> <span class="keyword">in</span> request.META[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>]:</span><br><span class="line">         <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;访问来源是支付宝&#x27;</span>&#125;)</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;访问来源是其他&#x27;</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>User Agent中文名为用户代理，简称 UA，它是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。</p><p>浏览器的 UA 字串</p><p>标准格式为： 浏览器标识 (操作系统标识; 加密等级标识; 浏览器语言) 渲染引擎标识 版本信息</p><p>获取user-Agent 之后，<br>通过识别MicroMessenger或者AlipayClient这样的关键字应该就可以判断是微信还是支付宝<br>【参考文章】 <a href="https://blog.csdn.net/fly910905/article/details/82498813?utm_source=blogxgwz4">https://blog.csdn.net/fly910905/article/details/82498813?utm_source=blogxgwz4</a></p><h2 id="53、xadmin后台集成’导入‘插件，导入excel文件"><a href="#53、xadmin后台集成’导入‘插件，导入excel文件" class="headerlink" title="53、xadmin后台集成’导入‘插件，导入excel文件"></a>53、xadmin后台集成’导入‘插件，导入excel文件</h2><p>效果图：</p><p><img src="https://img-blog.csdnimg.cn/20190426190357134.png" alt="在这里插入图片描述"></p><p>1、添加</p><p>在虚拟环境根目录\Lib\site-packages\xadmin\plugins中添加excel.py文件</p><p><img src="https://img-blog.csdnimg.cn/20190426190440451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> xadmin.views <span class="keyword">import</span> BaseAdminPlugin, ListAdminView</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader</span><br><span class="line"><span class="keyword">import</span> xadmin</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListExcelImportPlugin</span>(<span class="title class_ inherited__">BaseAdminPlugin</span>):</span><br><span class="line">    <span class="comment"># 重写init_request</span></span><br><span class="line">    import_excel = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_request</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> self.import_excel</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">block_top_toolbar</span>(<span class="params">self, context, nodes</span>):</span><br><span class="line">        <span class="comment"># 这里 xadmin/excel/model_list.top_toolbar.import.html 是自己写的html文件</span></span><br><span class="line">      nodes.append(loader.render_to_string(<span class="string">&quot;xadmin/excel/model_list.top_toolbar.import.html&quot;</span>))</span><br><span class="line"></span><br><span class="line">xadmin.site.register_plugin(ListExcelImportPlugin, ListAdminView)</span><br></pre></td></tr></table></figure><p>在虚拟环境根目录\Lib\site-packages\xadmin\plugins__init__.py中</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PLUGINS = (</span><br><span class="line">...</span><br><span class="line">    <span class="string">&#x27;excel&#x27;</span>,</span><br><span class="line">...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>2、添加html文件</p><p><img src="https://img-blog.csdnimg.cn/20190426190455263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在虚拟环境根目录\Lib\site-packages\xadmin\templates\xadmin\中增加文件夹excel,在文件夹中添加model_list.top_toolbar.import.html文件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    &#123;% load i18n %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group export&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle btn btn-default btn-sm&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon-share&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 导入数据 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span> <span class="attr">role</span>=<span class="string">&quot;menu&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;dLabel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#export-modal-import-excel&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon-circle-arrow-down&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 导入</span><br><span class="line">            Excel<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;export-modal-import-excel&quot;</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--&#123;% csrf_token %&#125;--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span>×<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span>&gt;</span>导入 Excel<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;fileChange(this)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;excel&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit_upload&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>&#123;% trans &quot;Close&quot; %&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit_upload_b&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon-share&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 导入</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal-content --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal-dalog --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fileChange</span>(<span class="params">target</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//检测上传文件的类型</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> imgName = <span class="variable language_">document</span>.<span class="property">all</span>.<span class="property">submit_upload</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ext, idx;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (imgName == <span class="string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">all</span>.<span class="property">submit_upload_b</span>.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;请选择需要上传的 xls 文件!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            idx = imgName.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (idx != -<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                ext = imgName.<span class="title function_">substr</span>(idx + <span class="number">1</span>).<span class="title function_">toUpperCase</span>();</span></span><br><span class="line"><span class="language-javascript">                ext = ext.<span class="title function_">toLowerCase</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (ext != <span class="string">&#x27;xls&#x27;</span> &amp;&amp; ext != <span class="string">&#x27;xlsx&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">document</span>.<span class="property">all</span>.<span class="property">submit_upload_b</span>.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;只能上传 .xls 类型的文件!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="property">all</span>.<span class="property">submit_upload_b</span>.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;只能上传 .xls 类型的文件!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;#submit_upload_b&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> form_data = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> file_info = $(<span class="string">&#x27;#submit_upload&#x27;</span>)[<span class="number">0</span>].<span class="property">files</span>[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">            form_data.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, file_info);</span></span><br><span class="line"><span class="language-javascript">            form_data.<span class="title function_">append</span>(<span class="string">&#x27;file_source&#x27;</span>, $(<span class="string">&#x27;.breadcrumb li&#x27;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">text</span>().<span class="title function_">trim</span>());</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> url = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">protocol</span> + <span class="string">&#x27;//&#x27;</span> + <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">host</span> + <span class="string">&#x27;/importkdorderno/&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: url,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: form_data,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">beforeSend</span>: <span class="keyword">function</span> (<span class="params">xhr</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;X-CSRFToken&quot;</span>, $.<span class="title function_">getCookie</span>(<span class="string">&quot;csrftoken&quot;</span>))</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">processData</span>: <span class="literal">false</span>,  <span class="comment">// tell jquery not to process the data</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">contentType</span>: <span class="literal">false</span>, <span class="comment">// tell jquery not to set contentType</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(res.<span class="property">msg</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">reload</span>();</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、在views.py处理上传的excel文件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ImportKDOrderNo</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        file = request.FILES.get(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">        <span class="comment"># read = InMemoryUploadedFile().open()</span></span><br><span class="line">        data = pd.read_excel(file)  <span class="comment"># 使用pandas处理excel文件</span></span><br><span class="line">file_source = request.POST.get(<span class="string">&#x27;file_source&#x27;</span>, <span class="string">&#x27;&#x27;</span>)  <span class="comment"># 文件来源</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;订单号&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;物流单号&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;文件格式有误，第一行第一列应该为【订单号】，第一行第二列应该为【物流单号】&#x27;</span>&#125;)</span><br><span class="line">        ordernos = data[<span class="string">&#x27;订单号&#x27;</span>]</span><br><span class="line">        logistics = data[<span class="string">&#x27;物流单号&#x27;</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ordernos)):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;订单号&#x27;</span>, ordernos[i], <span class="string">&#x27;物流单号&#x27;</span>, logistics[i])</span><br><span class="line">          </span><br><span class="line">        <span class="keyword">return</span> Response(data=&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;上传成功&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p>4、在urls.py中添加访问路由</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> 你的应用名称 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">&#x27;你的应用名称&#x27;</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 其他路由</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># 导入物流单号</span></span><br><span class="line">    path(<span class="string">&#x27;importkdorderno/&#x27;</span>, views.ImportKDOrderNo.as_view(), name=<span class="string">&#x27;importkdorderno&#x27;</span>),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="54、Django中查找今天进账金额"><a href="#54、Django中查找今天进账金额" class="headerlink" title="54、Django中查找今天进账金额"></a>54、Django中查找今天进账金额</h2><p>views.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CountFee</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line"><span class="comment"># 获取当前时间的年月日，然后使用聚合函数添加fee字段的值</span></span><br><span class="line">    year = datetime.now().year</span><br><span class="line">        month = datetime.now().month</span><br><span class="line">        day = datetime.now().day</span><br><span class="line">        count_fees = FeeDetail.objects.<span class="built_in">filter</span>(addtime__year=year, addtime__month=month, addtime__day=day).aggregate(Sum(<span class="string">&#x27;fee&#x27;</span>))</span><br><span class="line">        all_fee = count_fees[<span class="string">&#x27;fee__sum&#x27;</span>] <span class="keyword">if</span> count_fees[<span class="string">&#x27;fee__sum&#x27;</span>] <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="built_in">print</span>(all_fee)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;data&#x27;</span>: &#123;<span class="string">&#x27;all_fee&#x27;</span>: all_fee&#125;&#125;)</span><br></pre></td></tr></table></figure><h2 id="55、判断是什么系统"><a href="#55、判断是什么系统" class="headerlink" title="55、判断是什么系统"></a>55、判断是什么系统</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> platform</span><br><span class="line">PlATFORM = platform.system()</span><br><span class="line"><span class="keyword">if</span> PlATFORM == <span class="string">&quot;Linux&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;其他&#x27;</span>) </span><br></pre></td></tr></table></figure><h2 id="56、sql查询"><a href="#56、sql查询" class="headerlink" title="56、sql查询"></a>56、sql查询</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 联合更新</span></span><br><span class="line">update malluser <span class="built_in">set</span> master_master_id=<span class="number">3</span> where master_id <span class="keyword">in</span> (select a.<span class="built_in">id</span> <span class="keyword">from</span> (select <span class="built_in">id</span> <span class="keyword">from</span>  malluser where <span class="built_in">id</span> like <span class="string">&#x27;15%&#x27;</span>)a) </span><br><span class="line"><span class="comment"># 统计某字段重复数据</span></span><br><span class="line">SELECT phone, COUNT(*) AS sumCount FROM malluser GROUP BY phone HAVING sumCount &gt; <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="57、-xadmin后台删除数据出现错误"><a href="#57、-xadmin后台删除数据出现错误" class="headerlink" title="57、 xadmin后台删除数据出现错误"></a>57、 xadmin后台删除数据出现错误</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">`get_deleted_objects() takes <span class="number">3</span> positional arguments but <span class="number">5</span> were given`</span><br></pre></td></tr></table></figure><p>这是由于Django2.1版本和xadmin不兼容导致的</p><p>知道虚拟环境\Lib\site-packages\xadmin\plugins\actions.py</p><p>修改93行，</p><p>把</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">deletable_objects, model_count, perms_needed, protected = get_deleted_objects(</span><br><span class="line">            queryset, self.opts, self.user, self.admin_site, using)</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">deletable_objects, model_count, perms_needed, protected = get_deleted_objects(</span><br><span class="line">            queryset, self.user, self.admin_site)</span><br></pre></td></tr></table></figure><p>然后在adminx.py文件中对应的模型类中允许删除</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MaterialAdmin</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;素材库分类&quot;&quot;&quot;</span></span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;class_id&#x27;</span>, <span class="string">&#x27;is_delete&#x27;</span>, <span class="string">&#x27;addtime&#x27;</span>]</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_delete_permission</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="58、xdamin限制用户点击"><a href="#58、xdamin限制用户点击" class="headerlink" title="58、xdamin限制用户点击"></a>58、xdamin限制用户点击</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//如果登录z=xadmin后台的账号不是【root】的就不能点击更新操作</span><br><span class="line">    var master_name = $(<span class="string">&#x27;#top-nav&#x27;</span>).find(<span class="string">&#x27;strong&#x27;</span>).text();</span><br><span class="line">        master_name =  master_name.substring(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span>(master_name != <span class="string">&#x27;root&#x27;</span>)&#123;</span><br><span class="line">            $(<span class="string">&quot;.grid-item a&quot;</span>).each(function(index, element) &#123;</span><br><span class="line">                $(this).attr(<span class="string">&#x27;href&#x27;</span>,<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="59、获取公众号关注url"><a href="#59、获取公众号关注url" class="headerlink" title="59、获取公众号关注url"></a>59、获取公众号关注url</h2><p>在微信网页版，打开公众号，点击右上角“…”，在弹框中选择右下角中间的“查看历史记录”，然后在弹框中选择左上角倒数第一个，“用默认浏览器打开”，就可以在打开的浏览器中获取该公众号的关注url，当把这个url发给好友时，好友点开的就是去关注公众号的页面。</p><h2 id="60、xadmin后台用户操作表权限"><a href="#60、xadmin后台用户操作表权限" class="headerlink" title="60、xadmin后台用户操作表权限"></a>60、xadmin后台用户操作表权限</h2><p>虚拟环境根目录\Lib\site-packages\xadmin\views\base.py</p><p>可以找到：</p><p><img src="https://img-blog.csdnimg.cn/20190627140512311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在项目子应用下的adminx.py中使用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xadmin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> machine.models <span class="keyword">import</span> Machine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MachineAdmin</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    list_display = [<span class="string">&#x27;code&#x27;</span>,]  <span class="comment"># 显示的字段</span></span><br><span class="line"></span><br><span class="line">    search_fields = [<span class="string">&#x27;code&#x27;</span>]  <span class="comment"># 搜索的字段</span></span><br><span class="line">    list_filter = [<span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;is_delete&#x27;</span>] <span class="comment"># 过滤的字段</span></span><br><span class="line">    ordering = (<span class="string">&#x27;-id&#x27;</span>,) <span class="comment"># 按id降序排序</span></span><br><span class="line">    list_editable = [<span class="string">&#x27;is_delete&#x27;</span>, ]  <span class="comment"># 数据即时编辑</span></span><br><span class="line">    list_per_page = <span class="number">30</span>  <span class="comment"># 每页显示数据数量</span></span><br><span class="line">    model_icon = <span class="string">&#x27;fa fa-cog fa-spin&#x27;</span>  <span class="comment"># 左侧显示的小图标</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_delete_permission</span>(<span class="params">self, *args, **kwargs</span>): </span><br><span class="line">        <span class="comment"># 删除权限</span></span><br><span class="line">        <span class="keyword">if</span> self.request.user.is_superuser:  <span class="comment"># 管理员才能增加</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_add_permission</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> self.request.user.is_superuser:  <span class="comment"># 管理员才能增加</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_change_permission</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> self.request.user.is_superuser: <span class="comment"># 管理员才能修改</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">queryset</span>(<span class="params">self</span>):</span><br><span class="line">        qs = <span class="built_in">super</span>(MachineAdmin, self).queryset()</span><br><span class="line">        <span class="keyword">if</span> self.request.user.is_superuser:  <span class="comment"># 管理员可以查看所有</span></span><br><span class="line">            <span class="keyword">return</span> qs</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 登录用户只能看到自己修改的数据</span></span><br><span class="line">            <span class="keyword">return</span> qs.<span class="built_in">filter</span>(master_id=self.request.user.last_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(MallMachine, MallMachineAdmin)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="61、使用nginx部署项目"><a href="#61、使用nginx部署项目" class="headerlink" title="61、使用nginx部署项目"></a>61、使用nginx部署项目</h2><p>先在&#x2F;etc&#x2F;nginx&#x2F;sites-available中创建一个配置文件，文件名为test(注意没有后缀):</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设定虚拟主机配置</span></span><br><span class="line">    server &#123;</span><br><span class="line">        <span class="comment">#侦听80端口</span></span><br><span class="line">        listen <span class="number">80</span>;</span><br><span class="line">        listen <span class="number">443</span> ssl;</span><br><span class="line">        <span class="comment">#定义使用 www.nginx.cn访问</span></span><br><span class="line"><span class="comment">#ssl on;</span></span><br><span class="line">        server_name  xxx.xxx.com;</span><br><span class="line">        <span class="comment">#定义服务器的默认网站根目录位置</span></span><br><span class="line">        root /root/项目名称;</span><br><span class="line">ssl_session_timeout 5m; </span><br><span class="line">        ssl_certificate   /etc/nginx/cert/xxx.pem;</span><br><span class="line">        ssl_certificate_key  /etc/nginx/cert/xxx.key;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1<span class="number">.1</span> TLSv1<span class="number">.2</span>;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        <span class="comment">#设定本虚拟主机的访问日志</span></span><br><span class="line">        <span class="comment">#access_log  logs/nginx.access.log  main;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">#默认请求</span></span><br><span class="line">        location / &#123;</span><br><span class="line">            <span class="comment">#倒入了uwsgi的配置</span></span><br><span class="line">            include uwsgi_params; </span><br><span class="line">    client_max_body_size50m;</span><br><span class="line">            <span class="comment">#连接uwsgi的超时时间</span></span><br><span class="line">           <span class="comment"># uwsgi_connect_timeout 30; </span></span><br><span class="line">     <span class="comment">#设定了uwsig服务器位置</span></span><br><span class="line">     uwsgi_pass <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8002</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        location /static&#123;</span><br><span class="line">      alias /root/项目名称/static;</span><br><span class="line">        &#125;</span><br><span class="line">location /media &#123;</span><br><span class="line">alias /root/项目名称/media;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中xxx.xxx.com表示域名.如果没有https，就使用#把ssl注释掉就可以了。</p><p>然后把test映射到&#x2F;etc&#x2F;nginx&#x2F;sites-enabled</p><p>命令</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ln -s /etc/nginx/sites-available/test /etc/nginx/sites-enabled/test</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>即可<br>注意：<br>uwsgi中配置listen&#x3D;1024时，启动uwsgi时可能会报错：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">django + uwsgi + nginx 日志Listen queue size <span class="keyword">is</span> greater than the system <span class="built_in">max</span> net.core.somaxconn (<span class="number">128</span>).</span><br></pre></td></tr></table></figure><p>解决方法:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">修改系统参数</span><br><span class="line"></span><br><span class="line">/proc/sys/net/ipv4/tcp_max_syn_backlog  原来<span class="number">2048</span>    改为<span class="number">8192</span></span><br><span class="line">/proc/sys/net/core/somaxconn原来<span class="number">128</span>     改为<span class="number">262144</span></span><br></pre></td></tr></table></figure><p>重启nginx</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="62、xadmin后台发送邮件找回密码"><a href="#62、xadmin后台发送邮件找回密码" class="headerlink" title="62、xadmin后台发送邮件找回密码"></a>62、xadmin后台发送邮件找回密码</h2><p><img src="https://img-blog.csdnimg.cn/20190710230444358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>输入你用户绑定的邮箱</p><p><img src="https://img-blog.csdnimg.cn/20190710230454725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>想要发送邮件，需要在settings.py中设置邮件发送器</p><p>settings.py最下面增加</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ------------------------邮箱配置-----------------------------------------</span></span><br><span class="line">EMAIL_BACKEND = <span class="string">&#x27;django.core.mail.backends.smtp.EmailBackend&#x27;</span> <span class="comment">#把要发送的邮件显示再控制台上，方便调试</span></span><br><span class="line">EMAIL_USE_SSL = <span class="literal">True</span></span><br><span class="line">EMAIL_HOST = <span class="string">&#x27;smtp.qq.com&#x27;</span>  <span class="comment"># 如果是 163 改成 smtp.163.com</span></span><br><span class="line">EMAIL_PORT = <span class="number">465</span></span><br><span class="line">EMAIL_HOST_USER = <span class="string">&#x27;邮箱账号&#x27;</span> <span class="comment"># 帐号</span></span><br><span class="line">EMAIL_HOST_PASSWORD = <span class="string">&#x27;授权码&#x27;</span>  <span class="comment"># 到邮箱里开通</span></span><br><span class="line">DEFAULT_FROM_EMAIL = EMAIL_HOST_USER</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于django2与xadmin有些地方不兼容，需要修改源码：</p><p>找到虚拟环境根目录\Lib\site-packages\xadmin\plugins\passwords.py</p><p>在passwords.py文件中大概79行，修改为</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> password_reset_confirm(request=request, uidb36=uidb36, token=token,</span><br><span class="line">                                      template_name=self.password_reset_confirm_template,</span><br><span class="line">                                      token_generator=self.password_reset_token_generator,</span><br><span class="line">                                      set_password_form=self.password_reset_set_form,</span><br><span class="line">                                      post_reset_redirect=self.get_admin_url(<span class="string">&#x27;xadmin_password_reset_complete&#x27;</span>),</span><br><span class="line">                                      current_app=self.admin_site.name, extra_context=context).dispatch(request=request,</span><br><span class="line">                                                                                                        uidb64=uidb36,token=token)</span><br><span class="line">             </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>找到虚拟环境根目录Lib\site-packages\django\contrib\auth\views.py</p><p>在views.py文件中大概258行，增加：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 成功后跳转路由,根据自己实际来定</span></span><br><span class="line">self.success_url = self.request.build_absolute_uri(<span class="string">&#x27;/&#x27;</span>) + <span class="string">&#x27;xadmin/&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020052620533440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="63、xadmin外键下拉框添加过滤"><a href="#63、xadmin外键下拉框添加过滤" class="headerlink" title="63、xadmin外键下拉框添加过滤"></a>63、xadmin外键下拉框添加过滤</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MallGoodsAdmin</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;商品管理&quot;&quot;&quot;</span></span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;show_photo&#x27;</span>, <span class="string">&#x27;nickname&#x27;</span>, <span class="string">&#x27;merchant&#x27;</span>, <span class="string">&#x27;goods_class&#x27;</span>, <span class="string">&#x27;label&#x27;</span>,]</span><br><span class="line">    search_fields = [<span class="string">&#x27;nickname&#x27;</span>]</span><br><span class="line">    list_filter = [<span class="string">&#x27;goods_class&#x27;</span>, <span class="string">&#x27;label&#x27;</span>,]</span><br><span class="line">    model_icon = <span class="string">&#x27;fa fa-bars&#x27;</span></span><br><span class="line">    list_editable = [<span class="string">&#x27;goods_class&#x27;</span>, ]</span><br><span class="line">    <span class="comment">#,重写虚拟环境根目录下\Lib\site-packages\xadmin\views\edit.py中的formfield_for_dbfield</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">formfield_for_dbfield</span>(<span class="params">self, db_field, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 对MallGoodsClass这个表项的下拉框选择进行过滤</span></span><br><span class="line">        <span class="comment"># MallGoods中有一个goods_class商品分类外键MallGoodsClass，过滤掉外键MallGoodsClass中 </span></span><br><span class="line">        <span class="comment"># master_class为空的值</span></span><br><span class="line">        <span class="keyword">if</span> db_field.name == <span class="string">&quot;goods_class&quot;</span>:</span><br><span class="line">            kwargs[<span class="string">&quot;queryset&quot;</span>] = MallGoodsClass.objects.<span class="built_in">filter</span>(master_class__isnull=<span class="literal">False</span>)</span><br><span class="line">            <span class="comment"># 对assigned_recipient这个表项的下拉选择进行过滤</span></span><br><span class="line">        <span class="keyword">return</span> db_field.formfield(**<span class="built_in">dict</span>(**kwargs))</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().formfield_for_dbfield(db_field, **kwargs)</span><br><span class="line"></span><br><span class="line">xadmin.site.register(models.MallGoods, MallGoodsAdmin)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="64、xadmin即时编辑器去掉空标签"><a href="#64、xadmin即时编辑器去掉空标签" class="headerlink" title="64、xadmin即时编辑器去掉空标签"></a>64、xadmin即时编辑器去掉空标签</h2><p><img src="https://img-blog.csdnimg.cn/20190716151440115.png" alt="在这里插入图片描述"></p><p>虚拟环境根目录下\Lib\site-packages\xadmin\plugins\editable.py，在大概</p><p>129行增加：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">form.fields[fields[<span class="number">0</span>]].empty_label = <span class="literal">None</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190716151459680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="65、用户增加的小组件，让其他用户可见"><a href="#65、用户增加的小组件，让其他用户可见" class="headerlink" title="65、用户增加的小组件，让其他用户可见"></a>65、用户增加的小组件，让其他用户可见</h2><p>找到虚拟环境根目录\Lib\site-packages\xadmin\views\dashboard.py</p><p>在548行、554行</p><p><img src="https://img-blog.csdnimg.cn/20190723175537371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>改为：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@filter_hook</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_widgets</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.widget_customiz:</span><br><span class="line">            portal_pos = UserSettings.objects.<span class="built_in">filter</span>(</span><br><span class="line">               key=self.get_portal_key())</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(portal_pos):</span><br><span class="line">                portal_pos = portal_pos[<span class="number">0</span>].value</span><br><span class="line">                widgets = []</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> portal_pos:</span><br><span class="line">                    user_widgets = <span class="built_in">dict</span>([(uw.<span class="built_in">id</span>, uw) <span class="keyword">for</span> uw <span class="keyword">in</span> UserWidget.objects.<span class="built_in">filter</span>(page_id=self.get_page_id())])</span><br><span class="line">                    <span class="keyword">for</span> col <span class="keyword">in</span> portal_pos.split(<span class="string">&#x27;|&#x27;</span>):</span><br><span class="line">                        ws = []</span><br><span class="line">                        <span class="keyword">for</span> wid <span class="keyword">in</span> col.split(<span class="string">&#x27;,&#x27;</span>):</span><br><span class="line">                            <span class="keyword">try</span>:</span><br><span class="line">                                widget = user_widgets.get(<span class="built_in">int</span>(wid))</span><br><span class="line">                                <span class="keyword">if</span> widget:</span><br><span class="line">                                    ws.append(self.get_widget(widget))</span><br><span class="line">                            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                                <span class="keyword">import</span> logging</span><br><span class="line">                                logging.error(e, exc_info=<span class="literal">True</span>)</span><br><span class="line">                        widgets.append(ws)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> widgets</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.get_init_widget()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="66、pip-install-uwsgi出错"><a href="#66、pip-install-uwsgi出错" class="headerlink" title="66、pip install uwsgi出错"></a>66、pip install uwsgi出错</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plugins/python/uwsgi_python.h:<span class="number">2</span>:<span class="number">20</span>: fatal error: Python.h: No such file <span class="keyword">or</span> directory</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先安装python3环境</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install python3-dev</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后再虚拟环境中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure><h2 id="66、xadmin后台加载数据慢，解决方案"><a href="#66、xadmin后台加载数据慢，解决方案" class="headerlink" title="66、xadmin后台加载数据慢，解决方案"></a>66、xadmin后台加载数据慢，解决方案</h2><p>list_filter: 过滤器要慎用，不要使用类似id这些数据量大的字段</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MallUserAdmin</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;用户管理&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;tp_icon&#x27;</span>, <span class="string">&#x27;nickname&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>, <span class="string">&#x27;level&#x27;</span>, <span class="string">&#x27;balance&#x27;</span>, <span class="string">&#x27;province&#x27;</span>, <span class="string">&#x27;city&#x27;</span>, <span class="string">&#x27;quxian&#x27;</span>]  <span class="comment"># 显示字段</span></span><br><span class="line">    search_fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;nickname&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>]  <span class="comment"># 搜索</span></span><br><span class="line">    list_filter = [<span class="string">&#x27;level&#x27;</span>, <span class="string">&#x27;province&#x27;</span>, <span class="string">&#x27;city&#x27;</span>, <span class="string">&#x27;quxian&#x27;</span>]  <span class="comment"># 过滤器</span></span><br><span class="line">    <span class="comment"># list_filter = [&#x27;id&#x27;, &#x27;level&#x27;, &#x27;province&#x27;, &#x27;city&#x27;, &#x27;quxian&#x27;]  # 如果加id，xadmin加载回来的数据就会很慢，所以不要在过滤器上使用id</span></span><br><span class="line">    list_per_page = <span class="number">30</span>  <span class="comment"># 默认每页数量</span></span><br><span class="line">    model_icon = <span class="string">&#x27;fa fa-users&#x27;</span>  <span class="comment"># 左侧图标</span></span><br><span class="line">    ordering = [<span class="string">&#x27;-id&#x27;</span>]  <span class="comment"># 排序</span></span><br><span class="line">    readonly_fields = [<span class="string">&#x27;subscribe&#x27;</span>, <span class="string">&#x27;wx_openid&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>]  <span class="comment"># 只读字段</span></span><br><span class="line">    is_addbalance = <span class="literal">True</span>   <span class="comment"># 加载自定义的插件</span></span><br><span class="line">    relfield_style = <span class="string">&#x27;fk-ajax&#x27;</span>  <span class="comment"># 其他表如果外键到用户表就做ajax搜索查询，不一次性加载数据</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="67-、xadmin导出插件处理，增加导出勾选数据项"><a href="#67-、xadmin导出插件处理，增加导出勾选数据项" class="headerlink" title="67 、xadmin导出插件处理，增加导出勾选数据项"></a>67 、xadmin导出插件处理，增加导出勾选数据项</h2><p>常规的导出只有两个选择【导出表头】、【导出全部数据】</p><p><img src="https://img-blog.csdnimg.cn/20190917141511283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>现在想要做的是增加一个选择，即【导出表头】、【导出全部数据】、【导出勾选数据】，如下图：</p><p><img src="https://img-blog.csdnimg.cn/20190917141839822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>需要修改xadmin源代码，具体如下</p><h4 id="1、加载js文件"><a href="#1、加载js文件" class="headerlink" title="1、加载js文件"></a>1、加载js文件</h4><p>找到虚拟环境\Lib\site-packages\xadmin\views\list.py，在607行增加’xadmin.plugin.importexport.js’，如下图所示</p><p><img src="https://img-blog.csdnimg.cn/20190917141853832.png" alt="在这里插入图片描述"></p><h4 id="2、修改export-py，后端处理下载文件"><a href="#2、修改export-py，后端处理下载文件" class="headerlink" title="2、修改export.py，后端处理下载文件"></a>2、修改export.py，后端处理下载文件</h4><p>找到虚拟环境\Lib\site-packages\xadmin\plugins\export.py</p><p>在84行把rows &#x3D; context[‘results’]修改成如下函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新增导出所选数据</span></span><br><span class="line"><span class="comment"># rows = context[&#x27;results&#x27;]  </span></span><br><span class="line">rows = []</span><br><span class="line">select_across = self.request.GET.get(<span class="string">&#x27;_select_across&#x27;</span>, <span class="literal">False</span>) == <span class="string">&#x27;1&#x27;</span></span><br><span class="line">selected = self.request.GET.get(<span class="string">&#x27;_selected_actions&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> self.request.GET.get(<span class="string">&#x27;selected&#x27;</span>, <span class="string">&#x27;off&#x27;</span>) == <span class="string">&#x27;on&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> select_across:</span><br><span class="line">        selected_pk = selected.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> context[<span class="string">&#x27;results&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span>(i[<span class="string">&#x27;object&#x27;</span>].<span class="built_in">id</span>) <span class="keyword">in</span> selected_pk:</span><br><span class="line">                rows.append(i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rows = context[<span class="string">&#x27;results&#x27;</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    rows = context[<span class="string">&#x27;results&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2019091714200418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>3、 修改model_list.top_toolbar.exports.html<br>找到虚拟环境\Lib\site-packages\xadmin\templates\xadmin\blocks\model_list.top_toolbar.exports.html</p><p>使用以下代码覆盖原文件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% load i18n %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group export&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;export-menu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-toggle btn btn-default btn-sm&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-share&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> &#123;% trans &quot;Export&quot; %&#125; <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu&quot;</span> <span class="attr">role</span>=<span class="string">&quot;menu&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;dLabel&quot;</span>&gt;</span></span><br><span class="line">        &#123;% for et in export_types %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#export-modal-&#123;&#123;et.type&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-arrow-circle-down&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">i</span>&gt;</span> &#123;% trans &quot;Export&quot; %&#125; &#123;&#123;et.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;% for et in export_types %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;export-modal-&#123;&#123;et.type&#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span>&gt;</span>&#123;% trans &quot;Export&quot; %&#125; &#123;&#123;et.name&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">                        &#123;&#123; form_params|safe &#125;&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;export_type&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123;et.type&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 增加 导出所选数据 一栏 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_selected_actions&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_select_across&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">                            &#123;% if et.type == &quot;xlsx&quot; %&#125;</span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;export_xlsx_header&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;on&quot;</span>&gt;</span></span><br><span class="line">                            &#123;% trans &quot;Export with table header.&quot; %&#125;</span><br><span class="line">                            &#123;% endif %&#125;</span><br><span class="line">                            &#123;% if et.type == &quot;xls&quot; %&#125;</span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;export_xls_header&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;on&quot;</span>&gt;</span></span><br><span class="line">                            &#123;% trans &quot;Export with table header.&quot; %&#125;</span><br><span class="line">                            &#123;% endif %&#125;</span><br><span class="line">                            &#123;% if et.type == &quot;csv&quot; %&#125;</span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;export_csv_header&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;on&quot;</span>&gt;</span></span><br><span class="line">                            &#123;% trans &quot;Export with table header.&quot; %&#125;</span><br><span class="line">                            &#123;% endif %&#125;</span><br><span class="line">                            &#123;% if et.type == &quot;xml&quot; %&#125;</span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;export_xml_format&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;on&quot;</span>&gt;</span></span><br><span class="line">                            &#123;% trans &quot;Export with format.&quot; %&#125;</span><br><span class="line">                            &#123;% endif %&#125;</span><br><span class="line">                            &#123;% if et.type == &quot;json&quot; %&#125;</span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;export_json_format&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;on&quot;</span>&gt;</span></span><br><span class="line">                            &#123;% trans &quot;Export with format.&quot; %&#125;</span><br><span class="line">                            &#123;% endif %&#125;</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;all&quot;</span> <span class="attr">value</span>=<span class="string">&quot;on&quot;</span>&gt;</span> &#123;% trans &quot;Export all data.&quot; %&#125;</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 增加 导出所选数据 一栏 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;selected&quot;</span> <span class="attr">value</span>=<span class="string">&quot;on&quot;</span>&gt;</span> 导出勾选数据</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>&#123;% trans &quot;Close&quot; %&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success myexport  glyphicon glyphicon-export &quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">class</span>=<span class="string">&quot;fa fa-share&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> &#123;% trans &quot;Export&quot; %&#125;</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal-content --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal-dalog --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal --&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 如果是订单导出，把待出货订单设置成待收货订单</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;.myexport&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 当把订单导出时，需要修改订单状态为待收货状态</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> url = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">protocol</span> + <span class="string">&#x27;//&#x27;</span> + <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">host</span> + <span class="string">&quot;/exportorder/&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;input[name=&#x27;_select_across&#x27;]&quot;</span>).<span class="title function_">val</span>($(<span class="string">&quot;input[name=&#x27;select_across&#x27;]&quot;</span>).<span class="title function_">val</span>());</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> ($(<span class="string">&quot;input[name=&#x27;selected&#x27;]&quot;</span>).<span class="title function_">is</span>(<span class="string">&#x27;:checked&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> arr = [];</span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">each</span>($(<span class="string">&#x27;.action-select&#x27;</span>), <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (<span class="literal">true</span> == $(<span class="variable language_">this</span>).<span class="title function_">prop</span>(<span class="string">&#x27;checked&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">                        arr.<span class="title function_">push</span>($(<span class="variable language_">this</span>).<span class="title function_">val</span>());</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(arr.<span class="property">length</span> == <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&#x27;请先勾选导出数据&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> arr = []</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> order_type = $(<span class="string">&#x27;.breadcrumb li&#x27;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">text</span>().<span class="title function_">trim</span>()</span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&#x27;.grid-item&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params">index, el</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    arr.<span class="title function_">push</span>($(el).<span class="title function_">find</span>(<span class="string">&#x27;td&#x27;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">text</span>().<span class="title function_">trim</span>())</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (($(<span class="string">&#x27;.breadcrumb &gt; li&#x27;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">text</span>()).<span class="title function_">indexOf</span>(<span class="string">&#x27;订单&#x27;</span>) != -<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 5秒后执行</span></span></span><br><span class="line"><span class="language-javascript">                <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">url</span>: url,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">data</span>: &#123;<span class="string">&#x27;orderlist&#x27;</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arr), <span class="string">&#x27;order_type&#x27;</span>: order_type,&#125;,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">beforeSend</span>: <span class="keyword">function</span> (<span class="params">xhr</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                            xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;X-CSRFToken&quot;</span>, $.<span class="title function_">getCookie</span>(<span class="string">&quot;csrftoken&quot;</span>))</span></span><br><span class="line"><span class="language-javascript">                        &#125;,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">reload</span>();</span></span><br><span class="line"><span class="language-javascript">                        &#125;,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">xhr</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="title function_">alert</span>(<span class="string">&quot;出现未知错误&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">reload</span>();</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                &#125;, <span class="number">5000</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="68、使用F查询更新用户重要数据"><a href="#68、使用F查询更新用户重要数据" class="headerlink" title="68、使用F查询更新用户重要数据"></a>68、使用F查询更新用户重要数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line"><span class="comment"># 使用F查询更新用户余额</span></span><br><span class="line">balance = <span class="number">5</span>  </span><br><span class="line">MallUser.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">1</span>).update(balance=F(<span class="string">&#x27;balance&#x27;</span>) + balance)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相当于sql的</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">update Malluser <span class="built_in">set</span> balance=balance + <span class="number">5</span> where <span class="built_in">id</span>=<span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="69、日志输出模块"><a href="#69、日志输出模块" class="headerlink" title="69、日志输出模块"></a>69、日志输出模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"><span class="comment"># 全局函数</span></span><br><span class="line">PlATFORM = platform.system()</span><br><span class="line"><span class="keyword">if</span> (PlATFORM == <span class="string">&quot;Linux&quot;</span>):</span><br><span class="line">    <span class="comment"># linux系统,文件保存在var下</span></span><br><span class="line">    SERVER_LOG_PATH = <span class="string">&#x27;/var/mylog.log&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># windows系统,文件保存在D盘下</span></span><br><span class="line">    SERVER_LOG_PATH = <span class="string">&#x27;D:\mylog.log&#x27;</span></span><br><span class="line"><span class="comment"># 定义一个logging的对象，命名为mylog</span></span><br><span class="line">LOGGER = logging.getLogger(<span class="string">&#x27;mylog&#x27;</span>)</span><br><span class="line"><span class="comment"># 设置级别为WARNING</span></span><br><span class="line">LOGGER.setLevel(logging.WARNING)</span><br><span class="line"><span class="comment"># 创建一个handler，用于写入日志文件</span></span><br><span class="line">fh = logging.FileHandler(SERVER_LOG_PATH, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">fh.setLevel(logging.WARNING)</span><br><span class="line"><span class="comment"># 定义handler的输出格式</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>, datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">fh.setFormatter(formatter)</span><br><span class="line"><span class="comment"># 给Logger添加handler</span></span><br><span class="line">LOGGER.addHandler(fh)</span><br><span class="line"><span class="comment"># 不在控制台显示</span></span><br><span class="line">LOGGER.propagate = <span class="literal">False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="70、字典排序"><a href="#70、字典排序" class="headerlink" title="70、字典排序"></a>70、字典排序</h2><p>字典在内存中发布是无序的，当想对键值或者键名进行排序时可以先把字典转成元组，这可以达到排序的目的。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score = &#123;<span class="string">&#x27;小明&#x27;</span>: &#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">90</span>, &#125;,</span><br><span class="line">     <span class="string">&#x27;小红&#x27;</span>: &#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">60</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">60</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">61</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">59</span>, &#125;,</span><br><span class="line">     <span class="string">&#x27;小黑&#x27;</span>: &#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">70</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">65</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">70</span>, &#125;,</span><br><span class="line">     <span class="string">&#x27;小白&#x27;</span>: &#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">80</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">65</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">80</span>, &#125;,</span><br><span class="line">     &#125;</span><br><span class="line"><span class="comment"># 对姓名进行排序，即对键名进行排序</span></span><br><span class="line">b = <span class="built_in">sorted</span>(score.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">show_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> info <span class="keyword">in</span> b:</span><br><span class="line">    <span class="comment"># print(info)</span></span><br><span class="line">    key, value = info[<span class="number">0</span>], info[<span class="number">1</span>]</span><br><span class="line">    show_str += <span class="string">&#x27;姓名：&#123;&#125;,平均分：&#123;&#125;，成绩：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(key,value[<span class="string">&#x27;avg_score&#x27;</span>], value) + <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;对姓名进行排序&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(show_str)</span><br><span class="line"><span class="comment"># 对平均分进行排序</span></span><br><span class="line">b = <span class="built_in">sorted</span>(score.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>][<span class="string">&#x27;avg_score&#x27;</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">show_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> info <span class="keyword">in</span> b:</span><br><span class="line">    <span class="comment"># print(info)</span></span><br><span class="line">    key, value = info[<span class="number">0</span>], info[<span class="number">1</span>]</span><br><span class="line">    show_str += <span class="string">&#x27;姓名：&#123;&#125;,平均分：&#123;&#125;，成绩：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(key,value[<span class="string">&#x27;avg_score&#x27;</span>], value) + <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;对平均分进行排序&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(show_str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对英语成绩进行排序</span></span><br><span class="line">b = <span class="built_in">sorted</span>(score.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>][<span class="string">&#x27;English&#x27;</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">show_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> info <span class="keyword">in</span> b:</span><br><span class="line">    <span class="comment"># print(info)</span></span><br><span class="line">    key, value = info[<span class="number">0</span>], info[<span class="number">1</span>]</span><br><span class="line">    show_str += <span class="string">&#x27;姓名：&#123;&#125;,平均分：&#123;&#125;，成绩：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(key,value[<span class="string">&#x27;avg_score&#x27;</span>], value) + <span class="string">&#x27;\r\n&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;对英语成绩进行排序&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(show_str)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">对姓名进行排序</span><br><span class="line">姓名：小黑,平均分：<span class="number">70</span>，成绩：&#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">70</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">65</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">70</span>&#125;</span><br><span class="line">姓名：小红,平均分：<span class="number">60</span>，成绩：&#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">60</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">60</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">61</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">59</span>&#125;</span><br><span class="line">姓名：小白,平均分：<span class="number">80</span>，成绩：&#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">80</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">65</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">80</span>&#125;</span><br><span class="line">姓名：小明,平均分：<span class="number">90</span>，成绩：&#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">90</span>&#125;</span><br><span class="line"></span><br><span class="line">对平均分进行排序</span><br><span class="line">姓名：小明,平均分：<span class="number">90</span>，成绩：&#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">90</span>&#125;</span><br><span class="line">姓名：小白,平均分：<span class="number">80</span>，成绩：&#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">80</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">65</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">80</span>&#125;</span><br><span class="line">姓名：小黑,平均分：<span class="number">70</span>，成绩：&#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">70</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">65</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">70</span>&#125;</span><br><span class="line">姓名：小红,平均分：<span class="number">60</span>，成绩：&#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">60</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">60</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">61</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">59</span>&#125;</span><br><span class="line"></span><br><span class="line">对英语成绩进行排序</span><br><span class="line">姓名：小白,平均分：<span class="number">80</span>，成绩：&#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">80</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">65</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">80</span>&#125;</span><br><span class="line">姓名：小明,平均分：<span class="number">90</span>，成绩：&#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">90</span>&#125;</span><br><span class="line">姓名：小黑,平均分：<span class="number">70</span>，成绩：&#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">70</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">65</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">70</span>&#125;</span><br><span class="line">姓名：小红,平均分：<span class="number">60</span>，成绩：&#123;<span class="string">&#x27;avg_score&#x27;</span>: <span class="number">60</span>, <span class="string">&#x27;English&#x27;</span>: <span class="number">60</span>, <span class="string">&#x27;Math&#x27;</span>: <span class="number">61</span>, <span class="string">&#x27;Chniese&#x27;</span>: <span class="number">59</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="对列表中字典按多个键值排序"><a href="#对列表中字典按多个键值排序" class="headerlink" title="对列表中字典按多个键值排序"></a>对列表中字典按多个键值排序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line">data = [</span><br><span class="line">    &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">300</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">255</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">256</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">455</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">322</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">676</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;,</span><br><span class="line">]</span><br><span class="line">data = <span class="built_in">sorted</span>(data, key=itemgetter(<span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;position&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">300</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;, </span><br><span class="line">&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">322</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;, </span><br><span class="line">&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;, </span><br><span class="line">&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">255</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;, </span><br><span class="line">&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">256</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;, </span><br><span class="line">&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">455</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;, </span><br><span class="line">&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;position&#x27;</span>: <span class="number">676</span>, <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;1620442242&#x27;</span>&#125;]</span><br></pre></td></tr></table></figure><h2 id="71、时间格式与字符串互转、比较大小"><a href="#71、时间格式与字符串互转、比较大小" class="headerlink" title="71、时间格式与字符串互转、比较大小"></a>71、时间格式与字符串互转、比较大小</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前时间转字符串</span></span><br><span class="line">now = datetime.datetime.strftime(datetime.datetime.now(), <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line"><span class="comment"># 字符串转时间格式</span></span><br><span class="line">now = datetime.datetime.strptime(now, <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">a = now + datetime.timedelta(minutes=-<span class="number">15</span>)</span><br><span class="line"><span class="comment"># 时间比较大小</span></span><br><span class="line"><span class="keyword">if</span> a &lt; now:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;yes&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="72、python把’-u’开头的字符串转中文"><a href="#72、python把’-u’开头的字符串转中文" class="headerlink" title="72、python把’\u’开头的字符串转中文"></a>72、python把’\u’开头的字符串转中文</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_data = <span class="string">&#x27;\\u7528\\u6237 ID \\u6216\\u5bc6\\u7801\\u9519\\u8bef&#x27;</span></span><br><span class="line"><span class="comment"># 字符串.encode(&#x27;utf-8&#x27;).decode(&#x27;unicode_escape&#x27;)</span></span><br><span class="line">str_data_to_zh = str_data.encode(<span class="string">&#x27;utf-8&#x27;</span>).decode(<span class="string">&#x27;unicode_escape&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(str_data_to_zh)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">用户 ID 或密码错误</span><br></pre></td></tr></table></figure><h2 id="73、django进行数据迁移时出现No-changes-detected解决方案"><a href="#73、django进行数据迁移时出现No-changes-detected解决方案" class="headerlink" title="73、django进行数据迁移时出现No changes detected解决方案"></a>73、django进行数据迁移时出现No changes detected解决方案</h2><p>原因：可能是由于app下面没有migrations文件夹<br>所以需要创建这个文件夹，命令</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations --empty 你的app名称</span><br></pre></td></tr></table></figure><h2 id="74、ubuntu下载文件到windows桌面"><a href="#74、ubuntu下载文件到windows桌面" class="headerlink" title="74、ubuntu下载文件到windows桌面"></a>74、ubuntu下载文件到windows桌面</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">apt install lrzsz</span><br><span class="line">sz <span class="number">123.</span>txt</span><br></pre></td></tr></table></figure><h2 id="75、git查看提交日志"><a href="#75、git查看提交日志" class="headerlink" title="75、git查看提交日志"></a>75、git查看提交日志</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git log --author=<span class="string">&quot;ldc&quot;</span></span><br></pre></td></tr></table></figure><h2 id="76、python翻译模块"><a href="#76、python翻译模块" class="headerlink" title="76、python翻译模块"></a>76、python翻译模块</h2><p>可以把英文翻译成中文，也可以把中文翻译成英文</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install  translate</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> translate <span class="keyword">import</span> Translator</span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;giant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca&#x27;</span></span><br><span class="line">translator = Translator(to_lang=<span class="string">&quot;chinese&quot;</span>)</span><br><span class="line">translation = translator.translate(name)</span><br><span class="line"><span class="built_in">print</span>(translation)</span><br><span class="line"></span><br><span class="line">translator= Translator(from_lang=<span class="string">&quot;chinese&quot;</span>,to_lang=<span class="string">&quot;english&quot;</span>)</span><br><span class="line">translation = translator.translate(<span class="string">&quot;我想你&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(translation)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">大熊猫，熊猫，熊猫熊，浣熊，大熊猫</span><br><span class="line">I missed you.</span><br></pre></td></tr></table></figure><h2 id="77、python实现字符串转字典"><a href="#77、python实现字符串转字典" class="headerlink" title="77、python实现字符串转字典"></a>77、python实现字符串转字典</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">target_str = <span class="string">&#x27;&#123;&quot;h&quot;: 1, &quot;e&quot;: 2, &quot;l&quot;: 3, &quot;l&quot;: 4, &quot;o&quot;: 5&#125;&#x27;</span></span><br><span class="line">target_str2 = <span class="string">&quot;&#123;&#x27;h&#x27;: 1, &#x27;e&#x27;: 2, &#x27;l&#x27;: 3, &#x27;l&#x27;: 4, &#x27;o&#x27;: 5&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式1：使用json，缺点，字符串中不能出现单引号</span></span><br><span class="line"><span class="comment"># 由于 json 语法规定 数组或对象之中的字符串必须使用双引号，不能使用单引号</span></span><br><span class="line"><span class="comment"># 官网https://www.json.org/json-en.html上有一段描述是</span></span><br><span class="line"><span class="comment"># A string is a sequence of zero or more Unicode characters, wrapped in double quotes, using backslash escapes</span></span><br><span class="line"><span class="built_in">print</span>(json.loads(target_str))</span><br><span class="line"><span class="comment"># print(json.loads(target_str2))   # 使用json转这个字符串会报错 Expecting property name enclosed in double quotes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2：使用eval函数，缺点，不安全</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(target_str))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(target_str2))</span><br><span class="line"><span class="comment"># print(eval(&quot;__import__(&#x27;os&#x27;).system(&#x27;dir&#x27;)&quot;))  # 会列出当前的目录文件，如果字符串是一些删除命令，则可以把整个目录清空！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式3，使用ast.literal_eval，没有json与eval的缺点，推荐使用这个</span></span><br><span class="line"><span class="built_in">print</span>(ast.literal_eval(target_str))</span><br><span class="line"><span class="built_in">print</span>(ast.literal_eval(target_str2))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;h&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;l&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;h&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;l&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;h&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;l&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;h&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;l&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;h&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;l&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="78、django-app-如何在后台显示中文名"><a href="#78、django-app-如何在后台显示中文名" class="headerlink" title="78、django app 如何在后台显示中文名"></a>78、django app 如何在后台显示中文名</h2><p>1.在app (这里以user为例)下面的__init__.py文件中</p><p>添加:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">default_app_config = <span class="string">&#x27;user.apps.UserConfig&#x27;</span></span><br></pre></td></tr></table></figure><p>2.在apps.py中</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.apps <span class="keyword">import</span> AppConfig</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserConfig</span>(<span class="title class_ inherited__">AppConfig</span>):</span><br><span class="line">    name = <span class="string">&#x27;user&#x27;</span></span><br><span class="line">    verbose_name = <span class="string">&#x27;用户&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="79、使用python给Excel指定行添加数据"><a href="#79、使用python给Excel指定行添加数据" class="headerlink" title="79、使用python给Excel指定行添加数据"></a>79、使用python给Excel指定行添加数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl, sys</span><br><span class="line"></span><br><span class="line">wb = openpyxl.load_workbook(<span class="string">&#x27;b.xlsx&#x27;</span>)</span><br><span class="line">sheet = wb[<span class="string">&#x27;Sheet1&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在excel表格第二行添加新数据</span></span><br><span class="line">addrow = <span class="number">1</span>   <span class="comment"># 增加一行</span></span><br><span class="line">row = <span class="number">2</span>  <span class="comment"># 在第二行新增一行</span></span><br><span class="line">name = <span class="string">&#x27;b-back.xlsx&#x27;</span> <span class="comment"># 新的表名</span></span><br><span class="line"></span><br><span class="line">wb1 = openpyxl.Workbook()</span><br><span class="line">sheet1 = wb1[<span class="string">&#x27;Sheet&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制前row行</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, row):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, sheet.max_column + <span class="number">1</span>):</span><br><span class="line">        sheet1.cell(row=i, column=j).value = sheet.cell(row=i, column=j).value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制后row行</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row, sheet.max_row + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, sheet.max_column + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i == row:</span><br><span class="line">            <span class="comment"># 给第row行添加新的数据</span></span><br><span class="line">            sheet1.cell(row=row, column=j).value = <span class="string">&#x27;新增&#x27;</span></span><br><span class="line">        sheet1.cell(row=i + addrow, column=j).value = sheet.cell(row=i, column=j).value</span><br><span class="line"></span><br><span class="line">wb1.save(name)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200526120005871.png" alt="在这里插入图片描述"></p><h2 id="80、python中的format格式拼接字符串"><a href="#80、python中的format格式拼接字符串" class="headerlink" title="80、python中的format格式拼接字符串"></a>80、python中的format格式拼接字符串</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;a&#125;,&#123;b&#125;&#x27;</span>.<span class="built_in">format</span>(**d))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125;,&#123;1&#125;,&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;d[<span class="string">&#x27;a&#x27;</span>]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>,<span class="number">2</span></span><br><span class="line">a,b,a</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="81、数据库inner-join、full-join、left-join、union、union-all区别"><a href="#81、数据库inner-join、full-join、left-join、union、union-all区别" class="headerlink" title="81、数据库inner join、full join、left join、union、union all区别"></a>81、数据库inner join、full join、left join、union、union all区别</h2><p>表a_test</p><p><img src="https://img-blog.csdnimg.cn/20200529102527295.png#pic_center" alt="在这里插入图片描述"></p><p>表b_test</p><p><img src="https://img-blog.csdnimg.cn/20200529102549669.png#pic_center" alt="在这里插入图片描述"></p><p>INNER JOIN</p><p>是A和B的交集</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SELECT * FROM a_test INNER JOIN b_test ON a_test.name = b_test.namesa</span><br><span class="line"></span><br><span class="line">Inner join 产生的结果集中，是A和B的交集。</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200529102631494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>FULL OUTER JOIN</p><p>产生A和B的并集</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SELECT * FROM a_test FULL OUTER JOIN b_test ON a_test.name = b_test.name </span><br><span class="line"></span><br><span class="line">Full outer join 产生A和B的并集。</span><br><span class="line">但是需要注意的是，对于没有匹配的记录，则会以null做为值。</span><br><span class="line">可以使用IF NULL判断。</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200529102702865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SELECT * FROM a_test FULL OUTER JOIN b_test ON a_test.name = b_test.name</span><br><span class="line">WHERE a_test.<span class="built_in">id</span> IS null OR b_test.<span class="built_in">id</span> IS null</span><br><span class="line"></span><br><span class="line">产生A表和B表没有交集的数据集。</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200529102724731.png#pic_center" alt="在这里插入图片描述"></p><p>LEFT [OUTER] JOIN</p><p>产生表A的完全集，而B表中匹配的则有值，没有匹配的则以null值取代</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SELECT * FROM a_test LEFT OUTER JOIN b_test ON a_test.name = b_test.name</span><br><span class="line">有些数据库可以不要OUTER</span><br><span class="line">SELECT * FROM a_test LEFT  JOIN b_test ON a_test.name = b_test.name</span><br><span class="line">Left outer join 产生表A的完全集，而B表中匹配的则有值，没有匹配的则以null值取代。</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200529102808618.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SELECT * FROM a_test LEFT OUTER JOIN b_test ON a_test.name = b_test.name </span><br><span class="line">WHERE b_test.<span class="built_in">id</span> IS null</span><br><span class="line"></span><br><span class="line">产生在A表中有而在B表中没有的集合。</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200529102828846.png#pic_center" alt="在这里插入图片描述"></p><p>RIGHT [OUTER] JOIN</p><p>RIGHT OUTER JOIN 是后面的表为基础，与LEFT OUTER JOIN用法类似。</p><p>UNION 与 UNION ALL</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">UNION 操作符用于合并两个或多个 SELECT 语句的结果集。</span><br><span class="line">请注意，UNION 内部的 SELECT 语句必须拥有相同数量的列。</span><br><span class="line">列也必须拥有相似的数据类型。</span><br><span class="line">同时，每条 SELECT 语句中的列的顺序必须相同。</span><br><span class="line">UNION 只选取记录，而UNION ALL会列出所有记录。</span><br><span class="line"></span><br><span class="line">SELECT name FROM a_test UNION SELECT name FROM b_test</span><br><span class="line"></span><br><span class="line">选取不同值</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200529102855430.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SELECT a_test.<span class="built_in">id</span>,a_test.name  FROM a_test </span><br><span class="line">UNION </span><br><span class="line">SELECT b_test.<span class="built_in">id</span>,b_test.name FROM b_test</span><br><span class="line"></span><br><span class="line">由于 <span class="built_in">id</span> <span class="number">51</span> xh   与 <span class="built_in">id</span> <span class="number">4</span> xh 并不相同，不合并</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200529102917488.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SELECT name FROM a_test UNION ALL SELECT name FROM b_test</span><br><span class="line"></span><br><span class="line">全部列出来</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200529102937801.png#pic_center" alt="在这里插入图片描述"></p><p>还需要注意的是我们还有一个是“交差集” cross join, 这种Join没有办法用文式图表示，因为其就是把表A和表B的数据进行一个N*M的组合，即笛卡尔积。</p><p>表达式如下：SELECT * FROM a_test CROSS JOIN b_test</p><p>这个笛卡尔乘积会产生 4 x 4 &#x3D; 16 条记录，一般来说，我们很少用到这个语法。但是我们得小心，如果不是使用嵌套的select语句，一般系统都会产生笛卡尔乘积然再做过滤。这是对于性能来说是非常危险的，尤其是表很大的时候。</p><h2 id="82、windows电脑查看端口使用情况"><a href="#82、windows电脑查看端口使用情况" class="headerlink" title="82、windows电脑查看端口使用情况"></a>82、windows电脑查看端口使用情况</h2><p>找出8000端口对应的PID进程，命令为：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">netstat -ano|findstr <span class="number">8000</span></span><br></pre></td></tr></table></figure><p>进程信息如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TCP    <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8000</span>           <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">0</span>              LISTENING       <span class="number">1620</span></span><br><span class="line">UDP    <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8000</span>           *:*                                    <span class="number">1620</span></span><br></pre></td></tr></table></figure><p>找出进程对应的详细信息：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tasklist |findstr <span class="number">1620</span></span><br><span class="line"></span><br><span class="line">KGService.exe                 <span class="number">1620</span> Console                    <span class="number">1</span>     <span class="number">18</span>,<span class="number">696</span> K</span><br></pre></td></tr></table></figure><p>关进程：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">taskkill /pid <span class="number">1620</span> /F</span><br></pre></td></tr></table></figure><p>查看程序占用内存<br>比如查看python占用运行内存</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tasklist  /fi <span class="string">&quot;imagename eq python.exe&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a61afd069e964e6f9d755c5c1884ca6f.png" alt="在这里插入图片描述"></p><h2 id="83、Django生成表和反向生成Model"><a href="#83、Django生成表和反向生成Model" class="headerlink" title="83、Django生成表和反向生成Model"></a>83、Django生成表和反向生成Model</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">正向生成：</span><br><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br><span class="line"></span><br><span class="line">反向：</span><br><span class="line">会根据设置的数据库中的表在自动生成对应的Model代码，并打印出来</span><br><span class="line">python manage.py inspectdb</span><br><span class="line"></span><br><span class="line">以直接将打印的代码直接导入到指定的Model文件中</span><br><span class="line">python manage.py inspectdb &gt; models.py</span><br></pre></td></tr></table></figure><h2 id="84、windows的hosts文件位置"><a href="#84、windows的hosts文件位置" class="headerlink" title="84、windows的hosts文件位置"></a>84、windows的hosts文件位置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\drivers\etc\hosts</span><br></pre></td></tr></table></figure><h2 id="85、postgresql数据库"><a href="#85、postgresql数据库" class="headerlink" title="85、postgresql数据库"></a>85、postgresql数据库</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果表存在就先删除</span></span><br><span class="line">drop table <span class="keyword">if</span> exists student;</span><br><span class="line"><span class="comment"># 创建学生表</span></span><br><span class="line"><span class="comment"># id      serial not null  表示id自增</span></span><br><span class="line"><span class="comment"># id      integer not null  表示id不自增</span></span><br><span class="line">create table student</span><br><span class="line">(</span><br><span class="line">    <span class="built_in">id</span>                    serial <span class="keyword">not</span> null</span><br><span class="line">        constraint student_pk</span><br><span class="line">            primary key,</span><br><span class="line">    name                  varchar,</span><br><span class="line">    class_id              integer,</span><br><span class="line">    height                numeric,</span><br><span class="line">    weight                numeric,</span><br><span class="line">    write_date            timestamp</span><br><span class="line">    </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">comment on table student <span class="keyword">is</span> <span class="string">&#x27;学生表&#x27;</span>;</span><br><span class="line"></span><br><span class="line">comment on column student.name <span class="keyword">is</span> <span class="string">&#x27;名称&#x27;</span>;</span><br><span class="line"></span><br><span class="line">comment on column student.class_id <span class="keyword">is</span> <span class="string">&#x27;班级ID&#x27;</span>;</span><br><span class="line"></span><br><span class="line">comment on column student.height <span class="keyword">is</span> <span class="string">&#x27;身高&#x27;</span>;</span><br><span class="line"></span><br><span class="line">comment on column student.weight <span class="keyword">is</span> <span class="string">&#x27;体重&#x27;</span>;</span><br><span class="line"></span><br><span class="line">comment on column student.write_date <span class="keyword">is</span> <span class="string">&#x27;修改时间&#x27;</span>;</span><br><span class="line"></span><br><span class="line">alter table student</span><br><span class="line">    owner to odoo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">update user <span class="built_in">set</span> name=<span class="string">&#x27;张三&#x27;</span> where <span class="built_in">id</span>=<span class="number">111</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新表a的字段为表b的值</span></span><br><span class="line">update account_invoice </span><br><span class="line"><span class="built_in">set</span> sale_order_id=so.<span class="built_in">id</span> </span><br><span class="line"><span class="keyword">from</span> sale_order so </span><br><span class="line">where account_invoice.origin=so.name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增</span></span><br><span class="line">insert into <span class="string">&quot;user&quot;</span> (name,sex) values (<span class="string">&#x27;小明&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;小红&#x27;</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment"># 新增或更新</span></span><br><span class="line">如果<span class="built_in">id</span>冲突就更新</span><br><span class="line">INSERT INTO  student(<span class="built_in">id</span>, name)</span><br><span class="line">   VALUES(<span class="number">12</span>, <span class="string">&#x27;小明&#x27;</span>),(<span class="number">13</span>, <span class="string">&#x27;小红&#x27;</span>)</span><br><span class="line">   ON conflict(<span class="built_in">id</span>) DO UPDATE</span><br><span class="line">   SET name =<span class="string">&#x27;未知&#x27;</span>;</span><br><span class="line">如果<span class="built_in">id</span>冲突就什么也不做</span><br><span class="line">INSERT INTO  student(<span class="built_in">id</span>, name)</span><br><span class="line">   VALUES(<span class="number">12</span>, <span class="string">&#x27;小明&#x27;</span>),(<span class="number">13</span>, <span class="string">&#x27;小红&#x27;</span>)</span><br><span class="line">   ON conflict(<span class="built_in">id</span>) DO NOTHING;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把一个表中的数据插入到另一个表中</span></span><br><span class="line">insert into 目标表名 (column1,column2,columnn) select value1,value2,valuen <span class="keyword">from</span>  源表名</span><br><span class="line">比如：</span><br><span class="line">insert into student (name, classs_name,create_date) select  student_name <span class="keyword">as</span> name, class_name, now() <span class="keyword">from</span> class_table;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前时间</span></span><br><span class="line">now()</span><br><span class="line">select now()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">DELETE FROM table_name [WHERE Clause]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加字段</span></span><br><span class="line">alter table 表名 add column 列名 类型;</span><br><span class="line"><span class="comment"># 删除字段</span></span><br><span class="line">alter table 表名 dropcolumn 列名 ;</span><br><span class="line"></span><br><span class="line"><span class="comment"># postgresql数据库查看表所有字段</span></span><br><span class="line">select * <span class="keyword">from</span> information_schema.columns where table_schema=<span class="string">&#x27;public&#x27;</span> <span class="keyword">and</span> table_name=<span class="string">&#x27;表名&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># postgresql获取所有表名</span></span><br><span class="line">select tablename <span class="keyword">from</span> pg_tables where schemaname=<span class="string">&#x27;public&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对查询结果按id降序显示</span></span><br><span class="line">select * <span class="keyword">from</span> table_name order by <span class="built_in">id</span> desc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对查询结果按id升序显示</span></span><br><span class="line">select * <span class="keyword">from</span> table_name order by <span class="built_in">id</span> asc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转义字符, 查找name中包含单引号的记录</span></span><br><span class="line">select * <span class="keyword">from</span> student where name like  E<span class="string">&#x27;%\&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看表记录总数</span></span><br><span class="line">select relname <span class="keyword">as</span> TABLE_NAME, reltuples <span class="keyword">as</span> rowCounts <span class="keyword">from</span> pg_class where relkind = <span class="string">&#x27;r&#x27;</span> <span class="keyword">and</span> relnamespace = (select oid <span class="keyword">from</span> pg_namespace where nspname=<span class="string">&#x27;public&#x27;</span>) order by rowCounts desc;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将结果转换为数组</span></span><br><span class="line">SELECT array(SELECT <span class="string">&quot;name&quot;</span> FROM sale_order);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数组合并为字符串</span></span><br><span class="line">select array_to_string(array[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 联合子集更新，把sale_order_line的name连接换行符，然后按id更新到表a_test中对应的name</span></span><br><span class="line">update a_test <span class="built_in">set</span> name=array_to_string(array(select name <span class="keyword">from</span> sale_order_line where order_id=a_test.<span class="built_in">id</span>),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># PostgreSQL合并查询同一列的多条记录，针对一对多，多对多字段</span></span><br><span class="line">比如表：</span><br><span class="line"></span><br><span class="line"><span class="built_in">id</span>   name                  </span><br><span class="line"><span class="number">1</span>    小明                   </span><br><span class="line"><span class="number">1</span>    小红                     <span class="built_in">id</span>   name</span><br><span class="line"><span class="number">1</span>    小亮        --&gt;          <span class="number">1</span>    小明，小亮，小红</span><br><span class="line"><span class="number">2</span>    小强                     <span class="number">2</span>    小强，小王</span><br><span class="line"><span class="number">2</span>    小王</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">    <span class="built_in">id</span>, array_to_string(ARRAY(SELECT unnest(array_agg(name order by name desc))),<span class="string">&#x27;,&#x27;</span>) AS all_name</span><br><span class="line">FROM  </span><br><span class="line">    student</span><br><span class="line">GROUP BY <span class="built_in">id</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># case语句</span></span><br><span class="line"><span class="keyword">case</span> var</span><br><span class="line">when condition1 then statement1</span><br><span class="line">when condition2 then statement2</span><br><span class="line"><span class="keyword">else</span> statementn</span><br><span class="line">end <span class="keyword">as</span> new_name</span><br><span class="line"></span><br><span class="line">比如：</span><br><span class="line">select <span class="keyword">case</span> name</span><br><span class="line">when <span class="string">&#x27;小明&#x27;</span> then <span class="string">&#x27;xm&#x27;</span></span><br><span class="line">when <span class="string">&#x27;小红&#x27;</span> then <span class="string">&#x27;xh&#x27;</span></span><br><span class="line">when <span class="string">&#x27;小刚&#x27;</span> then <span class="string">&#x27;xg&#x27;</span></span><br><span class="line"><span class="keyword">else</span> <span class="string">&#x27;xw&#x27;</span></span><br><span class="line">end <span class="keyword">as</span> short_name</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时表、字符串合并、类型转换、时间格式转换、当前时间</span></span><br><span class="line">WITH TEMP AS ( </span><br><span class="line">SELECT CAST ( concat ( bam.account_period_code, <span class="string">&#x27;-01&#x27;</span> ) AS TIMESTAMP ) </span><br><span class="line">   AS account_period_time </span><br><span class="line"> FROM bi_account_move AS bam ) </span><br><span class="line">SELECT</span><br><span class="line">account_period_time,</span><br><span class="line">to_char(CURRENT_DATE,<span class="string">&#x27;yyyy-MM-dd hh24:MI:ss&#x27;</span>) <span class="keyword">as</span> current_date,</span><br><span class="line">to_char( account_period_time, <span class="string">&#x27;yyyy&#x27;</span> ) <span class="keyword">as</span> year,</span><br><span class="line">to_char( account_period_time, <span class="string">&#x27;MM&#x27;</span> ) <span class="keyword">as</span> month,</span><br><span class="line">to_char( account_period_time, <span class="string">&#x27;dd&#x27;</span> ) <span class="keyword">as</span> day </span><br><span class="line">FROM TEMP</span><br><span class="line"></span><br><span class="line">比如：</span><br><span class="line">account_period_timecurrent_date    yearmonthday</span><br><span class="line"><span class="number">2019</span>-06-01 <span class="number">0</span>:<span class="number">00</span>:<span class="number">00</span><span class="number">2020</span>-06-<span class="number">24</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span><span class="number">2019</span> 06     01</span><br><span class="line"><span class="number">2019</span>-06-01 <span class="number">0</span>:<span class="number">00</span>:<span class="number">00</span><span class="number">2020</span>-06-<span class="number">24</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span><span class="number">2019</span> 06     01</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个字符串拼接</span></span><br><span class="line">select </span><br><span class="line">concat(<span class="string">&#x27;payment_&#x27;</span>, CAST(ap.<span class="built_in">id</span> <span class="keyword">as</span> varchar)) <span class="keyword">as</span> line_key</span><br><span class="line"><span class="keyword">from</span> ap</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将查询所得结果集的某一字段拼接成字符串，默认的是逗号</span></span><br><span class="line">select GROUP_CONCAT(<span class="built_in">id</span>) <span class="keyword">from</span> test where <span class="built_in">id</span>&gt;<span class="number">5</span>;</span><br><span class="line">结果为：</span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span></span><br><span class="line"><span class="comment"># 使用其他分隔符拼接</span></span><br><span class="line">select GROUP_CONCAT(<span class="built_in">id</span> separator <span class="string">&#x27;-&#x27;</span>) <span class="keyword">from</span> test where <span class="built_in">id</span>&gt;<span class="number">5</span>;</span><br><span class="line">结果为：</span><br><span class="line"><span class="number">1</span>-<span class="number">2</span>-<span class="number">3</span>-<span class="number">4</span>-<span class="number">5</span>-<span class="number">6</span>-<span class="number">7</span></span><br><span class="line"><span class="comment"># 多个临时表</span></span><br><span class="line">WITH temp_student AS ( SELECT ID, NAME, sex FROM student WHERE sex = TRUE ),</span><br><span class="line">temp_class AS (</span><br><span class="line">SELECT</span><br><span class="line">ID,</span><br><span class="line">NAME,</span><br><span class="line">student_id,</span><br><span class="line">teacher_id</span><br><span class="line">FROM</span><br><span class="line">the_class </span><br><span class="line">),</span><br><span class="line">temp_teacher AS (</span><br><span class="line">SELECT </span><br><span class="line">  ID,</span><br><span class="line">NAME,</span><br><span class="line">age </span><br><span class="line">FROM</span><br><span class="line">teacher </span><br><span class="line">) </span><br><span class="line">SELECT</span><br><span class="line">ts.NAME AS student_name,</span><br><span class="line">tc.NAME AS class_name,</span><br><span class="line">te.NAME AS teacher_name</span><br><span class="line"><span class="keyword">from</span> temp_student <span class="keyword">as</span> ts</span><br><span class="line">LEFT JOIN temp_class AS tc ON tc.student_id = ts.ID  </span><br><span class="line">LEFT JOIN teacher AS te ON te.<span class="built_in">id</span> = tc.teacher_id  </span><br><span class="line"></span><br><span class="line"><span class="comment"># null转成有意义的值</span></span><br><span class="line">select COALESCE(name, <span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> name <span class="keyword">from</span> a_test</span><br><span class="line">意思就是如果name为null，就转为空字符串</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串截取</span></span><br><span class="line">select SUBSTRING(<span class="string">&#x27;abcd&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>); -- result:ab 表示从下标从<span class="number">1</span>开始,截取<span class="number">2</span>个字符</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 interval 时间相加减(+/-)</span></span><br><span class="line">当前时间 + <span class="number">10</span>秒，</span><br><span class="line">select to_char(now() + interval <span class="string">&#x27;10 second&#x27;</span>, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>)  <span class="keyword">as</span> reqDate <span class="keyword">from</span> account_period;</span><br><span class="line">当前时间 - <span class="number">10</span>秒</span><br><span class="line">select to_char(now() + interval <span class="string">&#x27;-10 second&#x27;</span>, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>)  <span class="keyword">as</span> reqDate <span class="keyword">from</span> account_period;</span><br><span class="line"> </span><br><span class="line">当前时间 + <span class="number">10</span>分，</span><br><span class="line">select to_char(now() + interval <span class="string">&#x27;10 minute&#x27;</span>, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>)  <span class="keyword">as</span> reqDate  <span class="keyword">from</span> account_period;</span><br><span class="line"> </span><br><span class="line">当前时间 + <span class="number">10</span>时，</span><br><span class="line">select to_char(now() + interval <span class="string">&#x27;10 hour&#x27;</span>, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>)  <span class="keyword">as</span> reqDate <span class="keyword">from</span> account_period;</span><br><span class="line"> </span><br><span class="line">当前时间 + <span class="number">10</span>天，</span><br><span class="line">select to_char(now() + interval <span class="string">&#x27;10 day&#x27;</span>, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>)  <span class="keyword">as</span> reqDate <span class="keyword">from</span> account_period;</span><br><span class="line"></span><br><span class="line">当前时间 + <span class="number">10</span>年，</span><br><span class="line">select to_char(now() + interval <span class="string">&#x27;10 year&#x27;</span>, <span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>)  <span class="keyword">as</span> reqDate <span class="keyword">from</span> account_period;</span><br><span class="line"></span><br><span class="line"><span class="comment"># UNION types numeric and text cannot be matched</span></span><br><span class="line">NULL::NUMERIC</span><br><span class="line"> 这个问题，是因为几个sql组合在一起时，同一个字段的值，遇到null时，需要进行类型转换。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对行记录定义行编号，使用函数ROW_NUMBER()</span></span><br><span class="line"><span class="comment"># 按分数进行降序，然后给行记录标记行编号，可以作为排名来使用</span></span><br><span class="line">select           </span><br><span class="line">ROW_NUMBER() OVER (ORDER BY score desc) AS sequence_number,</span><br><span class="line">name,score</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">b_test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数字转字符串  </span></span><br><span class="line">select cast(<span class="number">123</span> <span class="keyword">as</span> VARCHAR); </span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串转数字  </span></span><br><span class="line">select cast(<span class="string">&#x27;123&#x27;</span> <span class="keyword">as</span> INTEGER);</span><br></pre></td></tr></table></figure><h2 id="86、python控制台输出带颜色的文字方法"><a href="#86、python控制台输出带颜色的文字方法" class="headerlink" title="86、python控制台输出带颜色的文字方法"></a>86、python控制台输出带颜色的文字方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#格式：　　设置颜色开始 ：\033[显示方式;前景色;背景色m</span></span><br><span class="line"><span class="comment">#说明：</span></span><br><span class="line">前景色            背景色           颜色</span><br><span class="line">---------------------------------------</span><br><span class="line"><span class="number">30</span>                <span class="number">40</span>              黑色</span><br><span class="line"><span class="number">31</span>                <span class="number">41</span>              红色</span><br><span class="line"><span class="number">32</span>                <span class="number">42</span>              绿色</span><br><span class="line"><span class="number">33</span>                <span class="number">43</span>              黃色</span><br><span class="line"><span class="number">34</span>                <span class="number">44</span>              蓝色</span><br><span class="line"><span class="number">35</span>                <span class="number">45</span>              紫红色</span><br><span class="line"><span class="number">36</span>                <span class="number">46</span>              青蓝色</span><br><span class="line"><span class="number">37</span>                <span class="number">47</span>              白色</span><br><span class="line">显示方式           意义</span><br><span class="line">-------------------------</span><br><span class="line"><span class="number">0</span>                终端默认设置</span><br><span class="line"><span class="number">1</span>                高亮显示</span><br><span class="line"><span class="number">4</span>                使用下划线</span><br><span class="line"><span class="number">5</span>                闪烁</span><br><span class="line"><span class="number">7</span>                反白显示</span><br><span class="line"><span class="number">8</span>                不可见</span><br><span class="line"> </span><br><span class="line"><span class="comment">#例子：</span></span><br><span class="line">\033[<span class="number">1</span>;<span class="number">31</span>;40m    &lt;!--<span class="number">1</span>-高亮显示 <span class="number">31</span>-前景色红色  <span class="number">40</span>-背景色黑色--&gt;</span><br><span class="line">\033[0m          &lt;!--采用终端默认设置，即取消颜色设置--&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">例子</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;紫红字体 \033[1;35m hello world \033[0m!&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;褐色背景绿色字体 \033[1;32;43m hello world \033[0m!&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\033[1;33;44mhello world\033[0m&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200615143709116.png" alt="在这里插入图片描述"></p><h2 id="87、控制台输出白色方框"><a href="#87、控制台输出白色方框" class="headerlink" title="87、控制台输出白色方框"></a>87、控制台输出白色方框</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;█&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="88、xadmin后台编辑多对多字段"><a href="#88、xadmin后台编辑多对多字段" class="headerlink" title="88、xadmin后台编辑多对多字段"></a>88、xadmin后台编辑多对多字段</h2><p>在models.py定义了多对多字段，想要在编辑时可以灵活使用这个字段的话，可以按以下方法设置：<br>modes.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    title = models.CharField(verbose_name=<span class="string">&quot;书名&quot;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    second_title = models.CharField(verbose_name=<span class="string">&quot;副标题&quot;</span>, max_length=<span class="number">32</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    author = models.CharField(verbose_name=<span class="string">&quot;作者&quot;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    translator = models.CharField(verbose_name=<span class="string">&quot;译者&quot;</span>, max_length=<span class="number">32</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    intro = models.TextField(verbose_name=<span class="string">&quot;描述&quot;</span>)</span><br><span class="line">    pic = models.FileField(verbose_name=<span class="string">&quot;封面图片&quot;</span>, max_length=<span class="number">64</span>, upload_to=<span class="string">&#x27;book_cover&#x27;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    tags = models.ManyToManyField(Tags, verbose_name=<span class="string">&#x27;书籍标签&#x27;</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    prizes = models.ManyToManyField(Prizes, verbose_name=<span class="string">&#x27;获奖详情&#x27;</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    sump = models.IntegerField(verbose_name=<span class="string">&quot;收藏人数&quot;</span>, default=<span class="number">0</span>)</span><br><span class="line">    rate_num = models.IntegerField(verbose_name=<span class="string">&quot;评分人数&quot;</span>, default=<span class="number">0</span>)</span><br><span class="line">    num = models.IntegerField(verbose_name=<span class="string">&quot;浏览量&quot;</span>, default=<span class="number">0</span>)</span><br><span class="line">    published_time = models.DateField(blank=<span class="literal">True</span>, null=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;出版时间&#x27;</span>)</span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;创建时间&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;book&#x27;</span></span><br><span class="line">        verbose_name = <span class="string">&quot;图书&quot;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&quot;图书&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br></pre></td></tr></table></figure><p>adminx.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 书籍管理</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookAdmin</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    search_fields = [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;author&#x27;</span>, <span class="string">&#x27;intro&#x27;</span>]  <span class="comment"># 检索字段</span></span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;show_pic&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;second_title&#x27;</span>, <span class="string">&#x27;author&#x27;</span>, <span class="string">&#x27;translator&#x27;</span>, <span class="string">&#x27;published_time&#x27;</span>, <span class="string">&#x27;intro&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;tags&#x27;</span>, <span class="string">&#x27;prizes&#x27;</span>, <span class="string">&#x27;num&#x27;</span>, <span class="string">&#x27;sump&#x27;</span>, <span class="string">&#x27;rate_num&#x27;</span>]  <span class="comment"># 要显示的字段</span></span><br><span class="line">    list_filter = [<span class="string">&#x27;published_time&#x27;</span>, <span class="string">&#x27;tags&#x27;</span>, <span class="string">&#x27;prizes&#x27;</span>]  <span class="comment"># 分组过滤的字段</span></span><br><span class="line">    ordering = (<span class="string">&#x27;id&#x27;</span>,)  <span class="comment"># 设置默认排序字段，负号表示降序排序</span></span><br><span class="line">    list_per_page = <span class="number">30</span>  <span class="comment"># 默认每页显示多少条记录，默认是100条</span></span><br><span class="line">    model_icon = <span class="string">&#x27;fa fa-book&#x27;</span>  <span class="comment"># 左侧小图标</span></span><br><span class="line">    list_editable = [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;author&#x27;</span>, <span class="string">&#x27;intro&#x27;</span>, <span class="string">&#x27;published_time&#x27;</span>]  <span class="comment"># 可编辑字段</span></span><br><span class="line">    style_fields = &#123;<span class="string">&#x27;tags&#x27;</span>: <span class="string">&#x27;m2m_transfer&#x27;</span>, <span class="string">&#x27;prizes&#x27;</span>: <span class="string">&#x27;m2m_transfer&#x27;</span>&#125;  <span class="comment"># 控制字段的显示样式</span></span><br><span class="line">    filter_horizontal = (<span class="string">&#x27;tags&#x27;</span>, <span class="string">&#x27;prizes&#x27;</span>)  <span class="comment"># 水平选择编辑多对多字段</span></span><br></pre></td></tr></table></figure><p>重点是设置style_fields 和filter_horizontal ，效果：</p><p><img src="https://img-blog.csdnimg.cn/20200621214122315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="89、Django后台通过按钮显示TextField字段内容"><a href="#89、Django后台通过按钮显示TextField字段内容" class="headerlink" title="89、Django后台通过按钮显示TextField字段内容"></a>89、Django后台通过按钮显示TextField字段内容</h2><p>由于TextField字段类型内容可能很长，在后台显示时很占屏幕位置，可以通过按钮来控制显示，代码如下：<br>models.py中定义了一个TextField字段类型：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Prizes</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&quot;奖项&quot;</span>)</span><br><span class="line">    intro = models.TextField(blank=<span class="literal">True</span>, null=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;简介&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&#x27;prizes&#x27;</span></span><br><span class="line">        verbose_name = <span class="string">&quot;奖项&quot;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&quot;奖项&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure><p>这里使用xadmin作为后台管理框架，在adminx.py中代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xadmin</span><br><span class="line"><span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line"><span class="keyword">from</span> xadmin <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 奖项管理</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PrizesAdmin</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    search_fields = [<span class="string">&#x27;name&#x27;</span>]  <span class="comment"># 检索字段</span></span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;show_intro&#x27;</span>]</span><br><span class="line">    list_filter = [<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    ordering = (<span class="string">&#x27;id&#x27;</span>,)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_intro</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="comment"># 显示简介</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> obj.intro:</span><br><span class="line">            <span class="keyword">return</span> mark_safe(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(obj.intro) &lt; <span class="number">20</span>:</span><br><span class="line">            <span class="keyword">return</span> mark_safe(obj.intro)</span><br><span class="line"></span><br><span class="line">        short_id = <span class="string">f&#x27;<span class="subst">&#123;obj._meta.db_table&#125;</span>_short_text_<span class="subst">&#123;obj.<span class="built_in">id</span>&#125;</span>&#x27;</span></span><br><span class="line">        short_text_len = <span class="built_in">len</span>(obj.intro) // <span class="number">4</span></span><br><span class="line">        short_text = obj.intro[:short_text_len] + <span class="string">&#x27;......&#x27;</span></span><br><span class="line">        detail_id = <span class="string">f&#x27;<span class="subst">&#123;obj._meta.db_table&#125;</span>_detail_text_<span class="subst">&#123;obj.<span class="built_in">id</span>&#125;</span>&#x27;</span></span><br><span class="line">        detail_text = obj.intro</span><br><span class="line"></span><br><span class="line">        text = <span class="string">&quot;&quot;&quot;&lt;style type=&quot;text/css&quot;&gt;</span></span><br><span class="line"><span class="string">                        #%s,%s &#123;padding:10px;border:1px solid green;&#125; </span></span><br><span class="line"><span class="string">                  &lt;/style&gt;</span></span><br><span class="line"><span class="string">                    &lt;script type=&quot;text/javascript&quot;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                    function openShutManager(oSourceObj,oTargetObj,shutAble,oOpenTip,oShutTip,oShortObj)&#123;</span></span><br><span class="line"><span class="string">                        var sourceObj = typeof oSourceObj == &quot;string&quot; ? document.getElementById(oSourceObj) : oSourceObj;</span></span><br><span class="line"><span class="string">                        var targetObj = typeof oTargetObj == &quot;string&quot; ? document.getElementById(oTargetObj) : oTargetObj;</span></span><br><span class="line"><span class="string">                        var shortObj = typeof oShortObj == &quot;string&quot; ? document.getElementById(oShortObj) : oShortObj;</span></span><br><span class="line"><span class="string">                        var openTip = oOpenTip || &quot;&quot;;</span></span><br><span class="line"><span class="string">                        var shutTip = oShutTip || &quot;&quot;;</span></span><br><span class="line"><span class="string">                        if(targetObj.style.display!=&quot;none&quot;)&#123;</span></span><br><span class="line"><span class="string">                           if(shutAble) return;</span></span><br><span class="line"><span class="string">                           targetObj.style.display=&quot;none&quot;;</span></span><br><span class="line"><span class="string">                           shortObj.style.display=&quot;block&quot;;</span></span><br><span class="line"><span class="string">                           if(openTip  &amp;&amp;  shutTip)&#123;</span></span><br><span class="line"><span class="string">                            sourceObj.innerHTML = shutTip; </span></span><br><span class="line"><span class="string">                           &#125;</span></span><br><span class="line"><span class="string">                        &#125; else &#123;</span></span><br><span class="line"><span class="string">                           targetObj.style.display=&quot;block&quot;;</span></span><br><span class="line"><span class="string">                           shortObj.style.display=&quot;none&quot;;</span></span><br><span class="line"><span class="string">                           if(openTip  &amp;&amp;  shutTip)&#123;</span></span><br><span class="line"><span class="string">                            sourceObj.innerHTML = openTip; </span></span><br><span class="line"><span class="string">                           &#125;</span></span><br><span class="line"><span class="string">                        &#125;</span></span><br><span class="line"><span class="string">                        &#125;</span></span><br><span class="line"><span class="string">                    &lt;/script&gt;</span></span><br><span class="line"><span class="string">                    &lt;p id=&quot;%s&quot;&gt;%s&lt;/p&gt;</span></span><br><span class="line"><span class="string">                    &lt;p&gt;&lt;a href=&quot;###&quot; οnclick=&quot;openShutManager(this,&#x27;%s&#x27;,false,&#x27;点击关闭&#x27;,&#x27;点击展开&#x27;,&#x27;%s&#x27;)&quot;&gt;点击展开&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                    &lt;p id=&quot;%s&quot; style=&quot;display:none&quot;&gt;</span></span><br><span class="line"><span class="string">                       %s</span></span><br><span class="line"><span class="string">                    &lt;/p&gt;</span></span><br><span class="line"><span class="string">                    &quot;&quot;&quot;</span> % (short_id, detail_id, short_id, short_text, detail_id, short_id, detail_id, detail_text)</span><br><span class="line">        <span class="keyword">return</span> mark_safe(text)</span><br><span class="line"></span><br><span class="line">    show_intro.short_description = <span class="string">&#x27;描述&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：复制代码后需要做如下修改：</p><p><img src="https://img-blog.csdnimg.cn/20200815204246956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>一开始效果</p><p><img src="https://img-blog.csdnimg.cn/20200621230038819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>点击展开效果：<img src="https://img-blog.csdnimg.cn/20200621230120177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="90、前端判断上传的文件是否为图片且限制大小为300kB"><a href="#90、前端判断上传的文件是否为图片且限制大小为300kB" class="headerlink" title="90、前端判断上传的文件是否为图片且限制大小为300kB"></a>90、前端判断上传的文件是否为图片且限制大小为300kB</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en-us&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;body <span class="keyword">class</span>=<span class="string">&quot;login&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="built_in">input</span> <span class="keyword">class</span>=<span class="string">&quot;form-control input-lg&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;id_icon&quot;</span> name=<span class="string">&quot;icon&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;file&quot;</span> onchange=<span class="string">&quot;imgTypeSize(&#x27;id_icon&#x27;,300)&quot;</span></span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    //判断是否为图片，若为图片，判断其大小是否大于<span class="number">0.3</span>M</span><br><span class="line">    function imgTypeSize(FileId, maxsize) &#123;</span><br><span class="line">        /*获取图片内容对象*/</span><br><span class="line">        var imgFile = document.getElementById(FileId).files[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (imgFile.name == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            alert(<span class="string">&quot;请上传头像哦&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> false;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            /*图片类型正则验证*/</span><br><span class="line">            var imgStr = /\.(jpg|jpeg|png|bmp|BMP|JPG|PNG|JPEG)$/;</span><br><span class="line">            <span class="keyword">if</span> (!imgStr.test(imgFile.name)) &#123;</span><br><span class="line">                alert(<span class="string">&quot;文件不是图片类型&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> false;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                /*图片大小*/</span><br><span class="line">                var imagSize = imgFile.size;</span><br><span class="line">                <span class="keyword">if</span> (imagSize &lt; (<span class="number">1024</span> * maxsize)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> true;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    alert(imgFile.name + <span class="string">&quot;大小不能超过&quot;</span> + maxsize + <span class="string">&quot;kB&quot;</span>);</span><br><span class="line">                    document.getElementById(FileId).value = <span class="string">&quot;&quot;</span></span><br><span class="line">                    <span class="keyword">return</span> false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="91、form表单提交前验证"><a href="#91、form表单提交前验证" class="headerlink" title="91、form表单提交前验证"></a>91、form表单提交前验证</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;post&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;login-form&quot;</span> onsubmit=<span class="string">&quot;return toVaild()&quot;</span>&gt;</span><br><span class="line">&lt;<span class="built_in">input</span> <span class="keyword">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;id_account&quot;</span> name=<span class="string">&quot;account&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;账号&quot;</span>/&gt;</span><br><span class="line">&lt;<span class="built_in">input</span> <span class="keyword">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;id_password&quot;</span> name=<span class="string">&quot;password&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;password&quot;</span> placeholder=<span class="string">&quot;密码&quot;</span>&gt;</span><br><span class="line">&lt;form&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    document.getElementById(<span class="string">&#x27;id_username&#x27;</span>).focus()</span><br><span class="line"></span><br><span class="line">    function toVaild() &#123;</span><br><span class="line">        var account = document.getElementById(<span class="string">&quot;id_account&quot;</span>).value;</span><br><span class="line">        var password = document.getElementById(<span class="string">&quot;id_password&quot;</span>).value;</span><br><span class="line">        <span class="keyword">if</span> (account == <span class="string">&quot;&quot;</span> || password == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            alert(<span class="string">&quot;请输入账号和密码&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> false;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="92、有序字典"><a href="#92、有序字典" class="headerlink" title="92、有序字典"></a>92、有序字典</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line">d1 = collections.OrderedDict()  <span class="comment"># 创建一个有序字典</span></span><br><span class="line">d1[<span class="string">&#x27;a&#x27;</span>] = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">d1[<span class="string">&#x27;b&#x27;</span>] = <span class="string">&#x27;B&#x27;</span></span><br><span class="line">d1[<span class="string">&#x27;c&#x27;</span>] = <span class="string">&#x27;C&#x27;</span></span><br><span class="line">d1[<span class="string">&#x27;d&#x27;</span>] = <span class="string">&#x27;D&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d1.items():</span><br><span class="line">    <span class="built_in">print</span>(k, v)</span><br></pre></td></tr></table></figure><h2 id="93、Python在Windows系统下实现TTS（文字转语音）"><a href="#93、Python在Windows系统下实现TTS（文字转语音）" class="headerlink" title="93、Python在Windows系统下实现TTS（文字转语音）"></a>93、Python在Windows系统下实现TTS（文字转语音）</h2><p>导入包：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install pypiwin32</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> win32com.client</span><br><span class="line">spk = win32com.client.Dispatch(<span class="string">&quot;SAPI.SpVoice&quot;</span>)</span><br><span class="line">spk.Speak(<span class="string">u&quot;my name is ldc,what is your name&quot;</span>)</span><br><span class="line">spk.Speak(<span class="string">u&quot;大家好&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="94、定义一个简单闹钟"><a href="#94、定义一个简单闹钟" class="headerlink" title="94、定义一个简单闹钟"></a>94、定义一个简单闹钟</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pip install pypiwin32 -i https://pypi.python.org/simple</span></span><br><span class="line"><span class="keyword">import</span> win32com.client</span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line"><span class="keyword">import</span> winsound</span><br><span class="line"></span><br><span class="line">spk = win32com.client.Dispatch(<span class="string">&quot;SAPI.SpVoice&quot;</span>)</span><br><span class="line"><span class="comment"># 定义闹钟时间</span></span><br><span class="line">clocktime = [[<span class="number">19</span>, <span class="number">19</span>], [<span class="number">11</span>, <span class="number">10</span>], [<span class="number">12</span>, <span class="number">10</span>], [<span class="number">18</span>, <span class="number">47</span>]]  </span><br><span class="line">runinghour = <span class="number">1</span>  <span class="comment"># 定义运行时间</span></span><br><span class="line">times = runinghour * <span class="number">3600</span>  <span class="comment"># 次数</span></span><br><span class="line"><span class="built_in">print</span>(times)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, times):</span><br><span class="line">    time_now = [time.localtime(time.time()).tm_hour, time.localtime(time.time()).tm_min]</span><br><span class="line">    <span class="keyword">if</span> time_now <span class="keyword">in</span> clocktime:</span><br><span class="line">        <span class="built_in">print</span>(time_now)</span><br><span class="line">        winsound.Beep(<span class="number">1000</span>, <span class="number">1000</span>)</span><br><span class="line">        spk.Speak(<span class="string">u&quot;快去看下饭好了没有？&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">60</span>)  <span class="comment"># 每分钟对比一次时间</span></span><br></pre></td></tr></table></figure><h2 id="95、根据年月获取当月天数"><a href="#95、根据年月获取当月天数" class="headerlink" title="95、根据年月获取当月天数"></a>95、根据年月获取当月天数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_month_days</span>(<span class="params">year, month</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据年份，月份信息显示此月份天数</span></span><br><span class="line"><span class="string">    :param year: 年份：</span></span><br><span class="line"><span class="string">    :param month: 月份（1～12）：</span></span><br><span class="line"><span class="string">    :return: 当月天数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> month &gt;<span class="number">12</span> <span class="keyword">or</span> month &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> month == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">29</span> <span class="keyword">if</span> year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">or</span> year % <span class="number">400</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="number">28</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> month <span class="keyword">in</span> (<span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">30</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">31</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;2020-04&#x27;</span>.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">year = <span class="built_in">int</span>(a[<span class="number">0</span>])</span><br><span class="line">month = <span class="built_in">int</span>(a[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(get_month_days(year,month))</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure><h2 id="96、Django获取favicon-ico图标"><a href="#96、Django获取favicon-ico图标" class="headerlink" title="96、Django获取favicon.ico图标"></a>96、Django获取favicon.ico图标</h2><p>制作一个ico文件，使用PS或者某些在线生成ico的网站</p><p>将此文件命名为“favicon.ico”后放在static&#x2F;下</p><p><img src="https://img-blog.csdnimg.cn/20200805104730363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在urls.py中定义路由：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> RedirectView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line"><span class="comment"># 访问favicon.ico 网站图标</span></span><br><span class="line">    path(<span class="string">&quot;favicon.ico&quot;</span>,RedirectView.as_view(url=<span class="string">&#x27;static/favicon.ico&#x27;</span>)),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="97、django-静态文件配置"><a href="#97、django-静态文件配置" class="headerlink" title="97、django 静态文件配置"></a>97、django 静态文件配置</h2><p>settings.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span></span><br><span class="line"><span class="comment"># 添加静态资源路由地址</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">&#x27;static&#x27;</span>),</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"><span class="comment"># 使用python manage.py collectstatic收集静态文件时时使用STATIC_ROOT</span></span><br><span class="line"><span class="comment"># STATIC_ROOT = os.path.join(BASE_DIR, &#x27;static&#x27;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>urls.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> RedirectView</span><br><span class="line"><span class="keyword">from</span> django.views.static <span class="keyword">import</span> serve</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> <span class="string">&#x27;你的项目名称&#x27;</span> <span class="keyword">import</span> settings</span><br><span class="line">urlpatterns = [</span><br><span class="line">   </span><br><span class="line">    path(<span class="string">&quot;favicon.ico&quot;</span>,RedirectView.as_view(url=<span class="string">&#x27;static/favicon.ico&#x27;</span>)),</span><br><span class="line">    re_path(<span class="string">&#x27;static/(?P&lt;path&gt;.*)$&#x27;</span>, serve, &#123;<span class="string">&#x27;document_root&#x27;</span>: settings.STATICFILES_DIRS[<span class="number">0</span>]&#125;),</span><br><span class="line">    </span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="98、django-JsonResponse返回中文时显示unicode编码（-u67e5-u8be2）"><a href="#98、django-JsonResponse返回中文时显示unicode编码（-u67e5-u8be2）" class="headerlink" title="98、django JsonResponse返回中文时显示unicode编码（\u67e5\u8be2）"></a>98、django JsonResponse返回中文时显示unicode编码（\u67e5\u8be2）</h2><p>原因<br>这个unicode编码，是python3默认返回的编码。</p><p>解决方案<br>JsonResponse里面有个参数json_dumps_params，设置为json_dumps_params&#x3D;{‘ensure_ascii’:False}即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;创建成功&#x27;</span>,&#125;</span><br><span class="line"><span class="keyword">return</span> JsonResponse(data=data, json_dumps_params=&#123;<span class="string">&#x27;ensure_ascii&#x27;</span>: <span class="literal">False</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="99、获取当前时间月份的首日与最后一天"><a href="#99、获取当前时间月份的首日与最后一天" class="headerlink" title="99、获取当前时间月份的首日与最后一天"></a>99、获取当前时间月份的首日与最后一天</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_month_start_and_end</span>(<span class="params">date=datetime.datetime.now(<span class="params"></span>)</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取当前时间的月份首日与最后一天</span></span><br><span class="line"><span class="string">    :param date:</span></span><br><span class="line"><span class="string">    :return: (首日，最后一天)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    year, month = <span class="built_in">str</span>(date).split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>], <span class="built_in">str</span>(date).split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    end = calendar.monthrange(<span class="built_in">int</span>(year), <span class="built_in">int</span>(month))[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;year&#125;</span>-<span class="subst">&#123;month&#125;</span>-01&#x27;</span>, <span class="string">f&#x27;<span class="subst">&#123;year&#125;</span>-<span class="subst">&#123;month&#125;</span>-<span class="subst">&#123;end&#125;</span>&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="100、xadmin后台批量操作"><a href="#100、xadmin后台批量操作" class="headerlink" title="100、xadmin后台批量操作"></a>100、xadmin后台批量操作</h2><p>adminx.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xadmin</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span>  Sum</span><br><span class="line"><span class="keyword">from</span> xadmin.plugins.actions <span class="keyword">import</span> BaseActionView</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCountFeeAction</span>(<span class="title class_ inherited__">BaseActionView</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        用户余额统计</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">    action_name = <span class="string">&quot;countuserfee&quot;</span>  <span class="comment">#: 相当于这个 Action 的唯一标示, 尽量用比较针对性的名字</span></span><br><span class="line">    description = <span class="string">u&#x27;统计用户总余额&#x27;</span>  <span class="comment">#: 描述, 出现在 Action 菜单中, 可以使用 ``%(verbose_name_plural)s`` 代替 Model 的名字.</span></span><br><span class="line">    model_perm = <span class="string">&#x27;view&#x27;</span>  <span class="comment"># 权限</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_action</span>(<span class="params">self, queryset</span>):</span><br><span class="line">        all_balance = MallUser.objects.<span class="built_in">all</span>().aggregate(Sum(<span class="string">&#x27;balance&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">f&#x27;用户总余额<span class="subst">&#123;all_balance&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserAdmin</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;用户信息管理&quot;&quot;&quot;</span></span><br><span class="line">    list_display = [<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;balance&#x27;</span>, <span class="string">&#x27;status&#x27;</span>, <span class="string">&#x27;addtime&#x27;</span>]</span><br><span class="line">    search_fields = [<span class="string">&#x27;username&#x27;</span>, ]</span><br><span class="line">    list_filter = [<span class="string">&#x27;status&#x27;</span>, <span class="string">&#x27;addtime&#x27;</span>]</span><br><span class="line">    list_per_page = <span class="number">30</span>  <span class="comment"># 默认每页数量</span></span><br><span class="line">    model_icon = <span class="string">&#x27;fa fa-user&#x27;</span></span><br><span class="line">    list_editable = [<span class="string">&#x27;status&#x27;</span>]</span><br><span class="line">    ordering = [<span class="string">&#x27;-addtime&#x27;</span>]</span><br><span class="line">    actions = [ MyCountFeeAction]  <span class="comment"># 添加批量选择操作</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200812233442373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="101、xadmin过滤器外键显示特定值（比如只能过滤自己与超级管理员定义的数据）"><a href="#101、xadmin过滤器外键显示特定值（比如只能过滤自己与超级管理员定义的数据）" class="headerlink" title="101、xadmin过滤器外键显示特定值（比如只能过滤自己与超级管理员定义的数据）"></a>101、xadmin过滤器外键显示特定值（比如只能过滤自己与超级管理员定义的数据）</h2><p>首先，修改xadmin源码，修改xadmin&#x2F;filters.py,在401行，做如下修改，</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">把self.lookup_choices = field.get_choices(include_blank=<span class="literal">False</span>)</span><br><span class="line">改为：</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用自定义的方法</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">hasattr</span>(model_admin, <span class="string">&#x27;&#123;field&#125;_choices&#x27;</span>.<span class="built_in">format</span>(field=field.name)):</span><br><span class="line">        self.lookup_choices = <span class="built_in">getattr</span>(model_admin, <span class="string">&#x27;&#123;field&#125;_choices&#x27;</span>.<span class="built_in">format</span>(field=field.name))(field, request,params, model,model_admin,field_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.lookup_choices = field.get_choices(include_blank=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>如图:</p><p><img src="https://img-blog.csdnimg.cn/20200812234011656.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>然后，在adminx.py中定义过滤的方法：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xadmin</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span>  Q, Sum</span><br><span class="line"><span class="keyword">from</span> xadmin.plugins.actions <span class="keyword">import</span> BaseActionView</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MeasurePointAdmin</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="comment"># search_fields = [&#x27;user__name&#x27;, &#x27;user__account&#x27;]  # 检索字段</span></span><br><span class="line">    list_display = [<span class="string">&#x27;num&#x27;</span>, <span class="string">&#x27;elevation&#x27;</span>, <span class="string">&#x27;correct_num&#x27;</span>, <span class="string">&#x27;cumulative_amount&#x27;</span>]</span><br><span class="line">    list_filter = [<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;is_default&#x27;</span>, <span class="string">&#x27;create_time&#x27;</span>]  <span class="comment"># 分组过滤的字段</span></span><br><span class="line">    list_editable = [<span class="string">&#x27;num&#x27;</span>, <span class="string">&#x27;elevation&#x27;</span>, <span class="string">&#x27;correct_num&#x27;</span>, <span class="string">&#x27;cumulative_amount&#x27;</span>]</span><br><span class="line">    ordering = (<span class="string">&#x27;id&#x27;</span>,)  <span class="comment"># 设置默认排序字段，负号表示降序排序</span></span><br><span class="line">    list_per_page = <span class="number">30</span>  <span class="comment"># 默认每页显示多少条记录，默认是100条</span></span><br><span class="line">    model_icon = <span class="string">&#x27;fa fa-users&#x27;</span>  <span class="comment"># 左侧小图标</span></span><br><span class="line">    readonly_fields = [<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;is_default&#x27;</span>]</span><br><span class="line">    import_excel = <span class="literal">True</span></span><br><span class="line">    actions = [MyCountFeeAction]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义的函数名必须是  字段名_choices</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">user_choices</span>(<span class="params">self, field, request, params, model, model_admin, field_path</span>):</span><br><span class="line">        <span class="comment"># 超级用户不做控制</span></span><br><span class="line">        <span class="keyword">if</span> self.request.user.is_superuser:</span><br><span class="line">            <span class="keyword">return</span> field.get_choices(include_blank=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 过滤器只显示自己与超级管理员</span></span><br><span class="line">        user_lst = field.related_model._default_manager.<span class="built_in">filter</span>(Q(<span class="built_in">id</span>=self.request.user.<span class="built_in">id</span>) | Q(is_superuser=<span class="literal">True</span>))</span><br><span class="line">        <span class="comment"># 返回格式 [(&#x27;pk&#x27;,&#x27;标题&#x27;),]</span></span><br><span class="line">        <span class="keyword">return</span> [(user.<span class="built_in">id</span>, user.username) <span class="keyword">for</span> user <span class="keyword">in</span> user_lst]</span><br></pre></td></tr></table></figure><p>效果:</p><p><img src="https://img-blog.csdnimg.cn/2020081223440761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xtX2lzX2Rj,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="102、Django中的CSRF局部禁用"><a href="#102、Django中的CSRF局部禁用" class="headerlink" title="102、Django中的CSRF局部禁用"></a>102、Django中的CSRF局部禁用</h2><p>为了避免没有csrf token而产生的403的forbidden错误，可以使用csrf_exempt装饰器来处理POST、GET请求的View, 这种方式是CSRF局部禁用。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"></span><br><span class="line"><span class="meta">@method_decorator(<span class="params">csrf_exempt</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_data</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">elif</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="103、使用python命令创建django项目"><a href="#103、使用python命令创建django项目" class="headerlink" title="103、使用python命令创建django项目"></a>103、使用python命令创建django项目</h2><p>创建django项目<br>方式一：直接打开pycharm创建，选择file-&gt;new project-&gt;django<br>方式二：通过命令创建<br>先创建虚拟环境：python -m venv django_venv<br>然后导入django库：pip install django -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a><br>最后使用命令创建：django-admin startproject my_django_project</p><h2 id="104、-二维列表、二维数组行求和与列求和"><a href="#104、-二维列表、二维数组行求和与列求和" class="headerlink" title="104、 二维列表、二维数组行求和与列求和"></a>104、 二维列表、二维数组行求和与列求和</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二维数组，对列和行求和</span></span><br><span class="line">a = [</span><br><span class="line">    [<span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">1</span>, <span class="number">4.1</span>],</span><br><span class="line">    [<span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">4</span>],</span><br><span class="line">    [<span class="string">&#x27;123&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>,<span class="number">7</span>],</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aa</span>(<span class="params">x, y</span>):</span><br><span class="line">    x = <span class="number">0</span> <span class="keyword">if</span> <span class="built_in">isinstance</span>(x, <span class="built_in">str</span>) <span class="keyword">else</span> x</span><br><span class="line">    y = <span class="number">0</span> <span class="keyword">if</span> <span class="built_in">isinstance</span>(y, <span class="built_in">str</span>) <span class="keyword">else</span> y</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对行求和</span></span><br><span class="line">row_sum = [reduce(aa, i) <span class="keyword">for</span> i <span class="keyword">in</span> a]</span><br><span class="line"><span class="comment"># 对列求和，只能处理相同长度的子元素</span></span><br><span class="line">column_sum_1 = [reduce(aa, i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">zip</span>(*a)]</span><br><span class="line"><span class="comment"># 对列求和，可以处理不同长度的子元素</span></span><br><span class="line">column_sum_2 = <span class="built_in">list</span>(<span class="built_in">dict</span>(pd.DataFrame(a).fillna(<span class="number">0</span>).apply(<span class="keyword">lambda</span> x: <span class="string">&#x27;&#x27;</span> <span class="keyword">if</span> <span class="built_in">any</span>(<span class="built_in">isinstance</span>(d, <span class="built_in">str</span>) <span class="keyword">for</span> d <span class="keyword">in</span> x) <span class="keyword">else</span> <span class="built_in">round</span>(x.<span class="built_in">sum</span>(), <span class="number">2</span>))).values())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;行求和：&#123;&#125;\r\n列求和(相同长度)：&#123;&#125;\r\n列求和：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(row_sum, column_sum_1, column_sum_2))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">行求和：[<span class="number">5.1</span>, <span class="number">4</span>, <span class="number">20</span>]</span><br><span class="line">列求和(相同长度)：[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">12.1</span>]</span><br><span class="line">列求和：[<span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">12.1</span>, <span class="number">6.0</span>, <span class="number">7.0</span>]</span><br></pre></td></tr></table></figure><h2 id="105、获取时间字符串的月份数"><a href="#105、获取时间字符串的月份数" class="headerlink" title="105、获取时间字符串的月份数"></a>105、获取时间字符串的月份数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_months</span>(<span class="params">start_month_str, end_month_str</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    # 获取时间字符串中的月份数</span></span><br><span class="line"><span class="string">    :param start_month_str: 开始字符串</span></span><br><span class="line"><span class="string">    :param end_month_str: 结束字符串</span></span><br><span class="line"><span class="string">    :return: 月份数</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    end_month_date = datetime.strptime(end_month_str, <span class="string">&#x27;%Y-%m&#x27;</span>)</span><br><span class="line">    start_month_date = datetime.strptime(start_month_str, <span class="string">&#x27;%Y-%m&#x27;</span>)</span><br><span class="line">    end_year, end_month = end_month_date.year, end_month_date.month</span><br><span class="line">    start_year, start_month = start_month_date.year, start_month_date.month</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (end_year - start_year) *<span class="number">12</span> + (end_month - start_month) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">end_month_str = <span class="string">&#x27;2021-02&#x27;</span></span><br><span class="line">start_month_str = <span class="string">&#x27;2020-07&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(get_months(start_month_str, end_month_str))</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><h2 id="106、字符串不足补零"><a href="#106、字符串不足补零" class="headerlink" title="106、字符串不足补零"></a>106、字符串不足补零</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>.zfill(<span class="number">15</span>)) <span class="comment"># 补0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>.rjust(<span class="number">15</span>)) <span class="comment"># 右对齐，补空格</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>.ljust(<span class="number">15</span>)) <span class="comment"># 左对齐，补空格</span></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">0000hello world</span><br><span class="line">    hello world</span><br><span class="line">hello world  </span><br></pre></td></tr></table></figure><h2 id="107、时间戳转字符串日期"><a href="#107、时间戳转字符串日期" class="headerlink" title="107、时间戳转字符串日期"></a>107、时间戳转字符串日期</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">t1 = time.time()</span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"><span class="built_in">print</span>(time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime(t1)))</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">1621741567.082192</span></span><br><span class="line"><span class="number">2021</span>-05-<span class="number">23</span> <span class="number">11</span>:<span class="number">46</span>:07</span><br></pre></td></tr></table></figure><p>使用函数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@contact: 微信 1257309054</span></span><br><span class="line"><span class="string">@file: 时间戳转日期.py</span></span><br><span class="line"><span class="string">@time: 2022/6/27 17:16</span></span><br><span class="line"><span class="string">@author: LDC</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确10位长度的时间戳可精确到秒，11-14位长度则是包含了毫秒</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">int_to_datetime</span>(<span class="params">intValue</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">str</span>(intValue)) == <span class="number">10</span>:</span><br><span class="line">        <span class="comment"># 精确到秒</span></span><br><span class="line">        timeValue = time.localtime(intValue)</span><br><span class="line">        tempDate = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, timeValue)</span><br><span class="line">        datetimeValue = datetime.datetime.strptime(tempDate, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">10</span> &lt; <span class="built_in">len</span>(<span class="built_in">str</span>(intValue)) <span class="keyword">and</span> <span class="built_in">len</span>(<span class="built_in">str</span>(intValue)) &lt; <span class="number">15</span>:</span><br><span class="line">        <span class="comment"># 精确到毫秒</span></span><br><span class="line">        k = <span class="built_in">len</span>(<span class="built_in">str</span>(intValue)) - <span class="number">10</span></span><br><span class="line">        timetamp = datetime.datetime.fromtimestamp(intValue / (<span class="number">1</span> * <span class="number">10</span> ** k))</span><br><span class="line">        datetimeValue = timetamp.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S.%f&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> datetimeValue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">time1 = <span class="number">1656321420</span></span><br><span class="line">time2 = <span class="number">1656321086560</span></span><br><span class="line"><span class="built_in">print</span>(int_to_datetime(time1))</span><br><span class="line"><span class="built_in">print</span>(int_to_datetime(time2))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">2022-06-27 17:17:00</span></span><br><span class="line"><span class="string">2022-06-27 17:11:26.560000</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="108、列表转字符串"><a href="#108、列表转字符串" class="headerlink" title="108、列表转字符串"></a>108、列表转字符串</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;,&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>,a)))</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">`<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>`</span><br></pre></td></tr></table></figure><h2 id="109、pip国内镜像源"><a href="#109、pip国内镜像源" class="headerlink" title="109、pip国内镜像源"></a>109、pip国内镜像源</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install 库名 -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">清华：-i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line">阿里云：-i http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line">中国科技大学 -i https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line"></span><br><span class="line">华中理工大学：-i http://pypi.hustunique.com/</span><br><span class="line"></span><br><span class="line">山东理工大学：-i http://pypi.sdutlinux.org/ </span><br><span class="line"></span><br><span class="line">豆瓣：-i http://pypi.douban.com/simple/</span><br></pre></td></tr></table></figure><h2 id="110、python把时间字符串转换成刚刚、1天前、3个月前、1年前"><a href="#110、python把时间字符串转换成刚刚、1天前、3个月前、1年前" class="headerlink" title="110、python把时间字符串转换成刚刚、1天前、3个月前、1年前"></a>110、python把时间字符串转换成刚刚、1天前、3个月前、1年前</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">date_interval</span>(<span class="params">date_str</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    获取时间间隔</span></span><br><span class="line"><span class="string">    1分钟前，2分钟前，10分钟前，1小时前，2小时前，1天前，2天前，3天前，1个月前，3个月前，1年前，3年前</span></span><br><span class="line"><span class="string">    :param date_str: 时间字符串</span></span><br><span class="line"><span class="string">    :return: 字符串</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    date_str = time.strptime(date_str, <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">    <span class="comment"># 将时间元组转换为时间戳</span></span><br><span class="line">    t = time.mktime(date_str)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当前时间</span></span><br><span class="line">    seconds = time.time() - t</span><br><span class="line"></span><br><span class="line">    years = <span class="built_in">int</span>(seconds // (<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">365</span>))</span><br><span class="line">    <span class="keyword">if</span> years:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#123;&#125;年前&#x27;</span>.<span class="built_in">format</span>(years)</span><br><span class="line">    months = <span class="built_in">int</span>(seconds // (<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span>))</span><br><span class="line">    <span class="keyword">if</span> months:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#123;&#125;月前&#x27;</span>.<span class="built_in">format</span>(months)</span><br><span class="line">    days = <span class="built_in">int</span>(seconds // (<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>))</span><br><span class="line">    <span class="keyword">if</span> days:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#123;&#125;天前&#x27;</span>.<span class="built_in">format</span>(days)</span><br><span class="line">    hours = <span class="built_in">int</span>(seconds // (<span class="number">60</span> * <span class="number">60</span>))</span><br><span class="line">    <span class="keyword">if</span> hours:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#123;&#125;小时前&#x27;</span>.<span class="built_in">format</span>(hours)</span><br><span class="line">    minutes = <span class="built_in">int</span>(seconds // (<span class="number">60</span>))</span><br><span class="line">    <span class="keyword">if</span> minutes:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#123;&#125;分钟前&#x27;</span>.<span class="built_in">format</span>(minutes)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;刚刚&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    date1 = <span class="string">&#x27;2019-07-10 15:27:51&#x27;</span></span><br><span class="line">    date2 = <span class="string">&#x27;2021-07-10 15:27:51&#x27;</span></span><br><span class="line">    date3 = <span class="string">&#x27;2021-08-10 15:27:51&#x27;</span></span><br><span class="line">    date4 = <span class="string">&#x27;2021-08-12 11:01:51&#x27;</span></span><br><span class="line">    date5 = datetime.datetime.now() + datetime.timedelta(seconds=-<span class="number">3</span>)</span><br><span class="line">    date5 = date5.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(date_interval(date1))</span><br><span class="line">    <span class="built_in">print</span>(date_interval(date2))</span><br><span class="line">    <span class="built_in">print</span>(date_interval(date3))</span><br><span class="line">    <span class="built_in">print</span>(date_interval(date4))</span><br><span class="line">    <span class="built_in">print</span>(date_interval(date5))</span><br></pre></td></tr></table></figure><h2 id="111、Django使用ORM执行sql语句"><a href="#111、Django使用ORM执行sql语句" class="headerlink" title="111、Django使用ORM执行sql语句"></a>111、Django使用ORM执行sql语句</h2><p>通过raw函数执行</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alarm_datas = gsm.AlertMessage.objects.raw(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                select am_all.id, am_all.sensor_number</span></span><br><span class="line"><span class="string">                    FROM alert_message as am_all</span></span><br><span class="line"><span class="string">                    where </span></span><br><span class="line"><span class="string">                        am_all.real=&#x27;1&#x27;</span></span><br><span class="line"><span class="string">                        and am_all.is_show=1</span></span><br><span class="line"><span class="string">                    order by am_all.alarm_level desc</span></span><br><span class="line"><span class="string">                &#x27;&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> ad <span class="keyword">in</span> alarm_datas:</span><br><span class="line"><span class="built_in">print</span>(ad.sensor_number)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="112、Django通过变量字段获取数据"><a href="#112、Django通过变量字段获取数据" class="headerlink" title="112、Django通过变量字段获取数据"></a>112、Django通过变量字段获取数据</h2><p>通过方法<code>__getattribute__</code>来获取</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alert_messages = AlertMessage.objects.<span class="built_in">filter</span>(real=<span class="number">0</span>)</span><br><span class="line">am_fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;real&#x27;</span>, <span class="string">&#x27;name&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> am <span class="keyword">in</span> alert_messages:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(am_fields)):</span><br><span class="line"><span class="built_in">print</span>(am_fields[i], am.__getattribute__(am_fields[i]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="113、Django查询变量字段、更新变量字段"><a href="#113、Django查询变量字段、更新变量字段" class="headerlink" title="113、Django查询变量字段、更新变量字段"></a>113、Django查询变量字段、更新变量字段</h2><p>通过<code>**&#123;变量名:值&#125;</code>来操作</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">field = <span class="string">&#x27;device_code&#x27;</span></span><br><span class="line"><span class="comment"># 查询</span></span><br><span class="line">device_infos = gsm.DeviceInfo.objects.<span class="built_in">filter</span>(**&#123;field: <span class="string">&#x27;012&#x27;</span>&#125;)</span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">gsm.DeviceInfo.objects.<span class="built_in">filter</span>(device_code=<span class="string">&#x27;012&#x27;</span>).update(**&#123;field : <span class="string">&#x27;0&#x27;</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="114、vue生成dist文件"><a href="#114、vue生成dist文件" class="headerlink" title="114、vue生成dist文件"></a>114、vue生成dist文件</h2><p>安装npm，到<a href="https://nodejs.org/en/download/">官网下载</a><br>在vue项目下打开cmd，输入命令</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>如果报错，npm ERR! missing script: build，<br>则使用以下命令</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">npm run build:prod</span><br></pre></td></tr></table></figure><p>具体看package.json</p><p><img src="https://img-blog.csdnimg.cn/eff15dcd4c1d499f9641d0ac25c09bc0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Lic5pyo5pyI,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="115、python获取电脑磁盘、CPU、内存使用情况"><a href="#115、python获取电脑磁盘、CPU、内存使用情况" class="headerlink" title="115、python获取电脑磁盘、CPU、内存使用情况"></a>115、python获取电脑磁盘、CPU、内存使用情况</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"><span class="comment">#  pip install psutil</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取本机磁盘使用率和剩余空间G信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_disk_info</span>():</span><br><span class="line">    <span class="comment"># 循环磁盘分区</span></span><br><span class="line">    content = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> disk <span class="keyword">in</span> psutil.disk_partitions():</span><br><span class="line">        <span class="comment"># 读写方式 光盘 or 有效磁盘类型</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;cdrom&#x27;</span> <span class="keyword">in</span> disk.opts <span class="keyword">or</span> disk.fstype == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        disk_name_arr = disk.device.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">        disk_name = disk_name_arr[<span class="number">0</span>]</span><br><span class="line">        disk_info = psutil.disk_usage(disk.device)</span><br><span class="line">        <span class="comment"># 磁盘剩余空间，单位G</span></span><br><span class="line">        free_disk_size = disk_info.free//<span class="number">1024</span>//<span class="number">1024</span>//<span class="number">1024</span></span><br><span class="line">        <span class="comment"># 当前磁盘使用率和剩余空间G信息</span></span><br><span class="line">        info = <span class="string">&quot;&#123;&#125;盘使用率：&#123;&#125;%%， 剩余空间：&#123;&#125;G &quot;</span>.<span class="built_in">format</span>(disk_name, <span class="built_in">str</span>(disk_info.percent), free_disk_size)</span><br><span class="line">        <span class="comment"># 拼接多个磁盘的信息</span></span><br><span class="line">        content = content + info</span><br><span class="line">    <span class="built_in">print</span>(content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># cpu信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cpu_info</span>():</span><br><span class="line">    cpu_percent = psutil.cpu_percent(interval=<span class="number">1</span>)</span><br><span class="line">    cpu_info = <span class="string">&quot;CPU使用率：%i%%&quot;</span> % cpu_percent</span><br><span class="line">    <span class="built_in">print</span>(cpu_info)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内存信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_memory_info</span>():</span><br><span class="line">    virtual_memory = psutil.virtual_memory()</span><br><span class="line">    used_memory = virtual_memory.used/<span class="number">1024</span>/<span class="number">1024</span>/<span class="number">1024</span></span><br><span class="line">    free_memory = virtual_memory.free/<span class="number">1024</span>/<span class="number">1024</span>/<span class="number">1024</span></span><br><span class="line">    memory_percent = virtual_memory.percent</span><br><span class="line">    memory_info = <span class="string">&quot;内存使用：%0.2fG，使用率%0.1f%%，剩余内存：%0.2fG&quot;</span> % (used_memory, memory_percent, free_memory)</span><br><span class="line">    <span class="built_in">print</span>(memory_info)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    get_disk_info()</span><br><span class="line">    get_cpu_info()</span><br><span class="line">    get_memory_info()</span><br></pre></td></tr></table></figure><h2 id="116、max比较字典列表"><a href="#116、max比较字典列表" class="headerlink" title="116、max比较字典列表"></a>116、max比较字典列表</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">使用max函数比较字典列表对象</span></span><br><span class="line"><span class="string">需求：找出用户组最大id的字典</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">com_id</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    比较用用户ids列表</span></span><br><span class="line"><span class="string">    :param f: 字典</span></span><br><span class="line"><span class="string">    :return: 返回最大的用户id</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(f[<span class="string">&#x27;user_ids&#x27;</span>])</span><br><span class="line"></span><br><span class="line">friends_added = [</span><br><span class="line">        &#123;<span class="string">&#x27;user_ids&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>], <span class="string">&#x27;create_at&#x27;</span>: <span class="string">&#x27;2020-01-01&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;user_ids&#x27;</span>: [<span class="number">3</span>, <span class="number">6</span>], <span class="string">&#x27;create_at&#x27;</span>: <span class="string">&#x27;2020-01-02&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;user_ids&#x27;</span>: [<span class="number">2</span>, <span class="number">1</span>], <span class="string">&#x27;create_at&#x27;</span>: <span class="string">&#x27;2020-02-02&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;user_ids&#x27;</span>: [<span class="number">4</span>, <span class="number">1</span>], <span class="string">&#x27;create_at&#x27;</span>: <span class="string">&#x27;2020-02-02&#x27;</span>&#125;,</span><br><span class="line">    ]</span><br><span class="line"><span class="comment"># max函数中使用key参数，指定自定义函数来比较</span></span><br><span class="line">item = <span class="built_in">max</span>(friends_added, key=com_id)</span><br><span class="line">item_1 = <span class="built_in">max</span>(friends_added, key=<span class="keyword">lambda</span> f: <span class="built_in">max</span>(f[<span class="string">&#x27;user_ids&#x27;</span>])) <span class="comment"># com_id可以转成lambda函数</span></span><br><span class="line"><span class="built_in">print</span>(item)</span><br><span class="line"><span class="built_in">print</span>(item_1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;user_ids&#x27;</span>: [<span class="number">3</span>, <span class="number">6</span>], <span class="string">&#x27;create_at&#x27;</span>: <span class="string">&#x27;2020-01-02&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;user_ids&#x27;</span>: [<span class="number">3</span>, <span class="number">6</span>], <span class="string">&#x27;create_at&#x27;</span>: <span class="string">&#x27;2020-01-02&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="117、django查询表的具体字段"><a href="#117、django查询表的具体字段" class="headerlink" title="117、django查询表的具体字段"></a>117、django查询表的具体字段</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ExampleModel.objects.values(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;username&#x27;</span>)</span><br><span class="line"><span class="comment"># 返回的结果是QuerySet， 里面的元素是dict格式</span></span><br><span class="line"><span class="comment"># [&#123;&#x27;id&#x27;:1, &#x27;username&#x27;: &#x27;Austin&#x27;&#125;, &#123;&#x27;id&#x27;:2, &#x27;username&#x27;:&#x27;Sam&#x27;&#125;, ...]</span></span><br><span class="line"><span class="comment"># 相当于SQL中的SELECT id, username FROM ......, </span></span><br><span class="line"><span class="comment"># 只返回对应属性（字段）的值</span></span><br></pre></td></tr></table></figure><h2 id="118、MySQL查询数据添加自增序号"><a href="#118、MySQL查询数据添加自增序号" class="headerlink" title="118、MySQL查询数据添加自增序号"></a>118、MySQL查询数据添加自增序号</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> @i = <span class="number">0</span>;</span><br><span class="line">select waveform, <span class="string">&#x27;沿桥风吹&#x27;</span> <span class="keyword">as</span> label ,(@i:=@i+<span class="number">1</span>) xh <span class="keyword">from</span> alert_message where is_real=<span class="number">1</span> <span class="keyword">and</span> node_id=<span class="number">138</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="119、MySQL-时间截取年月日"><a href="#119、MySQL-时间截取年月日" class="headerlink" title="119、MySQL 时间截取年月日"></a>119、MySQL 时间截取年月日</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">select <span class="built_in">id</span>,</span><br><span class="line">addtime, </span><br><span class="line">date_format(addtime,<span class="string">&#x27;%Y-%m-%d&#x27;</span>) <span class="keyword">as</span> short_time </span><br><span class="line"><span class="keyword">from</span> alert_message </span><br><span class="line">where date_format(addtime,<span class="string">&#x27;%Y-%m-%d&#x27;</span>) = <span class="string">&#x27;2022-03-13&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/37cec67fa1e1458f9aba1b745600a493.png" alt="在这里插入图片描述"></p><h2 id="120、-列表取奇数下标值"><a href="#120、-列表取奇数下标值" class="headerlink" title="120、 列表取奇数下标值"></a>120、 列表取奇数下标值</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;奇数下标值&#x27;</span>,list1[<span class="number">1</span>::<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">奇数下标值 [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="121、列表取偶数下标值"><a href="#121、列表取偶数下标值" class="headerlink" title="121、列表取偶数下标值"></a>121、列表取偶数下标值</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;偶数下标值&#x27;</span>,list1[::<span class="number">2</span>])</span><br><span class="line">偶数下标值 [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="122、列表相同元素分类、分组"><a href="#122、列表相同元素分类、分组" class="headerlink" title="122、列表相同元素分类、分组"></a>122、列表相同元素分类、分组</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">a =[<span class="built_in">list</span>(group) <span class="keyword">for</span> key, group <span class="keyword">in</span> itertools.groupby(data)]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">[[<span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>], [<span class="number">1</span>], [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]]</span><br></pre></td></tr></table></figure><h2 id="123、ubuntu切换用户"><a href="#123、ubuntu切换用户" class="headerlink" title="123、ubuntu切换用户"></a>123、ubuntu切换用户</h2><p>1）从user用户切换到root用户<br>sudo su<br>2）从root用户切回user用户<br>su user (user是你自己安装时候的用户名)，或是直接输入exit，也可Ctrl+D组合键推出</p><h2 id="124、numpy二维数组获取某一列"><a href="#124、numpy二维数组获取某一列" class="headerlink" title="124、numpy二维数组获取某一列"></a>124、numpy二维数组获取某一列</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>],</span><br><span class="line">    [<span class="number">13.2</span>, <span class="number">14.8</span>, <span class="number">15.9</span>, <span class="number">16.10</span>, <span class="number">16.11</span>, <span class="number">17.12</span>],</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">a_np = np.array(a)  <span class="comment"># 把二维列表转成numpy数组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第一行&#x27;</span>, a_np[<span class="number">0</span>].tolist())  <span class="comment"># 获取第一行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第一列&#x27;</span>, a_np[:, <span class="number">0</span>].tolist())  <span class="comment"># 获取第一列</span></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">第一行 [<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>, <span class="number">5.0</span>, <span class="number">6.0</span>]</span><br><span class="line">第一列 [<span class="number">1.0</span>, <span class="number">7.0</span>, <span class="number">13.2</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
